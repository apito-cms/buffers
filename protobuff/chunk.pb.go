// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chunk.proto

package protobuff

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BigFileChunk struct {
	// Fine Name
	FileInfo *FileDetails `protobuf:"bytes,11,opt,name=FileInfo,proto3" json:"FileInfo,omitempty"`
	// Filepath is just an arbitrary
	// name for this file.
	Filepath string `protobuf:"bytes,1,opt,name=Filepath,proto3" json:"Filepath,omitempty"`
	// SizeInBytes should match
	// len(Data) exactly.
	SizeInBytes int64 `protobuf:"varint,2,opt,name=SizeInBytes,proto3" json:"SizeInBytes,omitempty"`
	// According to the sender's clock,
	// when did this chunk get put
	// on the wire?
	SendTime              uint64 `protobuf:"fixed64,3,opt,name=SendTime,proto3" json:"SendTime,omitempty"`
	OriginalStartSendTime uint64 `protobuf:"fixed64,10,opt,name=OriginalStartSendTime,proto3" json:"OriginalStartSendTime,omitempty"`
	// Blake2B checksum of Data.
	Blake2B []byte `protobuf:"bytes,4,opt,name=Blake2B,proto3" json:"Blake2B,omitempty"`
	// Cumulative Blake2B of all
	// Chunks of the file, up to
	// and including this one.
	Blake2BCumulative []byte `protobuf:"bytes,5,opt,name=Blake2BCumulative,proto3" json:"Blake2BCumulative,omitempty"`
	// How big can Data be? I
	// recommend no more than 1MB.
	// I suggest 1MB chunking to be
	// on the safe side. Above
	// 2MB, I observe that gRPC
	// starts to return EOF instead
	// of conveying the messages.
	//
	// Fields Data and Blake2B are
	// for just a single chunk.
	Data []byte `protobuf:"bytes,6,opt,name=Data,proto3" json:"Data,omitempty"`
	// gRPC guarantees in-order delivery
	// of the stream, so ChunkNumber may
	// seem unnecessary. It is still
	// useful for/as a delivery progress
	// meter.
	ChunkNumber int64 `protobuf:"varint,7,opt,name=ChunkNumber,proto3" json:"ChunkNumber,omitempty"`
	// Be sure to set IsLastChunk to true
	// if this is the last chunk.
	IsLastChunk bool `protobuf:"varint,8,opt,name=IsLastChunk,proto3" json:"IsLastChunk,omitempty"`
	// IsBcastSetRequest? (else by default it is a BcastGetReply)
	IsBcastSet bool `protobuf:"varint,9,opt,name=IsBcastSet,proto3" json:"IsBcastSet,omitempty"`
}

func (m *BigFileChunk) Reset()         { *m = BigFileChunk{} }
func (m *BigFileChunk) String() string { return proto.CompactTextString(m) }
func (*BigFileChunk) ProtoMessage()    {}
func (*BigFileChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c46bd41e8571bd, []int{0}
}
func (m *BigFileChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BigFileChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BigFileChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BigFileChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BigFileChunk.Merge(m, src)
}
func (m *BigFileChunk) XXX_Size() int {
	return m.Size()
}
func (m *BigFileChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_BigFileChunk.DiscardUnknown(m)
}

var xxx_messageInfo_BigFileChunk proto.InternalMessageInfo

func (m *BigFileChunk) GetFileInfo() *FileDetails {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

func (m *BigFileChunk) GetFilepath() string {
	if m != nil {
		return m.Filepath
	}
	return ""
}

func (m *BigFileChunk) GetSizeInBytes() int64 {
	if m != nil {
		return m.SizeInBytes
	}
	return 0
}

func (m *BigFileChunk) GetSendTime() uint64 {
	if m != nil {
		return m.SendTime
	}
	return 0
}

func (m *BigFileChunk) GetOriginalStartSendTime() uint64 {
	if m != nil {
		return m.OriginalStartSendTime
	}
	return 0
}

func (m *BigFileChunk) GetBlake2B() []byte {
	if m != nil {
		return m.Blake2B
	}
	return nil
}

func (m *BigFileChunk) GetBlake2BCumulative() []byte {
	if m != nil {
		return m.Blake2BCumulative
	}
	return nil
}

func (m *BigFileChunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *BigFileChunk) GetChunkNumber() int64 {
	if m != nil {
		return m.ChunkNumber
	}
	return 0
}

func (m *BigFileChunk) GetIsLastChunk() bool {
	if m != nil {
		return m.IsLastChunk
	}
	return false
}

func (m *BigFileChunk) GetIsBcastSet() bool {
	if m != nil {
		return m.IsBcastSet
	}
	return false
}

type BigFileAck struct {
	Filepath         string       `protobuf:"bytes,1,opt,name=Filepath,proto3" json:"Filepath,omitempty"`
	SizeInBytes      int64        `protobuf:"varint,2,opt,name=SizeInBytes,proto3" json:"SizeInBytes,omitempty"`
	RecvTime         uint64       `protobuf:"fixed64,3,opt,name=RecvTime,proto3" json:"RecvTime,omitempty"`
	WholeFileBlake2B []byte       `protobuf:"bytes,4,opt,name=WholeFileBlake2B,proto3" json:"WholeFileBlake2B,omitempty"`
	Err              string       `protobuf:"bytes,5,opt,name=Err,proto3" json:"Err,omitempty"`
	FileDetails      *FileDetails `protobuf:"bytes,7,opt,name=file_details,json=fileDetails,proto3" json:"file_details,omitempty"`
}

func (m *BigFileAck) Reset()         { *m = BigFileAck{} }
func (m *BigFileAck) String() string { return proto.CompactTextString(m) }
func (*BigFileAck) ProtoMessage()    {}
func (*BigFileAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c46bd41e8571bd, []int{1}
}
func (m *BigFileAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BigFileAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BigFileAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BigFileAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BigFileAck.Merge(m, src)
}
func (m *BigFileAck) XXX_Size() int {
	return m.Size()
}
func (m *BigFileAck) XXX_DiscardUnknown() {
	xxx_messageInfo_BigFileAck.DiscardUnknown(m)
}

var xxx_messageInfo_BigFileAck proto.InternalMessageInfo

func (m *BigFileAck) GetFilepath() string {
	if m != nil {
		return m.Filepath
	}
	return ""
}

func (m *BigFileAck) GetSizeInBytes() int64 {
	if m != nil {
		return m.SizeInBytes
	}
	return 0
}

func (m *BigFileAck) GetRecvTime() uint64 {
	if m != nil {
		return m.RecvTime
	}
	return 0
}

func (m *BigFileAck) GetWholeFileBlake2B() []byte {
	if m != nil {
		return m.WholeFileBlake2B
	}
	return nil
}

func (m *BigFileAck) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func (m *BigFileAck) GetFileDetails() *FileDetails {
	if m != nil {
		return m.FileDetails
	}
	return nil
}

func init() {
	proto.RegisterType((*BigFileChunk)(nil), "protobuff.BigFileChunk")
	proto.RegisterType((*BigFileAck)(nil), "protobuff.BigFileAck")
}

func init() { proto.RegisterFile("chunk.proto", fileDescriptor_67c46bd41e8571bd) }

var fileDescriptor_67c46bd41e8571bd = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0x4f, 0x8b, 0xd3, 0x40,
	0x14, 0xef, 0xd8, 0xda, 0x6d, 0x5f, 0x7a, 0x58, 0x07, 0x56, 0x87, 0x1e, 0x42, 0x28, 0x08, 0x41,
	0x24, 0x85, 0xea, 0xc5, 0x8b, 0xb2, 0xd9, 0x75, 0xa1, 0x20, 0x2a, 0xa9, 0x20, 0x78, 0x91, 0x69,
	0xf6, 0xa5, 0x1d, 0x3a, 0xc9, 0x94, 0xc9, 0x64, 0x41, 0x3f, 0x85, 0xf8, 0xa9, 0x3c, 0xee, 0xd1,
	0x9b, 0xd2, 0x7e, 0x11, 0x99, 0xc9, 0x6e, 0x8c, 0x54, 0x4f, 0x9e, 0xe6, 0xfd, 0xfe, 0xbc, 0x07,
	0xf3, 0x7b, 0x0f, 0xbc, 0x74, 0x5d, 0x15, 0x9b, 0x68, 0xab, 0x95, 0x51, 0x74, 0xe8, 0x9e, 0x65,
	0x95, 0x65, 0xe3, 0x51, 0xaa, 0xf2, 0x5c, 0x15, 0xb5, 0x30, 0xf9, 0xda, 0x85, 0x51, 0x2c, 0x56,
	0x17, 0x42, 0xe2, 0x99, 0xf5, 0xd3, 0x19, 0x0c, 0x2c, 0x98, 0x17, 0x99, 0x62, 0x5e, 0x40, 0x42,
	0x6f, 0x76, 0x3f, 0x6a, 0x9a, 0x23, 0x2b, 0x9d, 0xa3, 0xe1, 0x42, 0x96, 0x49, 0xe3, 0xa3, 0xe3,
	0xba, 0x67, 0xcb, 0xcd, 0x9a, 0x91, 0x80, 0x84, 0xc3, 0xa4, 0xc1, 0x34, 0x00, 0x6f, 0x21, 0x3e,
	0xe3, 0xbc, 0x88, 0x3f, 0x19, 0x2c, 0xd9, 0x9d, 0x80, 0x84, 0xdd, 0xa4, 0x4d, 0xd9, 0xee, 0x05,
	0x16, 0x97, 0xef, 0x44, 0x8e, 0xac, 0x1b, 0x90, 0xb0, 0x9f, 0x34, 0x98, 0x3e, 0x85, 0x93, 0x37,
	0x5a, 0xac, 0x44, 0xc1, 0xe5, 0xc2, 0x70, 0x6d, 0x1a, 0x23, 0x38, 0xe3, 0xdf, 0x45, 0xca, 0xe0,
	0x28, 0x96, 0x7c, 0x83, 0xb3, 0x98, 0xf5, 0x02, 0x12, 0x8e, 0x92, 0x5b, 0x48, 0x1f, 0xc3, 0xbd,
	0x9b, 0xf2, 0xac, 0xca, 0x2b, 0xc9, 0x8d, 0xb8, 0x42, 0x76, 0xd7, 0x79, 0x0e, 0x05, 0x4a, 0xa1,
	0x77, 0xce, 0x0d, 0x67, 0x7d, 0x67, 0x70, 0xb5, 0xfd, 0x8f, 0x0b, 0xea, 0x75, 0x95, 0x2f, 0x51,
	0xb3, 0xa3, 0xfa, 0x3f, 0x2d, 0xca, 0x3a, 0xe6, 0xe5, 0x2b, 0x5e, 0x1a, 0x47, 0xb2, 0x41, 0x40,
	0xc2, 0x41, 0xd2, 0xa6, 0xa8, 0x0f, 0x30, 0x2f, 0xe3, 0x94, 0x97, 0x66, 0x81, 0x86, 0x0d, 0x9d,
	0xa1, 0xc5, 0x4c, 0x7e, 0x10, 0x80, 0x9b, 0xa5, 0x9c, 0xa6, 0x9b, 0xff, 0x8f, 0x37, 0xc1, 0xf4,
	0xaa, 0x1d, 0xef, 0x2d, 0xa6, 0x8f, 0xe0, 0xf8, 0xfd, 0x5a, 0x49, 0xb4, 0xe3, 0xfe, 0x4c, 0xec,
	0x80, 0xa7, 0xc7, 0xd0, 0x7d, 0xa9, 0xb5, 0x0b, 0x6b, 0x98, 0xd8, 0x92, 0x3e, 0x83, 0x51, 0x26,
	0x24, 0x7e, 0xbc, 0xac, 0x0f, 0xc2, 0x65, 0xf1, 0xef, 0x73, 0xf1, 0xb2, 0xdf, 0x60, 0x76, 0x01,
	0xbd, 0xb7, 0x88, 0x9a, 0x3e, 0xaf, 0x77, 0x6f, 0x7d, 0xf4, 0x41, 0xab, 0xb1, 0x7d, 0x92, 0xe3,
	0x93, 0x43, 0xe1, 0x34, 0xdd, 0x4c, 0x3a, 0x21, 0x89, 0x5f, 0x7c, 0xdb, 0xf9, 0xe4, 0x7a, 0xe7,
	0x93, 0x9f, 0x3b, 0x9f, 0x7c, 0xd9, 0xfb, 0x9d, 0xeb, 0xbd, 0xdf, 0xf9, 0xbe, 0xf7, 0x3b, 0x1f,
	0x1e, 0xae, 0x84, 0x91, 0x7c, 0x19, 0xa5, 0x2a, 0x9f, 0xf2, 0xad, 0x30, 0x2a, 0x12, 0x6a, 0x6a,
	0x47, 0xa0, 0x2e, 0xa7, 0xcd, 0xbc, 0x65, 0xdf, 0x95, 0x4f, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x93, 0xa3, 0xe2, 0x4b, 0x2e, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PeerClient is the client API for Peer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PeerClient interface {
	// client always sends a big file to the server.
	SendFile(ctx context.Context, opts ...grpc.CallOption) (Peer_SendFileClient, error)
}

type peerClient struct {
	cc *grpc.ClientConn
}

func NewPeerClient(cc *grpc.ClientConn) PeerClient {
	return &peerClient{cc}
}

func (c *peerClient) SendFile(ctx context.Context, opts ...grpc.CallOption) (Peer_SendFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Peer_serviceDesc.Streams[0], "/protobuff.Peer/SendFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerSendFileClient{stream}
	return x, nil
}

type Peer_SendFileClient interface {
	Send(*BigFileChunk) error
	CloseAndRecv() (*BigFileAck, error)
	grpc.ClientStream
}

type peerSendFileClient struct {
	grpc.ClientStream
}

func (x *peerSendFileClient) Send(m *BigFileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *peerSendFileClient) CloseAndRecv() (*BigFileAck, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BigFileAck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PeerServer is the server API for Peer service.
type PeerServer interface {
	// client always sends a big file to the server.
	SendFile(Peer_SendFileServer) error
}

// UnimplementedPeerServer can be embedded to have forward compatible implementations.
type UnimplementedPeerServer struct {
}

func (*UnimplementedPeerServer) SendFile(srv Peer_SendFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}

func RegisterPeerServer(s *grpc.Server, srv PeerServer) {
	s.RegisterService(&_Peer_serviceDesc, srv)
}

func _Peer_SendFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PeerServer).SendFile(&peerSendFileServer{stream})
}

type Peer_SendFileServer interface {
	SendAndClose(*BigFileAck) error
	Recv() (*BigFileChunk, error)
	grpc.ServerStream
}

type peerSendFileServer struct {
	grpc.ServerStream
}

func (x *peerSendFileServer) SendAndClose(m *BigFileAck) error {
	return x.ServerStream.SendMsg(m)
}

func (x *peerSendFileServer) Recv() (*BigFileChunk, error) {
	m := new(BigFileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Peer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuff.Peer",
	HandlerType: (*PeerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendFile",
			Handler:       _Peer_SendFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "chunk.proto",
}

func (m *BigFileChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BigFileChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BigFileChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FileInfo != nil {
		{
			size, err := m.FileInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChunk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.OriginalStartSendTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.OriginalStartSendTime))
		i--
		dAtA[i] = 0x51
	}
	if m.IsBcastSet {
		i--
		if m.IsBcastSet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.IsLastChunk {
		i--
		if m.IsLastChunk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.ChunkNumber != 0 {
		i = encodeVarintChunk(dAtA, i, uint64(m.ChunkNumber))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintChunk(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Blake2BCumulative) > 0 {
		i -= len(m.Blake2BCumulative)
		copy(dAtA[i:], m.Blake2BCumulative)
		i = encodeVarintChunk(dAtA, i, uint64(len(m.Blake2BCumulative)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Blake2B) > 0 {
		i -= len(m.Blake2B)
		copy(dAtA[i:], m.Blake2B)
		i = encodeVarintChunk(dAtA, i, uint64(len(m.Blake2B)))
		i--
		dAtA[i] = 0x22
	}
	if m.SendTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.SendTime))
		i--
		dAtA[i] = 0x19
	}
	if m.SizeInBytes != 0 {
		i = encodeVarintChunk(dAtA, i, uint64(m.SizeInBytes))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Filepath) > 0 {
		i -= len(m.Filepath)
		copy(dAtA[i:], m.Filepath)
		i = encodeVarintChunk(dAtA, i, uint64(len(m.Filepath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BigFileAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BigFileAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BigFileAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FileDetails != nil {
		{
			size, err := m.FileDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChunk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Err) > 0 {
		i -= len(m.Err)
		copy(dAtA[i:], m.Err)
		i = encodeVarintChunk(dAtA, i, uint64(len(m.Err)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WholeFileBlake2B) > 0 {
		i -= len(m.WholeFileBlake2B)
		copy(dAtA[i:], m.WholeFileBlake2B)
		i = encodeVarintChunk(dAtA, i, uint64(len(m.WholeFileBlake2B)))
		i--
		dAtA[i] = 0x22
	}
	if m.RecvTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.RecvTime))
		i--
		dAtA[i] = 0x19
	}
	if m.SizeInBytes != 0 {
		i = encodeVarintChunk(dAtA, i, uint64(m.SizeInBytes))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Filepath) > 0 {
		i -= len(m.Filepath)
		copy(dAtA[i:], m.Filepath)
		i = encodeVarintChunk(dAtA, i, uint64(len(m.Filepath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintChunk(dAtA []byte, offset int, v uint64) int {
	offset -= sovChunk(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BigFileChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Filepath)
	if l > 0 {
		n += 1 + l + sovChunk(uint64(l))
	}
	if m.SizeInBytes != 0 {
		n += 1 + sovChunk(uint64(m.SizeInBytes))
	}
	if m.SendTime != 0 {
		n += 9
	}
	l = len(m.Blake2B)
	if l > 0 {
		n += 1 + l + sovChunk(uint64(l))
	}
	l = len(m.Blake2BCumulative)
	if l > 0 {
		n += 1 + l + sovChunk(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovChunk(uint64(l))
	}
	if m.ChunkNumber != 0 {
		n += 1 + sovChunk(uint64(m.ChunkNumber))
	}
	if m.IsLastChunk {
		n += 2
	}
	if m.IsBcastSet {
		n += 2
	}
	if m.OriginalStartSendTime != 0 {
		n += 9
	}
	if m.FileInfo != nil {
		l = m.FileInfo.Size()
		n += 1 + l + sovChunk(uint64(l))
	}
	return n
}

func (m *BigFileAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Filepath)
	if l > 0 {
		n += 1 + l + sovChunk(uint64(l))
	}
	if m.SizeInBytes != 0 {
		n += 1 + sovChunk(uint64(m.SizeInBytes))
	}
	if m.RecvTime != 0 {
		n += 9
	}
	l = len(m.WholeFileBlake2B)
	if l > 0 {
		n += 1 + l + sovChunk(uint64(l))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovChunk(uint64(l))
	}
	if m.FileDetails != nil {
		l = m.FileDetails.Size()
		n += 1 + l + sovChunk(uint64(l))
	}
	return n
}

func sovChunk(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChunk(x uint64) (n int) {
	return sovChunk(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BigFileChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChunk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BigFileChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BigFileChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filepath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChunk
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChunk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filepath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeInBytes", wireType)
			}
			m.SizeInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			m.SendTime = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.SendTime = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blake2B", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChunk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChunk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blake2B = append(m.Blake2B[:0], dAtA[iNdEx:postIndex]...)
			if m.Blake2B == nil {
				m.Blake2B = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blake2BCumulative", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChunk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChunk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blake2BCumulative = append(m.Blake2BCumulative[:0], dAtA[iNdEx:postIndex]...)
			if m.Blake2BCumulative == nil {
				m.Blake2BCumulative = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChunk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChunk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkNumber", wireType)
			}
			m.ChunkNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLastChunk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLastChunk = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBcastSet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBcastSet = bool(v != 0)
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalStartSendTime", wireType)
			}
			m.OriginalStartSendTime = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalStartSendTime = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChunk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChunk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileInfo == nil {
				m.FileInfo = &FileDetails{}
			}
			if err := m.FileInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChunk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChunk
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChunk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BigFileAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChunk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BigFileAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BigFileAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filepath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChunk
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChunk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filepath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeInBytes", wireType)
			}
			m.SizeInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvTime", wireType)
			}
			m.RecvTime = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvTime = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WholeFileBlake2B", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChunk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChunk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WholeFileBlake2B = append(m.WholeFileBlake2B[:0], dAtA[iNdEx:postIndex]...)
			if m.WholeFileBlake2B == nil {
				m.WholeFileBlake2B = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChunk
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChunk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChunk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChunk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileDetails == nil {
				m.FileDetails = &FileDetails{}
			}
			if err := m.FileDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChunk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChunk
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChunk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChunk(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChunk
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChunk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChunk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChunk
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChunk
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChunk
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChunk        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChunk          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChunk = fmt.Errorf("proto: unexpected end of group")
)

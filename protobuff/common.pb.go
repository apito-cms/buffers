// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.17.3
// source: common.proto

package protobuff

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PluginType int32

const (
	PluginType_NormalPlugin PluginType = 0 // auth, customFunction etc
	PluginType_Function     PluginType = 1 // go-plugin, aws-lambda etc
	PluginType_Storage      PluginType = 2 // s3, cloudinary etc
)

// Enum value maps for PluginType.
var (
	PluginType_name = map[int32]string{
		0: "NormalPlugin",
		1: "Function",
		2: "Storage",
	}
	PluginType_value = map[string]int32{
		"NormalPlugin": 0,
		"Function":     1,
		"Storage":      2,
	}
)

func (x PluginType) Enum() *PluginType {
	p := new(PluginType)
	*p = x
	return p
}

func (x PluginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PluginType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (PluginType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x PluginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PluginType.Descriptor instead.
func (PluginType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

type PluginLoadStatus int32

const (
	PluginLoadStatus_NotInstalled PluginLoadStatus = 0
	PluginLoadStatus_Installed    PluginLoadStatus = 1
	PluginLoadStatus_ReInstall    PluginLoadStatus = 2
	PluginLoadStatus_Loading      PluginLoadStatus = 3
	PluginLoadStatus_Loaded       PluginLoadStatus = 4
	PluginLoadStatus_LoadFailed   PluginLoadStatus = 5
)

// Enum value maps for PluginLoadStatus.
var (
	PluginLoadStatus_name = map[int32]string{
		0: "NotInstalled",
		1: "Installed",
		2: "ReInstall",
		3: "Loading",
		4: "Loaded",
		5: "LoadFailed",
	}
	PluginLoadStatus_value = map[string]int32{
		"NotInstalled": 0,
		"Installed":    1,
		"ReInstall":    2,
		"Loading":      3,
		"Loaded":       4,
		"LoadFailed":   5,
	}
)

func (x PluginLoadStatus) Enum() *PluginLoadStatus {
	p := new(PluginLoadStatus)
	*p = x
	return p
}

func (x PluginLoadStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PluginLoadStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[1].Descriptor()
}

func (PluginLoadStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[1]
}

func (x PluginLoadStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PluginLoadStatus.Descriptor instead.
func (PluginLoadStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

type PluginActivateStatus int32

const (
	PluginActivateStatus_deactivated PluginActivateStatus = 0
	PluginActivateStatus_activated   PluginActivateStatus = 1
)

// Enum value maps for PluginActivateStatus.
var (
	PluginActivateStatus_name = map[int32]string{
		0: "deactivated",
		1: "activated",
	}
	PluginActivateStatus_value = map[string]int32{
		"deactivated": 0,
		"activated":   1,
	}
)

func (x PluginActivateStatus) Enum() *PluginActivateStatus {
	p := new(PluginActivateStatus)
	*p = x
	return p
}

func (x PluginActivateStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PluginActivateStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[2].Descriptor()
}

func (PluginActivateStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[2]
}

func (x PluginActivateStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PluginActivateStatus.Descriptor instead.
func (PluginActivateStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

type PictureDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Urls      []string `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty" firestore:"urls,omitempty"`                            // @gotags: firestore:"urls,omitempty"
	Model     string   `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty" firestore:"model,omitempty"`                          // @gotags: firestore:"model,omitempty"
	Id        string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`                                // @gotags: firestore:"id,omitempty"
	FieldName string   `protobuf:"bytes,4,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty" firestore:"field_name,omitempty"` // @gotags: firestore:"field_name,omitempty"
}

func (x *PictureDeleteRequest) Reset() {
	*x = PictureDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PictureDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PictureDeleteRequest) ProtoMessage() {}

func (x *PictureDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PictureDeleteRequest.ProtoReflect.Descriptor instead.
func (*PictureDeleteRequest) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *PictureDeleteRequest) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *PictureDeleteRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *PictureDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PictureDeleteRequest) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

type FileDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`                                            // @gotags: firestore:"id,omitempty"
	XKey          string        `protobuf:"bytes,2,opt,name=_key,json=Key,proto3" json:"_key,omitempty" firestore:"_key,omitempty"`                               // @gotags: firestore:"_key,omitempty"
	Type          string        `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty" firestore:"type,omitempty"`                                        // @gotags: firestore:"type,omitempty"
	FileExtension string        `protobuf:"bytes,4,opt,name=file_extension,json=fileExtension,proto3" json:"file_extension,omitempty" firestore:"file_extension,omitempty"` // @gotags: firestore:"file_extension,omitempty"
	FileName      string        `protobuf:"bytes,5,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty" firestore:"file_name,omitempty"`                // @gotags: firestore:"file_name,omitempty"
	ContentType   string        `protobuf:"bytes,6,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty" firestore:"content_type,omitempty"`       // @gotags: firestore:"content_type,omitempty"
	Size          int64         `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty" firestore:"size,omitempty"`                                       // @gotags: firestore:"size,omitempty"
	S3Key         string        `protobuf:"bytes,8,opt,name=s3_key,json=s3Key,proto3" json:"s3_key,omitempty" firestore:"s3_key,omitempty"`                         // @gotags: firestore:"s3_key,omitempty"
	Url           string        `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty" firestore:"url,omitempty"`                                          // @gotags: firestore:"url,omitempty"
	CreatedAt     string        `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" firestore:"created_at,omitempty"`            // @gotags: firestore:"created_at,omitempty"
	UploadParam   *UploadParams `protobuf:"bytes,11,opt,name=upload_param,json=uploadParam,proto3" json:"upload_param,omitempty" firestore:"upload_param,omitempty"`      // @gotags: firestore:"upload_param,omitempty"
	Buffer        []byte        `protobuf:"bytes,12,opt,name=buffer,proto3" json:"buffer,omitempty" firestore:"upload_param,omitempty"`                                   // @gotags: firestore:"upload_param,omitempty"
}

func (x *FileDetails) Reset() {
	*x = FileDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDetails) ProtoMessage() {}

func (x *FileDetails) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDetails.ProtoReflect.Descriptor instead.
func (*FileDetails) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *FileDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FileDetails) GetXKey() string {
	if x != nil {
		return x.XKey
	}
	return ""
}

func (x *FileDetails) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FileDetails) GetFileExtension() string {
	if x != nil {
		return x.FileExtension
	}
	return ""
}

func (x *FileDetails) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileDetails) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *FileDetails) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileDetails) GetS3Key() string {
	if x != nil {
		return x.S3Key
	}
	return ""
}

func (x *FileDetails) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FileDetails) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *FileDetails) GetUploadParam() *UploadParams {
	if x != nil {
		return x.UploadParam
	}
	return nil
}

func (x *FileDetails) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

type UploadParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId      string `protobuf:"bytes,1,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty" firestore:"doc_id,omitempty"`                 // @gotags: firestore:"doc_id,omitempty"
	ProjectId  string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" firestore:"project_id,omitempty"`     // @gotags: firestore:"project_id,omitempty"
	ModelName  string `protobuf:"bytes,3,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty" firestore:"model_name,omitempty"`     // @gotags: firestore:"model_name,omitempty"
	FieldName  string `protobuf:"bytes,4,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty" firestore:"field_name,omitempty"`     // @gotags: firestore:"field_name,omitempty"
	AllowMulti bool   `protobuf:"varint,5,opt,name=allow_multi,json=allowMulti,proto3" json:"allow_multi,omitempty" firestore:"allow_multi,omitempty"` // @gotags: firestore:"allow_multi,omitempty"
	Provider   string `protobuf:"bytes,6,opt,name=provider,proto3" json:"provider,omitempty" firestore:"provider,omitempty"`                        // @gotags: firestore:"provider,omitempty"
}

func (x *UploadParams) Reset() {
	*x = UploadParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadParams) ProtoMessage() {}

func (x *UploadParams) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadParams.ProtoReflect.Descriptor instead.
func (*UploadParams) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *UploadParams) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *UploadParams) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UploadParams) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *UploadParams) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *UploadParams) GetAllowMulti() bool {
	if x != nil {
		return x.AllowMulti
	}
	return false
}

func (x *UploadParams) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty" firestore:"page,omitempty"`        // @gotags: firestore:"page,omitempty"
	Offset   uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty" firestore:"offset,omitempty"`    // @gotags: firestore:"offset,omitempty"
	Limit    uint32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty" firestore:"limit,omitempty"`      // @gotags: firestore:"limit,omitempty"
	Order    string `protobuf:"bytes,4,opt,name=order,proto3" json:"order,omitempty" firestore:"order,omitempty"`       // @gotags: firestore:"order,omitempty"
	Min      uint32 `protobuf:"varint,5,opt,name=min,proto3" json:"min,omitempty" firestore:"min,omitempty"`          // @gotags: firestore:"min,omitempty"
	Max      uint32 `protobuf:"varint,6,opt,name=max,proto3" json:"max,omitempty" firestore:"max,omitempty"`          // @gotags: firestore:"max,omitempty"
	Category string `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty" firestore:"category,omitempty"` // @gotags: firestore:"category,omitempty"
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *Filter) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Filter) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Filter) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Filter) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *Filter) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Filter) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Filter) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`                                         // @gotags: firestore:"id,omitempty"
	Type         string  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty" firestore:"type,omitempty"`                                     // @gotags: firestore:"type,omitempty"
	Filter       *Filter `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty" firestore:"filter,omitempty"`                                 // @gotags: firestore:"filter,omitempty"
	SearchString string  `protobuf:"bytes,5,opt,name=search_string,json=searchString,proto3" json:"search_string,omitempty" firestore:"search_string,omitempty"` // @gotags: firestore:"search_string,omitempty"
	Retry        bool    `protobuf:"varint,6,opt,name=retry,proto3" json:"retry,omitempty" firestore:"retry,omitempty"`                                  // @gotags: firestore:"retry,omitempty"
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (x *Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Request) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Request) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *Request) GetSearchString() string {
	if x != nil {
		return x.SearchString
	}
	return ""
}

func (x *Request) GetRetry() bool {
	if x != nil {
		return x.Retry
	}
	return false
}

// File Picker
type FileLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Link      string `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty" firestore:"link,omitempty"`                            // @gotags: firestore:"link,omitempty"
	Title     string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty" firestore:"title,omitempty"`                          // @gotags: firestore:"title,omitempty"
	CreatedAt string `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" firestore:"created_at,omitempty"` // @gotags: firestore:"created_at,omitempty"
	UpdatedAt string `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" firestore:"updated_at,omitempty"` // @gotags: firestore:"updated_at,omitempty"
}

func (x *FileLink) Reset() {
	*x = FileLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileLink) ProtoMessage() {}

func (x *FileLink) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileLink.ProtoReflect.Descriptor instead.
func (*FileLink) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

func (x *FileLink) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *FileLink) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FileLink) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *FileLink) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type FilePickParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumberOfImages uint32      `protobuf:"varint,1,opt,name=number_of_images,json=numberOfImages,proto3" json:"number_of_images,omitempty" firestore:"number_of_images,omitempty"` // @gotags: firestore:"number_of_images,omitempty"
	S3Folder       string      `protobuf:"bytes,2,opt,name=s3_folder,json=s3Folder,proto3" json:"s3_folder,omitempty" firestore:"s3_folder,omitempty"`                      // @gotags: firestore:"s3_folder,omitempty"
	PickerTitle    string      `protobuf:"bytes,3,opt,name=picker_title,json=pickerTitle,proto3" json:"picker_title,omitempty" firestore:"picker_title,omitempty"`             // @gotags: firestore:"picker_title,omitempty"
	Origin         *SystemUser `protobuf:"bytes,4,opt,name=origin,proto3" json:"origin,omitempty" firestore:"origin,omitempty"`                                          // @gotags: firestore:"origin,omitempty"
}

func (x *FilePickParameter) Reset() {
	*x = FilePickParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilePickParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilePickParameter) ProtoMessage() {}

func (x *FilePickParameter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilePickParameter.ProtoReflect.Descriptor instead.
func (*FilePickParameter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

func (x *FilePickParameter) GetNumberOfImages() uint32 {
	if x != nil {
		return x.NumberOfImages
	}
	return 0
}

func (x *FilePickParameter) GetS3Folder() string {
	if x != nil {
		return x.S3Folder
	}
	return ""
}

func (x *FilePickParameter) GetPickerTitle() string {
	if x != nil {
		return x.PickerTitle
	}
	return ""
}

func (x *FilePickParameter) GetOrigin() *SystemUser {
	if x != nil {
		return x.Origin
	}
	return nil
}

type ImageMetaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty" firestore:"identifier,omitempty"` // @gotags: firestore:"identifier,omitempty"
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" firestore:"name,omitempty"`             // @gotags: firestore:"name,omitempty"
	Width      uint32 `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty" firestore:"width,omitempty"`          // @gotags: firestore:"width,omitempty"
	Height     uint32 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty" firestore:"height,omitempty"`        // @gotags: firestore:"height,omitempty"
	Type       string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty" firestore:"type,omitempty"`             // @gotags: firestore:"type,omitempty"
}

func (x *ImageMetaInfo) Reset() {
	*x = ImageMetaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageMetaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageMetaInfo) ProtoMessage() {}

func (x *ImageMetaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageMetaInfo.ProtoReflect.Descriptor instead.
func (*ImageMetaInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

func (x *ImageMetaInfo) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *ImageMetaInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImageMetaInfo) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ImageMetaInfo) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ImageMetaInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty" firestore:"username,omitempty"` // @gotags: firestore:"username,omitempty"
	Email    string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty" firestore:"email,omitempty"`       // @gotags: firestore:"email,omitempty"
	Secret   string `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty" firestore:"secret,omitempty"`     // @gotags: firestore:"secret,omitempty"
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

func (x *LoginRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *LoginRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username         string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty" firestore:"username,omitempty"`                                         // @gotags: firestore:"username,omitempty"
	Email            string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty" firestore:"email,omitempty"`                                               // @gotags: firestore:"email,omitempty"
	Secret           string `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty" firestore:"secret,omitempty"`                                             // @gotags: firestore:"secret,omitempty"
	FullName         string `protobuf:"bytes,4,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty" firestore:"full_name,omitempty"`                         // @gotags: firestore:"full_name,omitempty"
	Profession       string `protobuf:"bytes,5,opt,name=profession,proto3" json:"profession,omitempty" firestore:"profession,omitempty"`                                     // @gotags: firestore:"profession,omitempty"
	VerificationCode string `protobuf:"bytes,6,opt,name=verification_code,json=verificationCode,proto3" json:"verification_code,omitempty" firestore:"profession,omitempty"` // @gotags: firestore:"profession,omitempty"
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

func (x *RegisterRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RegisterRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *RegisterRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *RegisterRequest) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *RegisterRequest) GetProfession() string {
	if x != nil {
		return x.Profession
	}
	return ""
}

func (x *RegisterRequest) GetVerificationCode() string {
	if x != nil {
		return x.VerificationCode
	}
	return ""
}

type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`                                                                                                                                       // @gotags: firestore:"id,omitempty"
	ApiPermissions            map[string]*APIPermission `protobuf:"bytes,2,rep,name=api_permissions,json=apiPermissions,proto3" json:"api_permissions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"permissions,omitempty"` // @gotags: firestore:"permissions,omitempty"
	AdministrativePermissions []string                  `protobuf:"bytes,3,rep,name=administrative_permissions,json=administrativePermissions,proto3" json:"administrative_permissions,omitempty" firestore:"administrative_permissions,omitempty"`                                                        // @gotags: firestore:"administrative_permissions,omitempty"
	LogicExecutions           []string                  `protobuf:"bytes,4,rep,name=logic_executions,json=logicExecutions,proto3" json:"logic_executions,omitempty" firestore:"logic_executions,omitempty"`                                                                                      // @gotags: firestore:"logic_executions,omitempty"
	SystemGenerated           bool                      `protobuf:"varint,5,opt,name=system_generated,json=systemGenerated,proto3" json:"system_generated,omitempty" firestore:"system_generated,omitempty"`                                                                                     // @gotags: firestore:"system_generated,omitempty"
	IsAdmin                   bool                      `protobuf:"varint,6,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty" firestore:"is_admin,omitempty"`                                                                                                             // @gotags: firestore:"is_admin,omitempty"
	IsProjectUser             bool                      `protobuf:"varint,7,opt,name=is_project_user,json=isProjectUser,proto3" json:"is_project_user,omitempty" firestore:"is_project_user,omitempty"`                                                                                         // @gotags: firestore:"is_project_user,omitempty"
	ReadOnlyProject           bool                      `protobuf:"varint,8,opt,name=read_only_project,json=readOnlyProject,proto3" json:"read_only_project,omitempty" firestore:"read_only_project,omitempty"`                                                                                   // @gotags: firestore:"read_only_project,omitempty"
	IsSuperAdmin              bool                      `protobuf:"varint,9,opt,name=is_super_admin,json=isSuperAdmin,proto3" json:"is_super_admin,omitempty" firestore:"read_only_project,omitempty"`                                                                                            // @gotags: firestore:"read_only_project,omitempty"
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

func (x *Role) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Role) GetApiPermissions() map[string]*APIPermission {
	if x != nil {
		return x.ApiPermissions
	}
	return nil
}

func (x *Role) GetAdministrativePermissions() []string {
	if x != nil {
		return x.AdministrativePermissions
	}
	return nil
}

func (x *Role) GetLogicExecutions() []string {
	if x != nil {
		return x.LogicExecutions
	}
	return nil
}

func (x *Role) GetSystemGenerated() bool {
	if x != nil {
		return x.SystemGenerated
	}
	return false
}

func (x *Role) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *Role) GetIsProjectUser() bool {
	if x != nil {
		return x.IsProjectUser
	}
	return false
}

func (x *Role) GetReadOnlyProject() bool {
	if x != nil {
		return x.ReadOnlyProject
	}
	return false
}

func (x *Role) GetIsSuperAdmin() bool {
	if x != nil {
		return x.IsSuperAdmin
	}
	return false
}

type APIPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Read   string `protobuf:"bytes,2,opt,name=read,proto3" json:"read,omitempty" firestore:"read,omitempty"`     // @gotags: firestore:"read,omitempty"
	Create string `protobuf:"bytes,3,opt,name=create,proto3" json:"create,omitempty" firestore:"create,omitempty"` // @gotags: firestore:"create,omitempty"
	Update string `protobuf:"bytes,4,opt,name=update,proto3" json:"update,omitempty" firestore:"update,omitempty"` // @gotags: firestore:"update,omitempty"
	Delete string `protobuf:"bytes,5,opt,name=delete,proto3" json:"delete,omitempty" firestore:"delete,omitempty"` // @gotags: firestore:"delete,omitempty"
}

func (x *APIPermission) Reset() {
	*x = APIPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIPermission) ProtoMessage() {}

func (x *APIPermission) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIPermission.ProtoReflect.Descriptor instead.
func (*APIPermission) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

func (x *APIPermission) GetRead() string {
	if x != nil {
		return x.Read
	}
	return ""
}

func (x *APIPermission) GetCreate() string {
	if x != nil {
		return x.Create
	}
	return ""
}

func (x *APIPermission) GetUpdate() string {
	if x != nil {
		return x.Update
	}
	return ""
}

func (x *APIPermission) GetDelete() string {
	if x != nil {
		return x.Delete
	}
	return ""
}

type SystemUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XKey              string `protobuf:"bytes,1,opt,name=_key,json=Key,proto3" json:"_key,omitempty" firestore:"_key,omitempty"`                                               // @gotags: firestore:"_key,omitempty"
	Id                string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`                                                            // @gotags: firestore:"id,omitempty"
	Name              string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" firestore:"name,omitempty"`                                                        // @gotags: firestore:"name,omitempty"
	Username          string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty" firestore:"username,omitempty"`                                                // @gotags: firestore:"username,omitempty"
	Email             string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty" firestore:"email,omitempty"`                                                      // @gotags: firestore:"email,omitempty"
	Secret            string `protobuf:"bytes,6,opt,name=secret,proto3" json:"secret,omitempty" firestore:"secret,omitempty"`                                                    // @gotags: firestore:"secret,omitempty"
	Avatar            string `protobuf:"bytes,7,opt,name=avatar,proto3" json:"avatar,omitempty" firestore:"avatar,omitempty"`                                                    // @gotags: firestore:"avatar,omitempty"
	CurrentProjectId  string `protobuf:"bytes,8,opt,name=current_project_id,json=currentProjectId,proto3" json:"current_project_id,omitempty" firestore:"current_project_id,omitempty"`      // @gotags: firestore:"current_project_id,omitempty"
	CreatedAt         string `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" firestore:"created_at,omitempty"`                             // @gotags: firestore:"created_at,omitempty"
	UpdatedAt         string `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" firestore:"updated_at,omitempty"`                            // @gotags: firestore:"updated_at,omitempty"
	IsSuperAdmin      bool   `protobuf:"varint,11,opt,name=is_super_admin,json=isSuperAdmin,proto3" json:"is_super_admin,omitempty" firestore:"is_super_admin,omitempty"`                // @gotags: firestore:"is_super_admin,omitempty"
	RefreshToken      string `protobuf:"bytes,12,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty" firestore:"refresh_token,omitempty"`                   // @gotags: firestore:"refresh_token,omitempty"
	AccessToken       string `protobuf:"bytes,13,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty" firestore:"access_token,omitempty"`                      // @gotags: firestore:"access_token,omitempty"
	ReadOnlyProject   bool   `protobuf:"varint,14,opt,name=read_only_project,json=readOnlyProject,proto3" json:"read_only_project,omitempty" firestore:"read_only_project,omitempty"`       // @gotags: firestore:"read_only_project,omitempty"
	LastLoggedIn      string `protobuf:"bytes,15,opt,name=last_logged_in,json=lastLoggedIn,proto3" json:"last_logged_in,omitempty" firestore:"last_logged_in,omitempty"`                 // @gotags: firestore:"last_logged_in,omitempty"
	ProjectLimit      uint32 `protobuf:"varint,16,opt,name=project_limit,json=projectLimit,proto3" json:"project_limit,omitempty" firestore:"project_limit,omitempty"`                  // @gotags: firestore:"project_limit,omitempty"
	ProjectLimitHobby uint32 `protobuf:"varint,17,opt,name=project_limit_hobby,json=projectLimitHobby,proto3" json:"project_limit_hobby,omitempty" firestore:"project_limit_hobby,omitempty"` // @gotags: firestore:"project_limit_hobby,omitempty"
	ProjectLimitPro   uint32 `protobuf:"varint,18,opt,name=project_limit_pro,json=projectLimitPro,proto3" json:"project_limit_pro,omitempty" firestore:"project_limit_pro,omitempty"`       // @gotags: firestore:"project_limit_pro,omitempty"
}

func (x *SystemUser) Reset() {
	*x = SystemUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemUser) ProtoMessage() {}

func (x *SystemUser) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemUser.ProtoReflect.Descriptor instead.
func (*SystemUser) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

func (x *SystemUser) GetXKey() string {
	if x != nil {
		return x.XKey
	}
	return ""
}

func (x *SystemUser) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SystemUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SystemUser) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SystemUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SystemUser) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *SystemUser) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *SystemUser) GetCurrentProjectId() string {
	if x != nil {
		return x.CurrentProjectId
	}
	return ""
}

func (x *SystemUser) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *SystemUser) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *SystemUser) GetIsSuperAdmin() bool {
	if x != nil {
		return x.IsSuperAdmin
	}
	return false
}

func (x *SystemUser) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *SystemUser) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *SystemUser) GetReadOnlyProject() bool {
	if x != nil {
		return x.ReadOnlyProject
	}
	return false
}

func (x *SystemUser) GetLastLoggedIn() string {
	if x != nil {
		return x.LastLoggedIn
	}
	return ""
}

func (x *SystemUser) GetProjectLimit() uint32 {
	if x != nil {
		return x.ProjectLimit
	}
	return 0
}

func (x *SystemUser) GetProjectLimitHobby() uint32 {
	if x != nil {
		return x.ProjectLimitHobby
	}
	return 0
}

func (x *SystemUser) GetProjectLimitPro() uint32 {
	if x != nil {
		return x.ProjectLimitPro
	}
	return 0
}

type ProjectLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Free  uint32 `protobuf:"varint,1,opt,name=free,proto3" json:"free,omitempty" firestore:"free,omitempty"`   // @gotags: firestore:"free,omitempty"
	Hobby uint32 `protobuf:"varint,2,opt,name=hobby,proto3" json:"hobby,omitempty" firestore:"hobby,omitempty"` // @gotags: firestore:"hobby,omitempty"
	Pro   uint32 `protobuf:"varint,3,opt,name=pro,proto3" json:"pro,omitempty" firestore:"pro,omitempty"`     // @gotags: firestore:"pro,omitempty"
}

func (x *ProjectLimit) Reset() {
	*x = ProjectLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectLimit) ProtoMessage() {}

func (x *ProjectLimit) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectLimit.ProtoReflect.Descriptor instead.
func (*ProjectLimit) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{13}
}

func (x *ProjectLimit) GetFree() uint32 {
	if x != nil {
		return x.Free
	}
	return 0
}

func (x *ProjectLimit) GetHobby() uint32 {
	if x != nil {
		return x.Hobby
	}
	return 0
}

func (x *ProjectLimit) GetPro() uint32 {
	if x != nil {
		return x.Pro
	}
	return 0
}

type UserProjects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User     *SystemUser `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty" firestore:"user,omitempty"`         // @gotags: firestore:"user,omitempty"
	Projects []*Project  `protobuf:"bytes,2,rep,name=projects,proto3" json:"projects,omitempty" firestore:"projects,omitempty"` // @gotags: firestore:"projects,omitempty"
}

func (x *UserProjects) Reset() {
	*x = UserProjects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProjects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProjects) ProtoMessage() {}

func (x *UserProjects) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProjects.ProtoReflect.Descriptor instead.
func (*UserProjects) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{14}
}

func (x *UserProjects) GetUser() *SystemUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserProjects) GetProjects() []*Project {
	if x != nil {
		return x.Projects
	}
	return nil
}

type UserSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscription *MonthlySubscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty" firestore:"subscription,omitempty"` // @gotags: firestore:"subscription,omitempty"
	Invoices     []*ProjectInvoices   `protobuf:"bytes,2,rep,name=invoices,proto3" json:"invoices,omitempty" firestore:"invoices,omitempty"`         // @gotags: firestore:"invoices,omitempty"
}

func (x *UserSubscription) Reset() {
	*x = UserSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSubscription) ProtoMessage() {}

func (x *UserSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSubscription.ProtoReflect.Descriptor instead.
func (*UserSubscription) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{15}
}

func (x *UserSubscription) GetSubscription() *MonthlySubscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

func (x *UserSubscription) GetInvoices() []*ProjectInvoices {
	if x != nil {
		return x.Invoices
	}
	return nil
}

type UserMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`                                                                                // @gotags: firestore:"id,omitempty"
	Avatar                    string   `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty" firestore:"avatar,omitempty"`                                                                        // @gotags: firestore:"avatar,omitempty"
	Name                      string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" firestore:"name,omitempty"`                                                                            // @gotags: firestore:"name,omitempty"
	Role                      string   `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty" firestore:"role,omitempty"`                                                                            // @gotags: firestore:"role,omitempty"
	Email                     string   `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty" firestore:"email,omitempty"`                                                                          // @gotags: firestore:"email,omitempty"
	ProjectUser               bool     `protobuf:"varint,6,opt,name=project_user,json=projectUser,proto3" json:"project_user,omitempty" firestore:"email,omitempty"`                                          // @gotags: firestore:"email,omitempty"
	AdministrativePermissions []string `protobuf:"bytes,7,rep,name=administrative_permissions,json=administrativePermissions,proto3" json:"administrative_permissions,omitempty" firestore:"email,omitempty"` // @gotags: firestore:"email,omitempty"
}

func (x *UserMeta) Reset() {
	*x = UserMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMeta) ProtoMessage() {}

func (x *UserMeta) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMeta.ProtoReflect.Descriptor instead.
func (*UserMeta) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{16}
}

func (x *UserMeta) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserMeta) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserMeta) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *UserMeta) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserMeta) GetProjectUser() bool {
	if x != nil {
		return x.ProjectUser
	}
	return false
}

func (x *UserMeta) GetAdministrativePermissions() []string {
	if x != nil {
		return x.AdministrativePermissions
	}
	return nil
}

type MetaField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt      string    `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" firestore:"created_at,omitempty"`                  // @gotags: firestore:"created_at,omitempty"
	UpdatedAt      string    `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" firestore:"updated_at,omitempty"`                  // @gotags: firestore:"updated_at,omitempty"
	CreatedBy      *UserMeta `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty" firestore:"title,omitempty"`                  // @gotags: firestore:"title,omitempty"
	LastModifiedBy *UserMeta `protobuf:"bytes,4,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty" firestore:"created_by,omitempty"` // @gotags: firestore:"created_by,omitempty"
	Status         string    `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty" firestore:"status,omitempty"`                                         // @gotags: firestore:"status,omitempty"
	TenantId       string    `protobuf:"bytes,6,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty" firestore:"tenant_id,omitempty"`                     // @gotags: firestore:"tenant_id,omitempty"
	RootRevisionId string    `protobuf:"bytes,7,opt,name=root_revision_id,json=rootRevisionId,proto3" json:"root_revision_id,omitempty" firestore:"root_revision_id,omitempty"` // @gotags: firestore:"root_revision_id,omitempty"
	Revision       bool      `protobuf:"varint,9,opt,name=revision,proto3" json:"revision,omitempty" firestore:"revision,omitempty"`                                    // @gotags: firestore:"revision,omitempty"
	RevisionAt     string    `protobuf:"bytes,10,opt,name=revision_at,json=revisionAt,proto3" json:"revision_at,omitempty" firestore:"revision_at,omitempty"`              // @gotags: firestore:"revision_at,omitempty"
}

func (x *MetaField) Reset() {
	*x = MetaField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaField) ProtoMessage() {}

func (x *MetaField) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaField.ProtoReflect.Descriptor instead.
func (*MetaField) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{17}
}

func (x *MetaField) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *MetaField) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *MetaField) GetCreatedBy() *UserMeta {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *MetaField) GetLastModifiedBy() *UserMeta {
	if x != nil {
		return x.LastModifiedBy
	}
	return nil
}

func (x *MetaField) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MetaField) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *MetaField) GetRootRevisionId() string {
	if x != nil {
		return x.RootRevisionId
	}
	return ""
}

func (x *MetaField) GetRevision() bool {
	if x != nil {
		return x.Revision
	}
	return false
}

func (x *MetaField) GetRevisionAt() string {
	if x != nil {
		return x.RevisionAt
	}
	return ""
}

type PreviewMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title  string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty" firestore:"title,omitempty"`   // @gotags: firestore:"title,omitempty"
	Icon   string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty" firestore:"icon,omitempty"`     // @gotags: firestore:"icon,omitempty"
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty" firestore:"status,omitempty"` // @gotags: firestore:"status,omitempty"
	Id     string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`         // @gotags: firestore:"id,omitempty"
}

func (x *PreviewMode) Reset() {
	*x = PreviewMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewMode) ProtoMessage() {}

func (x *PreviewMode) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewMode.ProtoReflect.Descriptor instead.
func (*PreviewMode) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{18}
}

func (x *PreviewMode) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PreviewMode) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *PreviewMode) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PreviewMode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TeamMembers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// for sql migration purposes
	ProjectId         string   `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" firestore:"project_id,omitempty"` // @gotags: firestore:"project_id,omitempty"
	UserId            string   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AssignedRole      string   `protobuf:"bytes,3,opt,name=assigned_role,json=assignedRole,proto3" json:"assigned_role,omitempty"`
	AccessPermissions []string `protobuf:"bytes,4,rep,name=access_permissions,json=accessPermissions,proto3" json:"access_permissions,omitempty"`
}

func (x *TeamMembers) Reset() {
	*x = TeamMembers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamMembers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamMembers) ProtoMessage() {}

func (x *TeamMembers) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamMembers.ProtoReflect.Descriptor instead.
func (*TeamMembers) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{19}
}

func (x *TeamMembers) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *TeamMembers) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TeamMembers) GetAssignedRole() string {
	if x != nil {
		return x.AssignedRole
	}
	return ""
}

func (x *TeamMembers) GetAccessPermissions() []string {
	if x != nil {
		return x.AccessPermissions
	}
	return nil
}

// user project
type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XKey                string             `protobuf:"bytes,1,opt,name=_key,json=Key,proto3" json:"_key,omitempty" firestore:"_key,omitempty"`                                                                                   // @gotags: firestore:"_key,omitempty"
	Id                  string             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;autoIncrement:false" firestore:"id,omitempty"`                                                                                                // @gotags: gorm:"primaryKey;autoIncrement:false" firestore:"id,omitempty"
	ProjectName         string             `protobuf:"bytes,3,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty" firestore:"project_name,omitempty"`                                                           // @gotags: firestore:"project_name,omitempty"
	ProjectDescription  string             `protobuf:"bytes,4,opt,name=project_description,json=projectDescription,proto3" json:"project_description,omitempty" firestore:"project_description,omitempty"`                                      // @gotags: firestore:"project_description,omitempty"
	Schema              *ProjectSchema     `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty" firestore:"schema,omitempty"`                                                                                        // @gotags: firestore:"schema,omitempty"
	CreatedAt           string             `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" firestore:"created_at,omitempty"`                                                                 // @gotags: firestore:"created_at,omitempty"
	UpdatedAt           string             `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" firestore:"updated_at,omitempty"`                                                                 // @gotags: firestore:"updated_at,omitempty"
	ExpireAt            string             `protobuf:"bytes,8,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty" firestore:"expire_at,omitempty"`                                                                    // @gotags: firestore:"expire_at,omitempty"
	Plugins             []*PluginDetails   `protobuf:"bytes,9,rep,name=plugins,proto3" json:"plugins,omitempty" firestore:"plugins,omitempty"`                                                                                      // @gotags: firestore:"plugins,omitempty"
	Addons              *AddOnsDetails     `protobuf:"bytes,10,opt,name=addons,proto3" json:"addons,omitempty" gorm:"foreignKey:ProjectID" firestore:"addons,omitempty"`                                                                                       // @gotags: gorm:"foreignKey:ProjectID" firestore:"addons,omitempty"
	Tokens              []*APIToken        `protobuf:"bytes,11,rep,name=tokens,proto3" json:"tokens,omitempty" gorm:"foreignKey:ProjectID" firestore:"tokens,omitempty"`                                                                                       // @gotags: gorm:"foreignKey:ProjectID" firestore:"tokens,omitempty"
	Roles               map[string]*Role   `protobuf:"bytes,12,rep,name=roles,proto3" json:"roles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"roles,omitempty"` // @gotags: firestore:"roles,omitempty"
	Driver              *DriverCredentials `protobuf:"bytes,13,opt,name=driver,proto3" json:"driver,omitempty" gorm:"foreignKey:ProjectID" firestore:"driver,omitempty"`                                                                                       // @gotags: gorm:"foreignKey:ProjectID" firestore:"driver,omitempty"
	TempBanned          bool               `protobuf:"varint,14,opt,name=temp_banned,json=tempBanned,proto3" json:"temp_banned,omitempty" firestore:"temp_banned,omitempty"`                                                            // @gotags: firestore:"temp_banned,omitempty"
	Plan                string             `protobuf:"bytes,15,opt,name=plan,proto3" json:"plan,omitempty" firestore:"plan,omitempty"`                                                                                           // @gotags: firestore:"plan,omitempty"
	TrialEnds           string             `protobuf:"bytes,16,opt,name=trial_ends,json=trialEnds,proto3" json:"trial_ends,omitempty" firestore:"trial_ends,omitempty"`                                                                // @gotags: firestore:"trial_ends,omitempty"
	FromExample         string             `protobuf:"bytes,17,opt,name=from_example,json=fromExample,proto3" json:"from_example,omitempty" firestore:"from_example,omitempty"`                                                          // @gotags: firestore:"from_example,omitempty"
	Limits              *UsagesTracking    `protobuf:"bytes,18,opt,name=limits,proto3" json:"limits,omitempty" gorm:"foreignKey:ProjectID" firestore:"limits,omitempty"`                                                                                       // @gotags: gorm:"foreignKey:ProjectID" firestore:"limits,omitempty"
	OwnerId             string             `protobuf:"bytes,19,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty" firestore:"owner_id,omitempty"`                                                                      // @gotags: firestore:"owner_id,omitempty"
	Teams               []*TeamMembers     `protobuf:"bytes,20,rep,name=teams,proto3" json:"teams,omitempty" gorm:"foreignKey:ProjectID" firestore:"teams,omitempty"`                                                                                         // @gotags: gorm:"foreignKey:ProjectID" firestore:"teams,omitempty"
	SystemMessages      []*SystemMessage   `protobuf:"bytes,21,rep,name=system_messages,json=systemMessages,proto3" json:"system_messages,omitempty" firestore:"system_messages,omitempty"`                                                 // @gotags: firestore:"system_messages,omitempty"
	Workspaces          []*Workspace       `protobuf:"bytes,22,rep,name=workspaces,proto3" json:"workspaces,omitempty" firestore:"workspaces,omitempty"`                                                                               // @gotags: firestore:"workspaces,omitempty"
	ActivatedPluginsIds *ActivatedPlugins  `protobuf:"bytes,23,opt,name=activated_plugins_ids,json=activatedPluginsIds,proto3" json:"activated_plugins_ids,omitempty" firestore:"activated_plugins_ids,omitempty"`                                // @gotags: firestore:"activated_plugins_ids,omitempty"
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{20}
}

func (x *Project) GetXKey() string {
	if x != nil {
		return x.XKey
	}
	return ""
}

func (x *Project) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Project) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *Project) GetProjectDescription() string {
	if x != nil {
		return x.ProjectDescription
	}
	return ""
}

func (x *Project) GetSchema() *ProjectSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *Project) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Project) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Project) GetExpireAt() string {
	if x != nil {
		return x.ExpireAt
	}
	return ""
}

func (x *Project) GetPlugins() []*PluginDetails {
	if x != nil {
		return x.Plugins
	}
	return nil
}

func (x *Project) GetAddons() *AddOnsDetails {
	if x != nil {
		return x.Addons
	}
	return nil
}

func (x *Project) GetTokens() []*APIToken {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *Project) GetRoles() map[string]*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Project) GetDriver() *DriverCredentials {
	if x != nil {
		return x.Driver
	}
	return nil
}

func (x *Project) GetTempBanned() bool {
	if x != nil {
		return x.TempBanned
	}
	return false
}

func (x *Project) GetPlan() string {
	if x != nil {
		return x.Plan
	}
	return ""
}

func (x *Project) GetTrialEnds() string {
	if x != nil {
		return x.TrialEnds
	}
	return ""
}

func (x *Project) GetFromExample() string {
	if x != nil {
		return x.FromExample
	}
	return ""
}

func (x *Project) GetLimits() *UsagesTracking {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *Project) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *Project) GetTeams() []*TeamMembers {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *Project) GetSystemMessages() []*SystemMessage {
	if x != nil {
		return x.SystemMessages
	}
	return nil
}

func (x *Project) GetWorkspaces() []*Workspace {
	if x != nil {
		return x.Workspaces
	}
	return nil
}

func (x *Project) GetActivatedPluginsIds() *ActivatedPlugins {
	if x != nil {
		return x.ActivatedPluginsIds
	}
	return nil
}

type ActivatedPlugins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Storage  string `protobuf:"bytes,1,opt,name=storage,proto3" json:"storage,omitempty"`
	Function string `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *ActivatedPlugins) Reset() {
	*x = ActivatedPlugins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivatedPlugins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivatedPlugins) ProtoMessage() {}

func (x *ActivatedPlugins) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivatedPlugins.ProtoReflect.Descriptor instead.
func (*ActivatedPlugins) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{21}
}

func (x *ActivatedPlugins) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

func (x *ActivatedPlugins) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

type Workspace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name,omitempty"`                                      // @gotags: firestore:"name,omitempty"
	Active       bool   `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty" firestore:"active,omitempty"`                                 // @gotags: firestore:"active,omitempty"
	IsProduction bool   `protobuf:"varint,3,opt,name=is_production,json=isProduction,proto3" json:"is_production,omitempty" firestore:"is_production,omitempty"` // @gotags: firestore:"is_production,omitempty"
	IsDefault    bool   `protobuf:"varint,4,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty" firestore:"is_default,omitempty"`          // @gotags: firestore:"is_default,omitempty"
}

func (x *Workspace) Reset() {
	*x = Workspace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workspace) ProtoMessage() {}

func (x *Workspace) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workspace.ProtoReflect.Descriptor instead.
func (*Workspace) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{22}
}

func (x *Workspace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Workspace) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Workspace) GetIsProduction() bool {
	if x != nil {
		return x.IsProduction
	}
	return false
}

func (x *Workspace) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

type SystemMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message     string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty" firestore:"message,omitempty"`         // @gotags: firestore:"message,omitempty"
	Code        string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty" firestore:"code,omitempty"`               // @gotags: firestore:"code,omitempty"
	Redirection string `protobuf:"bytes,3,opt,name=redirection,proto3" json:"redirection,omitempty" firestore:"redirection,omitempty"` // @gotags: firestore:"redirection,omitempty"
	Hide        bool   `protobuf:"varint,4,opt,name=hide,proto3" json:"hide,omitempty" firestore:"hide,omitempty"`              // @gotags: firestore:"hide,omitempty"
}

func (x *SystemMessage) Reset() {
	*x = SystemMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemMessage) ProtoMessage() {}

func (x *SystemMessage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemMessage.ProtoReflect.Descriptor instead.
func (*SystemMessage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{23}
}

func (x *SystemMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SystemMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SystemMessage) GetRedirection() string {
	if x != nil {
		return x.Redirection
	}
	return ""
}

func (x *SystemMessage) GetHide() bool {
	if x != nil {
		return x.Hide
	}
	return false
}

type SupportAndTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XKey             string         `protobuf:"bytes,1,opt,name=_key,json=Key,proto3" json:"_key,omitempty"`
	Id               string         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Type             string         `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	ProjectId        string         `protobuf:"bytes,4,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Resolved         bool           `protobuf:"varint,5,opt,name=resolved,proto3" json:"resolved,omitempty"`
	Title            string         `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	IssueDescription string         `protobuf:"bytes,7,opt,name=issue_description,json=issueDescription,proto3" json:"issue_description,omitempty"`
	CreatedAt        string         `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        string         `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Replies          []*TicketReply `protobuf:"bytes,10,rep,name=replies,proto3" json:"replies,omitempty"`
}

func (x *SupportAndTicket) Reset() {
	*x = SupportAndTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportAndTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportAndTicket) ProtoMessage() {}

func (x *SupportAndTicket) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportAndTicket.ProtoReflect.Descriptor instead.
func (*SupportAndTicket) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{24}
}

func (x *SupportAndTicket) GetXKey() string {
	if x != nil {
		return x.XKey
	}
	return ""
}

func (x *SupportAndTicket) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SupportAndTicket) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SupportAndTicket) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *SupportAndTicket) GetResolved() bool {
	if x != nil {
		return x.Resolved
	}
	return false
}

func (x *SupportAndTicket) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SupportAndTicket) GetIssueDescription() string {
	if x != nil {
		return x.IssueDescription
	}
	return ""
}

func (x *SupportAndTicket) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *SupportAndTicket) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *SupportAndTicket) GetReplies() []*TicketReply {
	if x != nil {
		return x.Replies
	}
	return nil
}

type TicketReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string    `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	User        *UserMeta `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	CreatedAt   string    `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Edited      bool      `protobuf:"varint,4,opt,name=edited,proto3" json:"edited,omitempty"`
}

func (x *TicketReply) Reset() {
	*x = TicketReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketReply) ProtoMessage() {}

func (x *TicketReply) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketReply.ProtoReflect.Descriptor instead.
func (*TicketReply) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{25}
}

func (x *TicketReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TicketReply) GetUser() *UserMeta {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *TicketReply) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TicketReply) GetEdited() bool {
	if x != nil {
		return x.Edited
	}
	return false
}

type ProjectInvoices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XKey                  string  `protobuf:"bytes,1,opt,name=_key,json=Key,proto3" json:"_key,omitempty" firestore:"_key,omitempty"`                                                                // @gotags: firestore:"_key,omitempty"
	Id                    string  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`                                                                             // @gotags: firestore:"id,omitempty"
	Type                  string  `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty" firestore:"type,omitempty"`                                                                         // @gotags: firestore:"type,omitempty"
	SubscriptionId        string  `protobuf:"bytes,4,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty" firestore:"subscription_id,omitempty"`                               // @gotags: firestore:"subscription_id,omitempty"
	CouponCode            string  `protobuf:"bytes,5,opt,name=coupon_code,json=couponCode,proto3" json:"coupon_code,omitempty" firestore:"coupon_code,omitempty"`                                           // @gotags: firestore:"coupon_code,omitempty"
	DiscountAmount        float64 `protobuf:"fixed64,6,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty" firestore:"discount_amount,omitempty"`                             // @gotags: firestore:"discount_amount,omitempty"
	PaymentGateway        string  `protobuf:"bytes,7,opt,name=payment_gateway,json=paymentGateway,proto3" json:"payment_gateway,omitempty" firestore:"payment_gateway,omitempty"`                               // @gotags: firestore:"payment_gateway,omitempty"
	ReceiptUrl            string  `protobuf:"bytes,8,opt,name=receipt_url,json=receiptUrl,proto3" json:"receipt_url,omitempty" firestore:"receipt_url,omitempty"`                                           // @gotags: firestore:"receipt_url,omitempty"
	ProductAmount         float64 `protobuf:"fixed64,9,opt,name=product_amount,json=productAmount,proto3" json:"product_amount,omitempty" firestore:"product_amount,omitempty"`                                // @gotags: firestore:"product_amount,omitempty"
	DiscountPercentage    int64   `protobuf:"varint,10,opt,name=discount_percentage,json=discountPercentage,proto3" json:"discount_percentage,omitempty" firestore:"discount_percentage,omitempty"`                 // @gotags: firestore:"discount_percentage,omitempty"
	Quantity              uint32  `protobuf:"varint,11,opt,name=quantity,proto3" json:"quantity,omitempty" firestore:"quantity,omitempty"`                                                               // @gotags: firestore:"quantity,omitempty"
	PaymentMethod         string  `protobuf:"bytes,12,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty" firestore:"payment_method,omitempty"`                                 // @gotags: firestore:"payment_method,omitempty"
	Earning               float64 `protobuf:"fixed64,13,opt,name=earning,proto3" json:"earning,omitempty" firestore:"earning,omitempty"`                                                                // @gotags: firestore:"earning,omitempty"
	Fee                   float64 `protobuf:"fixed64,14,opt,name=fee,proto3" json:"fee,omitempty" firestore:"fee,omitempty"`                                                                        // @gotags: firestore:"fee,omitempty"
	Tax                   float64 `protobuf:"fixed64,15,opt,name=tax,proto3" json:"tax,omitempty" firestore:"tax,omitempty"`                                                                        // @gotags: firestore:"tax,omitempty"
	CreatedAt             string  `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" firestore:"created_at,omitempty"`                                             // @gotags: firestore:"created_at,omitempty"
	ChargedAmount         float64 `protobuf:"fixed64,17,opt,name=charged_amount,json=chargedAmount,proto3" json:"charged_amount,omitempty" firestore:"charged_amount,omitempty"`                               // @gotags: firestore:"charged_amount,omitempty"
	NextAmountToBeCharged float64 `protobuf:"fixed64,18,opt,name=next_amount_to_be_charged,json=nextAmountToBeCharged,proto3" json:"next_amount_to_be_charged,omitempty" firestore:"next_amount_to_be_charged,omitempty"` // @gotags: firestore:"next_amount_to_be_charged,omitempty"
	SubscriptionPlanCode  string  `protobuf:"bytes,19,opt,name=subscription_plan_code,json=subscriptionPlanCode,proto3" json:"subscription_plan_code,omitempty" firestore:"subscription_plan_code,omitempty"`          // @gotags: firestore:"subscription_plan_code,omitempty"
}

func (x *ProjectInvoices) Reset() {
	*x = ProjectInvoices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectInvoices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectInvoices) ProtoMessage() {}

func (x *ProjectInvoices) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectInvoices.ProtoReflect.Descriptor instead.
func (*ProjectInvoices) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{26}
}

func (x *ProjectInvoices) GetXKey() string {
	if x != nil {
		return x.XKey
	}
	return ""
}

func (x *ProjectInvoices) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProjectInvoices) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProjectInvoices) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *ProjectInvoices) GetCouponCode() string {
	if x != nil {
		return x.CouponCode
	}
	return ""
}

func (x *ProjectInvoices) GetDiscountAmount() float64 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *ProjectInvoices) GetPaymentGateway() string {
	if x != nil {
		return x.PaymentGateway
	}
	return ""
}

func (x *ProjectInvoices) GetReceiptUrl() string {
	if x != nil {
		return x.ReceiptUrl
	}
	return ""
}

func (x *ProjectInvoices) GetProductAmount() float64 {
	if x != nil {
		return x.ProductAmount
	}
	return 0
}

func (x *ProjectInvoices) GetDiscountPercentage() int64 {
	if x != nil {
		return x.DiscountPercentage
	}
	return 0
}

func (x *ProjectInvoices) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *ProjectInvoices) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *ProjectInvoices) GetEarning() float64 {
	if x != nil {
		return x.Earning
	}
	return 0
}

func (x *ProjectInvoices) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *ProjectInvoices) GetTax() float64 {
	if x != nil {
		return x.Tax
	}
	return 0
}

func (x *ProjectInvoices) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ProjectInvoices) GetChargedAmount() float64 {
	if x != nil {
		return x.ChargedAmount
	}
	return 0
}

func (x *ProjectInvoices) GetNextAmountToBeCharged() float64 {
	if x != nil {
		return x.NextAmountToBeCharged
	}
	return 0
}

func (x *ProjectInvoices) GetSubscriptionPlanCode() string {
	if x != nil {
		return x.SubscriptionPlanCode
	}
	return ""
}

type ProjectUsages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`                                // @gotags: firestore:"id,omitempty"
	XKey      string          `protobuf:"bytes,2,opt,name=_key,json=Key,proto3" json:"_key,omitempty" firestore:"_key,omitempty"`                   // @gotags: firestore:"_key,omitempty"
	Type      string          `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty" firestore:"type,omitempty"`                            // @gotags: firestore:"type,omitempty"
	ProjectId string          `protobuf:"bytes,4,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" firestore:"project_id,omitempty"` // @gotags: firestore:"project_id,omitempty"
	Year      uint32          `protobuf:"varint,5,opt,name=year,proto3" json:"year,omitempty" firestore:"year,omitempty"`                           // @gotags: firestore:"year,omitempty"
	Month     uint32          `protobuf:"varint,6,opt,name=month,proto3" json:"month,omitempty" firestore:"month,omitempty"`                         // @gotags: firestore:"month,omitempty"
	Usages    *UsagesTracking `protobuf:"bytes,7,opt,name=usages,proto3" json:"usages,omitempty" firestore:"usage,omitempty"`                        // @gotags: firestore:"usage,omitempty"
}

func (x *ProjectUsages) Reset() {
	*x = ProjectUsages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectUsages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectUsages) ProtoMessage() {}

func (x *ProjectUsages) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectUsages.ProtoReflect.Descriptor instead.
func (*ProjectUsages) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{27}
}

func (x *ProjectUsages) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProjectUsages) GetXKey() string {
	if x != nil {
		return x.XKey
	}
	return ""
}

func (x *ProjectUsages) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProjectUsages) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ProjectUsages) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ProjectUsages) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ProjectUsages) GetUsages() *UsagesTracking {
	if x != nil {
		return x.Usages
	}
	return nil
}

type DriverCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// for sql migration purposes
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" firestore:"project_id,omitempty"` // @gotags: firestore:"project_id,omitempty"
	// normal sql & nosql database
	Engine   string `protobuf:"bytes,2,opt,name=engine,proto3" json:"engine,omitempty"`
	Host     string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Port     string `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
	User     string `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	Password string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	Database string `protobuf:"bytes,7,opt,name=database,proto3" json:"database,omitempty"`
	// for firebase
	FirebaseProjectId             string `protobuf:"bytes,8,opt,name=firebase_project_id,json=firebaseProjectId,proto3" json:"firebase_project_id,omitempty"`
	FirebaseProjectCredentialJson string `protobuf:"bytes,9,opt,name=firebase_project_credential_json,json=firebaseProjectCredentialJson,proto3" json:"firebase_project_credential_json,omitempty"`
	// for dynamodb
	AccessKey string `protobuf:"bytes,10,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey string `protobuf:"bytes,11,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	// for embedded database
	DatabaseDir string `protobuf:"bytes,12,opt,name=database_dir,json=databaseDir,proto3" json:"database_dir,omitempty"`
}

func (x *DriverCredentials) Reset() {
	*x = DriverCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriverCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverCredentials) ProtoMessage() {}

func (x *DriverCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverCredentials.ProtoReflect.Descriptor instead.
func (*DriverCredentials) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{28}
}

func (x *DriverCredentials) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DriverCredentials) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *DriverCredentials) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DriverCredentials) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *DriverCredentials) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *DriverCredentials) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DriverCredentials) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *DriverCredentials) GetFirebaseProjectId() string {
	if x != nil {
		return x.FirebaseProjectId
	}
	return ""
}

func (x *DriverCredentials) GetFirebaseProjectCredentialJson() string {
	if x != nil {
		return x.FirebaseProjectCredentialJson
	}
	return ""
}

func (x *DriverCredentials) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *DriverCredentials) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *DriverCredentials) GetDatabaseDir() string {
	if x != nil {
		return x.DatabaseDir
	}
	return ""
}

type APIToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// for sql migration purposes
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" firestore:"project_id,omitempty"` // @gotags: firestore:"project_id,omitempty"
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" firestore:"name,omitempty"`                            // @gotags: firestore:"name,omitempty"
	Token     string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty" firestore:"token,omitempty"`                          // @gotags: firestore:"token,omitempty"
	Role      string `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty" firestore:"role,omitempty"`                            // @gotags: firestore:"role,omitempty"
	Expire    string `protobuf:"bytes,5,opt,name=expire,proto3" json:"expire,omitempty" firestore:"expire,omitempty"`                        // @gotags: firestore:"expire,omitempty"
}

func (x *APIToken) Reset() {
	*x = APIToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIToken) ProtoMessage() {}

func (x *APIToken) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIToken.ProtoReflect.Descriptor instead.
func (*APIToken) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{29}
}

func (x *APIToken) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *APIToken) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *APIToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *APIToken) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *APIToken) GetExpire() string {
	if x != nil {
		return x.Expire
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Code    string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{30}
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Response) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type PluginDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon             string                  `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty" firestore:"icon,omitempty"`                                                                                 // @gotags: firestore:"icon,omitempty"
	Id               string                  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`                                                                                     // @gotags: firestore:"id,omitempty"
	Title            string                  `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty" firestore:"title,omitempty"`                                                                               // @gotags: firestore:"title,omitempty"
	Version          string                  `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty" firestore:"version,omitempty"`                                                                           // @gotags: firestore:"version,omitempty"
	Description      string                  `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty" firestore:"description,omitempty"`                                                                   // @gotags: firestore:"description,omitempty"
	Type             PluginType              `protobuf:"varint,6,opt,name=type,proto3,enum=protobuff.PluginType" json:"type,omitempty" firestore:"type,omitempty"`                                                      // @gotags: firestore:"type,omitempty"
	Role             string                  `protobuf:"bytes,7,opt,name=role,proto3" json:"role,omitempty" firestore:"role,omitempty"`                                                                                 // @gotags: firestore:"role,omitempty"
	EnvVars          []*FunctionEnvVariables `protobuf:"bytes,10,rep,name=env_vars,json=envVars,proto3" json:"env_vars,omitempty" firestore:"env_vars,omitempty"`                                                           // @gotags: firestore:"env_vars,omitempty"
	ExportedVariable string                  `protobuf:"bytes,8,opt,name=exported_variable,json=exportedVariable,proto3" json:"exported_variable,omitempty" firestore:"exported_variable,omitempty"`                                 // @gotags: firestore:"exported_variable,omitempty"
	Enable           bool                    `protobuf:"varint,9,opt,name=enable,proto3" json:"enable,omitempty" firestore:"enable,omitempty"`                                                                            // @gotags: firestore:"enable,omitempty"
	RepositoryUrl    string                  `protobuf:"bytes,11,opt,name=repository_url,json=repositoryUrl,proto3" json:"repository_url,omitempty" firestore:"repository_url,omitempty"`                                         // @gotags: firestore:"repository_url,omitempty"
	Branch           string                  `protobuf:"bytes,12,opt,name=branch,proto3" json:"branch,omitempty" firestore:"branch,omitempty"`                                                                            // @gotags: firestore:"branch,omitempty"
	Author           string                  `protobuf:"bytes,13,opt,name=author,proto3" json:"author,omitempty" firestore:"author,omitempty"`                                                                            // @gotags: firestore:"author,omitempty"
	LoadStatus       PluginLoadStatus        `protobuf:"varint,14,opt,name=load_status,json=loadStatus,proto3,enum=protobuff.PluginLoadStatus" json:"load_status,omitempty" firestore:"load_status,omitempty"`                 // @gotags: firestore:"load_status,omitempty"
	ActivateStatus   PluginActivateStatus    `protobuf:"varint,15,opt,name=activate_status,json=activateStatus,proto3,enum=protobuff.PluginActivateStatus" json:"activate_status,omitempty" firestore:"activate_status,omitempty"` // @gotags: firestore:"activate_status,omitempty"
}

func (x *PluginDetails) Reset() {
	*x = PluginDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginDetails) ProtoMessage() {}

func (x *PluginDetails) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginDetails.ProtoReflect.Descriptor instead.
func (*PluginDetails) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{31}
}

func (x *PluginDetails) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *PluginDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PluginDetails) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PluginDetails) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PluginDetails) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PluginDetails) GetType() PluginType {
	if x != nil {
		return x.Type
	}
	return PluginType_NormalPlugin
}

func (x *PluginDetails) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *PluginDetails) GetEnvVars() []*FunctionEnvVariables {
	if x != nil {
		return x.EnvVars
	}
	return nil
}

func (x *PluginDetails) GetExportedVariable() string {
	if x != nil {
		return x.ExportedVariable
	}
	return ""
}

func (x *PluginDetails) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *PluginDetails) GetRepositoryUrl() string {
	if x != nil {
		return x.RepositoryUrl
	}
	return ""
}

func (x *PluginDetails) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *PluginDetails) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *PluginDetails) GetLoadStatus() PluginLoadStatus {
	if x != nil {
		return x.LoadStatus
	}
	return PluginLoadStatus_NotInstalled
}

func (x *PluginDetails) GetActivateStatus() PluginActivateStatus {
	if x != nil {
		return x.ActivateStatus
	}
	return PluginActivateStatus_deactivated
}

type AddOnsDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// for sql migration purposes
	ProjectId             string   `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" firestore:"project_id,omitempty"`                                        // @gotags: firestore:"project_id,omitempty"
	Locals                []string `protobuf:"bytes,2,rep,name=locals,proto3" json:"locals,omitempty" firestore:"locals,omitempty"`                                                               // @gotags: firestore:"locals,omitempty"
	SystemGraphqlHooks    bool     `protobuf:"varint,3,opt,name=system_graphql_hooks,json=systemGraphqlHooks,proto3" json:"system_graphql_hooks,omitempty" firestore:"system_graphql_hooks,omitempty"`          // @gotags: firestore:"system_graphql_hooks,omitempty"
	EnableRevisionHistory bool     `protobuf:"varint,4,opt,name=enable_revision_history,json=enableRevisionHistory,proto3" json:"enable_revision_history,omitempty" firestore:"revision_history,omitempty"` // @gotags: firestore:"revision_history,omitempty"
}

func (x *AddOnsDetails) Reset() {
	*x = AddOnsDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOnsDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOnsDetails) ProtoMessage() {}

func (x *AddOnsDetails) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOnsDetails.ProtoReflect.Descriptor instead.
func (*AddOnsDetails) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{32}
}

func (x *AddOnsDetails) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AddOnsDetails) GetLocals() []string {
	if x != nil {
		return x.Locals
	}
	return nil
}

func (x *AddOnsDetails) GetSystemGraphqlHooks() bool {
	if x != nil {
		return x.SystemGraphqlHooks
	}
	return false
}

func (x *AddOnsDetails) GetEnableRevisionHistory() bool {
	if x != nil {
		return x.EnableRevisionHistory
	}
	return false
}

type AccountUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`                                                     // @gotags: firestore:"id,omitempty"
	XKey            string                 `protobuf:"bytes,2,opt,name=_key,json=Key,proto3" json:"_key,omitempty" firestore:"_key,omitempty"`                                        // @gotags: firestore:"_key,omitempty"
	Type            string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty" firestore:"type,omitempty"`                                                 // @gotags: firestore:"type,omitempty"
	Subscriptions   []*MonthlySubscription `protobuf:"bytes,4,rep,name=subscriptions,proto3" json:"subscriptions,omitempty" firestore:"subscriptions,omitempty"`                               // @gotags: firestore:"subscriptions,omitempty"
	Limits          *UsagesTracking        `protobuf:"bytes,5,opt,name=limits,proto3" json:"limits,omitempty" firestore:"limits,omitempty"`                                             // @gotags: firestore:"limits,omitempty"
	Usages          []*UsagesTracking      `protobuf:"bytes,6,rep,name=usages,proto3" json:"usages,omitempty" firestore:"usages,omitempty"`                                             // @gotags: firestore:"usages,omitempty"
	NumberOfProject uint32                 `protobuf:"varint,7,opt,name=number_of_project,json=numberOfProject,proto3" json:"number_of_project,omitempty" firestore:"number_of_project,omitempty"` // @gotags: firestore:"number_of_project,omitempty"
}

func (x *AccountUsage) Reset() {
	*x = AccountUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountUsage) ProtoMessage() {}

func (x *AccountUsage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountUsage.ProtoReflect.Descriptor instead.
func (*AccountUsage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{33}
}

func (x *AccountUsage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccountUsage) GetXKey() string {
	if x != nil {
		return x.XKey
	}
	return ""
}

func (x *AccountUsage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AccountUsage) GetSubscriptions() []*MonthlySubscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *AccountUsage) GetLimits() *UsagesTracking {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *AccountUsage) GetUsages() []*UsagesTracking {
	if x != nil {
		return x.Usages
	}
	return nil
}

func (x *AccountUsage) GetNumberOfProject() uint32 {
	if x != nil {
		return x.NumberOfProject
	}
	return 0
}

type MonthlySubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`                                                           // @gotags: firestore:"id,omitempty"
	XKey               string             `protobuf:"bytes,2,opt,name=_key,json=Key,proto3" json:"_key,omitempty" firestore:"_key,omitempty"`                                              // @gotags: firestore:"_key,omitempty"
	Type               string             `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty" firestore:"type,omitempty"`                                                       // @gotags: firestore:"type,omitempty"
	UserId             string             `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" firestore:"user_id,omitempty"`                                     // @gotags: firestore:"user_id,omitempty"
	SubscriptionCode   string             `protobuf:"bytes,5,opt,name=subscription_code,json=subscriptionCode,proto3" json:"subscription_code,omitempty" firestore:"plan_code,omitempty"`       // @gotags: firestore:"plan_code,omitempty"
	StartDate          string             `protobuf:"bytes,6,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty" firestore:"start_date,omitempty"`                            // @gotags: firestore:"start_date,omitempty"
	EndDate            string             `protobuf:"bytes,7,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty" firestore:"end_date,omitempty"`                                  // @gotags: firestore:"end_date,omitempty"
	SubscriptionStatus string             `protobuf:"bytes,8,opt,name=subscription_status,json=subscriptionStatus,proto3" json:"subscription_status,omitempty" firestore:"subscription_status,omitempty"` // @gotags: firestore:"subscription_status,omitempty"
	PaymentStatus      string             `protobuf:"bytes,9,opt,name=payment_status,json=paymentStatus,proto3" json:"payment_status,omitempty" firestore:"payment_status,omitempty"`                // @gotags: firestore:"payment_status,omitempty"
	Invoices           []*ProjectInvoices `protobuf:"bytes,10,rep,name=invoices,proto3" json:"invoices,omitempty" firestore:"invoices,omitempty"`                                              // @gotags: firestore:"invoices,omitempty"
	CreatedAt          string             `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" firestore:"created_at,omitempty"`                           // @gotags: firestore:"created_at,omitempty"
	UpdatedAt          string             `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" firestore:"updated_at,omitempty"`                           // @gotags: firestore:"updated_at,omitempty"
	Title              string             `protobuf:"bytes,13,opt,name=title,proto3" json:"title,omitempty" firestore:"title,omitempty"`                                                    // @gotags: firestore:"title,omitempty"
	CancelUrl          string             `protobuf:"bytes,14,opt,name=cancel_url,json=cancelUrl,proto3" json:"cancel_url,omitempty" firestore:"cancel_url,omitempty"`                           // @gotags: firestore:"cancel_url,omitempty"
	ProjectId          string             `protobuf:"bytes,15,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" firestore:"cancel_url,omitempty"`                           // @gotags: firestore:"cancel_url,omitempty"
}

func (x *MonthlySubscription) Reset() {
	*x = MonthlySubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthlySubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthlySubscription) ProtoMessage() {}

func (x *MonthlySubscription) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthlySubscription.ProtoReflect.Descriptor instead.
func (*MonthlySubscription) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{34}
}

func (x *MonthlySubscription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MonthlySubscription) GetXKey() string {
	if x != nil {
		return x.XKey
	}
	return ""
}

func (x *MonthlySubscription) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MonthlySubscription) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MonthlySubscription) GetSubscriptionCode() string {
	if x != nil {
		return x.SubscriptionCode
	}
	return ""
}

func (x *MonthlySubscription) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *MonthlySubscription) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *MonthlySubscription) GetSubscriptionStatus() string {
	if x != nil {
		return x.SubscriptionStatus
	}
	return ""
}

func (x *MonthlySubscription) GetPaymentStatus() string {
	if x != nil {
		return x.PaymentStatus
	}
	return ""
}

func (x *MonthlySubscription) GetInvoices() []*ProjectInvoices {
	if x != nil {
		return x.Invoices
	}
	return nil
}

func (x *MonthlySubscription) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *MonthlySubscription) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *MonthlySubscription) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MonthlySubscription) GetCancelUrl() string {
	if x != nil {
		return x.CancelUrl
	}
	return ""
}

func (x *MonthlySubscription) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type UsagesTracking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// for sql migration purposes
	ProjectId       string  `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" firestore:"project_id,omitempty"`                       // @gotags: firestore:"project_id,omitempty"
	ApiCalls        uint32  `protobuf:"varint,2,opt,name=api_calls,json=apiCalls,proto3" json:"api_calls,omitempty" firestore:"api_calls,omitempty"`                         // @gotags: firestore:"api_calls,omitempty"
	ApiBandwidth    float64 `protobuf:"fixed64,3,opt,name=api_bandwidth,json=apiBandwidth,proto3" json:"api_bandwidth,omitempty" firestore:"api_bandwidth,omitempty"`            // @gotags: firestore:"api_bandwidth,omitempty"
	MediaStorage    float64 `protobuf:"fixed64,4,opt,name=media_storage,json=mediaStorage,proto3" json:"media_storage,omitempty" firestore:"media_storage,omitempty"`            // @gotags: firestore:"media_storage,omitempty"
	MediaBandwidth  float64 `protobuf:"fixed64,5,opt,name=media_bandwidth,json=mediaBandwidth,proto3" json:"media_bandwidth,omitempty" firestore:"media_bandwidth,omitempty"`      // @gotags: firestore:"media_bandwidth,omitempty"
	NumberOfMedia   float64 `protobuf:"fixed64,6,opt,name=number_of_media,json=numberOfMedia,proto3" json:"number_of_media,omitempty" firestore:"number_of_media,omitempty"`       // @gotags: firestore:"number_of_media,omitempty"
	NumberOfRecords float64 `protobuf:"fixed64,7,opt,name=number_of_records,json=numberOfRecords,proto3" json:"number_of_records,omitempty" firestore:"number_of_records,omitempty"` // @gotags: firestore:"number_of_records,omitempty"
}

func (x *UsagesTracking) Reset() {
	*x = UsagesTracking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsagesTracking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsagesTracking) ProtoMessage() {}

func (x *UsagesTracking) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsagesTracking.ProtoReflect.Descriptor instead.
func (*UsagesTracking) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{35}
}

func (x *UsagesTracking) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UsagesTracking) GetApiCalls() uint32 {
	if x != nil {
		return x.ApiCalls
	}
	return 0
}

func (x *UsagesTracking) GetApiBandwidth() float64 {
	if x != nil {
		return x.ApiBandwidth
	}
	return 0
}

func (x *UsagesTracking) GetMediaStorage() float64 {
	if x != nil {
		return x.MediaStorage
	}
	return 0
}

func (x *UsagesTracking) GetMediaBandwidth() float64 {
	if x != nil {
		return x.MediaBandwidth
	}
	return 0
}

func (x *UsagesTracking) GetNumberOfMedia() float64 {
	if x != nil {
		return x.NumberOfMedia
	}
	return 0
}

func (x *UsagesTracking) GetNumberOfRecords() float64 {
	if x != nil {
		return x.NumberOfRecords
	}
	return 0
}

type ProjectSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Models    []*ModelType     `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty" firestore:"models,omitempty"`       // @gotags: firestore:"models,omitempty"
	Functions []*CloudFunction `protobuf:"bytes,2,rep,name=functions,proto3" json:"functions,omitempty" firestore:"functions,omitempty"` // @gotags: firestore:"functions,omitempty"
}

func (x *ProjectSchema) Reset() {
	*x = ProjectSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectSchema) ProtoMessage() {}

func (x *ProjectSchema) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectSchema.ProtoReflect.Descriptor instead.
func (*ProjectSchema) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{36}
}

func (x *ProjectSchema) GetModels() []*ModelType {
	if x != nil {
		return x.Models
	}
	return nil
}

func (x *ProjectSchema) GetFunctions() []*CloudFunction {
	if x != nil {
		return x.Functions
	}
	return nil
}

type ModelType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name,omitempty"`                                               // @gotags: firestore:"name,omitempty"
	Fields          []*FieldInfo      `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty" firestore:"fields,omitempty"`                                           // @gotags: firestore:"fields,omitempty"
	Connections     []*ConnectionType `protobuf:"bytes,3,rep,name=connections,proto3" json:"connections,omitempty" firestore:"connections,omitempty"`                                 // @gotags: firestore:"connections,omitempty"
	HookIds         []string          `protobuf:"bytes,4,rep,name=hook_ids,json=hookIds,proto3" json:"hook_ids,omitempty" firestore:"hook_ids,omitempty"`                          // @gotags: firestore:"hook_ids,omitempty"
	Locals          []string          `protobuf:"bytes,5,rep,name=locals,proto3" json:"locals,omitempty" firestore:"locals,omitempty"`                                           // @gotags: firestore:"locals,omitempty"
	RepeatedGroups  []string          `protobuf:"bytes,6,rep,name=repeated_groups,json=repeatedGroups,proto3" json:"repeated_groups,omitempty" firestore:"locals,omitempty"`     // @gotags: firestore:"locals,omitempty"
	SystemGenerated bool              `protobuf:"varint,7,opt,name=system_generated,json=systemGenerated,proto3" json:"system_generated,omitempty" firestore:"system_generated,omitempty"` // @gotags: firestore:"system_generated,omitempty"
	SinglePage      bool              `protobuf:"varint,8,opt,name=single_page,json=singlePage,proto3" json:"single_page,omitempty" firestore:"system_generated,omitempty"`                // @gotags: firestore:"system_generated,omitempty"
	SinglePageUuid  string            `protobuf:"bytes,9,opt,name=single_page_uuid,json=singlePageUuid,proto3" json:"single_page_uuid,omitempty" firestore:"system_generated,omitempty"`   // @gotags: firestore:"system_generated,omitempty"
	HasConnections  bool              `protobuf:"varint,10,opt,name=has_connections,json=hasConnections,proto3" json:"has_connections,omitempty" firestore:"has_connections,omitempty"`   // @gotags: firestore:"has_connections,omitempty"
}

func (x *ModelType) Reset() {
	*x = ModelType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelType) ProtoMessage() {}

func (x *ModelType) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelType.ProtoReflect.Descriptor instead.
func (*ModelType) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{37}
}

func (x *ModelType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelType) GetFields() []*FieldInfo {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ModelType) GetConnections() []*ConnectionType {
	if x != nil {
		return x.Connections
	}
	return nil
}

func (x *ModelType) GetHookIds() []string {
	if x != nil {
		return x.HookIds
	}
	return nil
}

func (x *ModelType) GetLocals() []string {
	if x != nil {
		return x.Locals
	}
	return nil
}

func (x *ModelType) GetRepeatedGroups() []string {
	if x != nil {
		return x.RepeatedGroups
	}
	return nil
}

func (x *ModelType) GetSystemGenerated() bool {
	if x != nil {
		return x.SystemGenerated
	}
	return false
}

func (x *ModelType) GetSinglePage() bool {
	if x != nil {
		return x.SinglePage
	}
	return false
}

func (x *ModelType) GetSinglePageUuid() string {
	if x != nil {
		return x.SinglePageUuid
	}
	return ""
}

func (x *ModelType) GetHasConnections() bool {
	if x != nil {
		return x.HasConnections
	}
	return false
}

type CloudFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`                                                                                // @gotags: firestore:"id,omitempty"
	Name                     string                            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" firestore:"name,omitempty"`                                                                            // @gotags: firestore:"name,omitempty"
	Description              string                            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" firestore:"description,omitempty"`                                                              // @gotags: firestore:"description,omitempty"
	EnvVars                  []*FunctionEnvVariables           `protobuf:"bytes,4,rep,name=env_vars,json=envVars,proto3" json:"env_vars,omitempty" firestore:"env_vars,omitempty"`                                                       // @gotags: firestore:"env_vars,omitempty"
	FunctionPath             string                            `protobuf:"bytes,5,opt,name=function_path,json=functionPath,proto3" json:"function_path,omitempty" firestore:"function_path,omitempty"`                                        // @gotags: firestore:"function_path,omitempty"
	Request                  *CloudFunctionRequestResponseType `protobuf:"bytes,6,opt,name=request,proto3" json:"request,omitempty" firestore:"request,omitempty"`                                                                      // @gotags: firestore:"request,omitempty"
	Response                 *CloudFunctionRequestResponseType `protobuf:"bytes,7,opt,name=response,proto3" json:"response,omitempty" firestore:"response,omitempty"`                                                                    // @gotags: firestore:"response,omitempty"
	FunctionProviderId       string                            `protobuf:"bytes,8,opt,name=function_provider_id,json=functionProviderId,proto3" json:"function_provider_id,omitempty" firestore:"function_provider_id,omitempty"`                    // @gotags: firestore:"function_provider_id,omitempty"
	FunctionConnected        bool                              `protobuf:"varint,9,opt,name=function_connected,json=functionConnected,proto3" json:"function_connected,omitempty" firestore:"function_connected,omitempty"`                        // @gotags: firestore:"function_connected,omitempty"
	ProviderExportedVariable string                            `protobuf:"bytes,10,opt,name=provider_exported_variable,json=providerExportedVariable,proto3" json:"provider_exported_variable,omitempty" firestore:"provider_exported_variable,omitempty"` // @gotags: firestore:"provider_exported_variable,omitempty"
	FunctionExportedVariable string                            `protobuf:"bytes,11,opt,name=function_exported_variable,json=functionExportedVariable,proto3" json:"function_exported_variable,omitempty" firestore:"function_exported_variable,omitempty"` // @gotags: firestore:"function_exported_variable,omitempty"
	RuntimeConfig            *FunctionRuntimeConfig            `protobuf:"bytes,12,opt,name=runtime_config,json=runtimeConfig,proto3" json:"runtime_config,omitempty" firestore:"runtime_config,omitempty"`                                    // @gotags: firestore:"runtime_config,omitempty"
	UpdatedAt                string                            `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" firestore:"updated_at,omitempty"`                                                // @gotags: firestore:"updated_at,omitempty"
	CreatedAt                string                            `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" firestore:"created_at,omitempty"`                                                // @gotags: firestore:"created_at,omitempty"
}

func (x *CloudFunction) Reset() {
	*x = CloudFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudFunction) ProtoMessage() {}

func (x *CloudFunction) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudFunction.ProtoReflect.Descriptor instead.
func (*CloudFunction) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{38}
}

func (x *CloudFunction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloudFunction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudFunction) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CloudFunction) GetEnvVars() []*FunctionEnvVariables {
	if x != nil {
		return x.EnvVars
	}
	return nil
}

func (x *CloudFunction) GetFunctionPath() string {
	if x != nil {
		return x.FunctionPath
	}
	return ""
}

func (x *CloudFunction) GetRequest() *CloudFunctionRequestResponseType {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *CloudFunction) GetResponse() *CloudFunctionRequestResponseType {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CloudFunction) GetFunctionProviderId() string {
	if x != nil {
		return x.FunctionProviderId
	}
	return ""
}

func (x *CloudFunction) GetFunctionConnected() bool {
	if x != nil {
		return x.FunctionConnected
	}
	return false
}

func (x *CloudFunction) GetProviderExportedVariable() string {
	if x != nil {
		return x.ProviderExportedVariable
	}
	return ""
}

func (x *CloudFunction) GetFunctionExportedVariable() string {
	if x != nil {
		return x.FunctionExportedVariable
	}
	return ""
}

func (x *CloudFunction) GetRuntimeConfig() *FunctionRuntimeConfig {
	if x != nil {
		return x.RuntimeConfig
	}
	return nil
}

func (x *CloudFunction) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *CloudFunction) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type FunctionEnvVariables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty" firestore:"key,omitempty"`     // @gotags: firestore:"key,omitempty"
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" firestore:"value,omitempty"` // @gotags: firestore:"value,omitempty"
}

func (x *FunctionEnvVariables) Reset() {
	*x = FunctionEnvVariables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionEnvVariables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionEnvVariables) ProtoMessage() {}

func (x *FunctionEnvVariables) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionEnvVariables.ProtoReflect.Descriptor instead.
func (*FunctionEnvVariables) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{39}
}

func (x *FunctionEnvVariables) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FunctionEnvVariables) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type CloudFunctionRequestResponseType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model  string       `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty" firestore:"model,omitempty"`   // @gotags: firestore:"model,omitempty" // fixed model name Ex: model, JSON, CUSTOM
	Params []*FieldInfo `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty" firestore:"params,omitempty"` // @gotags: firestore:"params,omitempty" // for only fixed CUSTOM request type
}

func (x *CloudFunctionRequestResponseType) Reset() {
	*x = CloudFunctionRequestResponseType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudFunctionRequestResponseType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudFunctionRequestResponseType) ProtoMessage() {}

func (x *CloudFunctionRequestResponseType) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudFunctionRequestResponseType.ProtoReflect.Descriptor instead.
func (*CloudFunctionRequestResponseType) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{40}
}

func (x *CloudFunctionRequestResponseType) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CloudFunctionRequestResponseType) GetParams() []*FieldInfo {
	if x != nil {
		return x.Params
	}
	return nil
}

type FunctionRuntimeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Runtime string `protobuf:"bytes,1,opt,name=runtime,proto3" json:"runtime,omitempty" firestore:"runtime,omitempty"`                 // @gotags: firestore:"runtime,omitempty"
	Memory  int64  `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty" firestore:"memory,omitempty"`                  // @gotags: firestore:"memory,omitempty"
	Handler string `protobuf:"bytes,3,opt,name=handler,proto3" json:"handler,omitempty" firestore:"handler,omitempty"`                 // @gotags: firestore:"handler,omitempty"
	TimeOut int64  `protobuf:"varint,4,opt,name=time_out,json=timeOut,proto3" json:"time_out,omitempty" firestore:"time_out,omitempty"` // @gotags: firestore:"time_out,omitempty"
}

func (x *FunctionRuntimeConfig) Reset() {
	*x = FunctionRuntimeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionRuntimeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionRuntimeConfig) ProtoMessage() {}

func (x *FunctionRuntimeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionRuntimeConfig.ProtoReflect.Descriptor instead.
func (*FunctionRuntimeConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{41}
}

func (x *FunctionRuntimeConfig) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *FunctionRuntimeConfig) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *FunctionRuntimeConfig) GetHandler() string {
	if x != nil {
		return x.Handler
	}
	return ""
}

func (x *FunctionRuntimeConfig) GetTimeOut() int64 {
	if x != nil {
		return x.TimeOut
	}
	return 0
}

type Validation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Required          bool      `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty" firestore:"required,omitempty"`                                                    // @gotags: firestore:"required,omitempty"
	Hide              bool      `protobuf:"varint,2,opt,name=hide,proto3" json:"hide,omitempty" firestore:"hide,omitempty"`                                                            // @gotags: firestore:"hide,omitempty"
	AsTitle           bool      `protobuf:"varint,3,opt,name=as_title,json=asTitle,proto3" json:"as_title,omitempty" firestore:"as_title,omitempty"`                                       // @gotags: firestore:"as_title,omitempty"
	Locals            []string  `protobuf:"bytes,4,rep,name=locals,proto3" json:"locals,omitempty" firestore:"locals,omitempty"`                                                         // @gotags: firestore:"locals,omitempty"
	Unique            bool      `protobuf:"varint,5,opt,name=unique,proto3" json:"unique,omitempty" firestore:"unique,omitempty"`                                                        // @gotags: firestore:"unique,omitempty"
	CharLimit         []uint32  `protobuf:"varint,6,rep,packed,name=char_limit,json=charLimit,proto3" json:"char_limit,omitempty" firestore:"char_limit,omitempty"`                          // @gotags: firestore:"char_limit,omitempty"
	IntRangeLimit     []uint32  `protobuf:"varint,10,rep,packed,name=int_range_limit,json=intRangeLimit,proto3" json:"int_range_limit,omitempty" firestore:"int_range_limit,omitempty"`           // @gotags: firestore:"int_range_limit,omitempty"
	DoubleRangeLimit  []float64 `protobuf:"fixed64,11,rep,packed,name=double_range_limit,json=doubleRangeLimit,proto3" json:"double_range_limit,omitempty" firestore:"double_range_limit,omitempty"` // @gotags: firestore:"double_range_limit,omitempty"
	IsEmail           bool      `protobuf:"varint,7,opt,name=is_email,json=isEmail,proto3" json:"is_email,omitempty" firestore:"is_email,omitempty"`                                       // @gotags: firestore:"is_email,omitempty"
	Placeholder       string    `protobuf:"bytes,8,opt,name=placeholder,proto3" json:"placeholder,omitempty" firestore:"placeholder,omitempty"`                                               // @gotags: firestore:"placeholder,omitempty"
	FixedListElements []string  `protobuf:"bytes,9,rep,name=fixed_list_elements,json=fixedListElements,proto3" json:"fixed_list_elements,omitempty" firestore:"fixed_list_elements,omitempty"`        // @gotags: firestore:"fixed_list_elements,omitempty"
	IsMultiChoice     bool      `protobuf:"varint,12,opt,name=is_multi_choice,json=isMultiChoice,proto3" json:"is_multi_choice,omitempty" firestore:"is_multi_choice,omitempty"`                  // @gotags: firestore:"is_multi_choice,omitempty"
	ListType          string    `protobuf:"bytes,13,opt,name=list_type,json=listType,proto3" json:"list_type,omitempty" firestore:"list_type,omitempty"`                                    // @gotags: firestore:"list_type,omitempty"
	IsGallery         bool      `protobuf:"varint,14,opt,name=is_gallery,json=isGallery,proto3" json:"is_gallery,omitempty" firestore:"is_gallery,omitempty"`                                // @gotags: firestore:"is_gallery,omitempty"
	IsPassword        bool      `protobuf:"varint,15,opt,name=is_password,json=isPassword,proto3" json:"is_password,omitempty" firestore:"is_gallery,omitempty"`                             // @gotags: firestore:"is_gallery,omitempty"
	IsSystemRole      bool      `protobuf:"varint,16,opt,name=is_system_role,json=isSystemRole,proto3" json:"is_system_role,omitempty" firestore:"is_gallery,omitempty"`                     // @gotags: firestore:"is_gallery,omitempty"
	IsUrl             bool      `protobuf:"varint,17,opt,name=is_url,json=isUrl,proto3" json:"is_url,omitempty" firestore:"is_url,omitempty"`                                            // @gotags: firestore:"is_url,omitempty"
}

func (x *Validation) Reset() {
	*x = Validation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validation) ProtoMessage() {}

func (x *Validation) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validation.ProtoReflect.Descriptor instead.
func (*Validation) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{42}
}

func (x *Validation) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *Validation) GetHide() bool {
	if x != nil {
		return x.Hide
	}
	return false
}

func (x *Validation) GetAsTitle() bool {
	if x != nil {
		return x.AsTitle
	}
	return false
}

func (x *Validation) GetLocals() []string {
	if x != nil {
		return x.Locals
	}
	return nil
}

func (x *Validation) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

func (x *Validation) GetCharLimit() []uint32 {
	if x != nil {
		return x.CharLimit
	}
	return nil
}

func (x *Validation) GetIntRangeLimit() []uint32 {
	if x != nil {
		return x.IntRangeLimit
	}
	return nil
}

func (x *Validation) GetDoubleRangeLimit() []float64 {
	if x != nil {
		return x.DoubleRangeLimit
	}
	return nil
}

func (x *Validation) GetIsEmail() bool {
	if x != nil {
		return x.IsEmail
	}
	return false
}

func (x *Validation) GetPlaceholder() string {
	if x != nil {
		return x.Placeholder
	}
	return ""
}

func (x *Validation) GetFixedListElements() []string {
	if x != nil {
		return x.FixedListElements
	}
	return nil
}

func (x *Validation) GetIsMultiChoice() bool {
	if x != nil {
		return x.IsMultiChoice
	}
	return false
}

func (x *Validation) GetListType() string {
	if x != nil {
		return x.ListType
	}
	return ""
}

func (x *Validation) GetIsGallery() bool {
	if x != nil {
		return x.IsGallery
	}
	return false
}

func (x *Validation) GetIsPassword() bool {
	if x != nil {
		return x.IsPassword
	}
	return false
}

func (x *Validation) GetIsSystemRole() bool {
	if x != nil {
		return x.IsSystemRole
	}
	return false
}

func (x *Validation) GetIsUrl() bool {
	if x != nil {
		return x.IsUrl
	}
	return false
}

type FieldInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier              string       `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty" firestore:"identifier,omitempty"`                                                             // @gotags: firestore:"identifier,omitempty"
	Description             string       `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" firestore:"description,omitempty"`                                                           // @gotags: firestore:"description,omitempty"
	InputType               string       `protobuf:"bytes,3,opt,name=input_type,json=inputType,proto3" json:"input_type,omitempty" firestore:"input_type,omitempty"`                                              // @gotags: firestore:"input_type,omitempty" // string
	FieldType               string       `protobuf:"bytes,4,opt,name=field_type,json=fieldType,proto3" json:"field_type,omitempty" firestore:"field_type,omitempty"`                                              // @gotags: firestore:"field_type,omitempty" // list
	SubFieldInfo            []*FieldInfo `protobuf:"bytes,5,rep,name=sub_field_info,json=subFieldInfo,proto3" json:"sub_field_info,omitempty" firestore:"modules,omitempty"`                                   // @gotags: firestore:"modules,omitempty" // to avoid a loop
	Validation              *Validation  `protobuf:"bytes,6,opt,name=validation,proto3" json:"validation,omitempty" firestore:"validation,omitempty"`                                                             // @gotags: firestore:"validation,omitempty"
	Serial                  uint32       `protobuf:"varint,7,opt,name=serial,proto3" json:"serial,omitempty" firestore:"serial,omitempty"`                                                                    // @gotags: firestore:"serial,omitempty"
	Label                   string       `protobuf:"bytes,8,opt,name=label,proto3" json:"label,omitempty" firestore:"label,omitempty"`                                                                       // @gotags: firestore:"label,omitempty"
	SystemGenerated         bool         `protobuf:"varint,9,opt,name=system_generated,json=systemGenerated,proto3" json:"system_generated,omitempty" firestore:"system_generated,omitempty"`                           // @gotags: firestore:"system_generated,omitempty"
	RepeatedGroupIdentifier string       `protobuf:"bytes,10,opt,name=repeated_group_identifier,json=repeatedGroupIdentifier,proto3" json:"repeated_group_identifier,omitempty" firestore:"repeated_group_identifier,omitempty"` // @gotags: firestore:"repeated_group_identifier,omitempty"
	IsObjectField           bool         `protobuf:"varint,11,opt,name=is_object_field,json=isObjectField,proto3" json:"is_object_field,omitempty" firestore:"is_object_field,omitempty"`                              // @gotags: firestore:"is_object_field,omitempty"
	ParentField             string       `protobuf:"bytes,12,opt,name=parent_field,json=parentField,proto3" json:"parent_field,omitempty" firestore:"parent_field,omitempty"`                                       // @gotags: firestore:"parent_field,omitempty"
}

func (x *FieldInfo) Reset() {
	*x = FieldInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldInfo) ProtoMessage() {}

func (x *FieldInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldInfo.ProtoReflect.Descriptor instead.
func (*FieldInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{43}
}

func (x *FieldInfo) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *FieldInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FieldInfo) GetInputType() string {
	if x != nil {
		return x.InputType
	}
	return ""
}

func (x *FieldInfo) GetFieldType() string {
	if x != nil {
		return x.FieldType
	}
	return ""
}

func (x *FieldInfo) GetSubFieldInfo() []*FieldInfo {
	if x != nil {
		return x.SubFieldInfo
	}
	return nil
}

func (x *FieldInfo) GetValidation() *Validation {
	if x != nil {
		return x.Validation
	}
	return nil
}

func (x *FieldInfo) GetSerial() uint32 {
	if x != nil {
		return x.Serial
	}
	return 0
}

func (x *FieldInfo) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FieldInfo) GetSystemGenerated() bool {
	if x != nil {
		return x.SystemGenerated
	}
	return false
}

func (x *FieldInfo) GetRepeatedGroupIdentifier() string {
	if x != nil {
		return x.RepeatedGroupIdentifier
	}
	return ""
}

func (x *FieldInfo) GetIsObjectField() bool {
	if x != nil {
		return x.IsObjectField
	}
	return false
}

func (x *FieldInfo) GetParentField() string {
	if x != nil {
		return x.ParentField
	}
	return ""
}

type ConnectionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model    string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty" firestore:"model,omitempty"`                    // @gotags: firestore:"model,omitempty"
	Relation string `protobuf:"bytes,2,opt,name=relation,proto3" json:"relation,omitempty" firestore:"relation,omitempty"`              // @gotags: firestore:"relation,omitempty"
	Type     string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty" firestore:"type,omitempty"`                      // @gotags: firestore:"type,omitempty"
	KnownAs  string `protobuf:"bytes,4,opt,name=known_as,json=knownAs,proto3" json:"known_as,omitempty" firestore:"known_as,omitempty"` // @gotags: firestore:"known_as,omitempty"
}

func (x *ConnectionType) Reset() {
	*x = ConnectionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionType) ProtoMessage() {}

func (x *ConnectionType) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionType.ProtoReflect.Descriptor instead.
func (*ConnectionType) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{44}
}

func (x *ConnectionType) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ConnectionType) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

func (x *ConnectionType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ConnectionType) GetKnownAs() string {
	if x != nil {
		return x.KnownAs
	}
	return ""
}

type Webhook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`                                                  // @gotags: firestore:"id,omitempty"
	XKey            string   `protobuf:"bytes,2,opt,name=_key,json=Key,proto3" json:"_key,omitempty" firestore:"_key,omitempty"`                                     // @gotags: firestore:"_key,omitempty"
	Type            string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty" firestore:"type,omitempty"`                                              // @gotags: firestore:"type,omitempty"
	Model           string   `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty" firestore:"model,omitempty"`                                            // @gotags: firestore:"model,omitempty"
	ProjectId       string   `protobuf:"bytes,5,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" firestore:"project_id,omitempty"`                   // @gotags: firestore:"project_id,omitempty"
	Name            string   `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty" firestore:"name,omitempty"`                                              // @gotags: firestore:"name,omitempty"
	Events          []string `protobuf:"bytes,7,rep,name=events,proto3" json:"events,omitempty" firestore:"events,omitempty"`                                          // @gotags: firestore:"events,omitempty"
	Url             string   `protobuf:"bytes,8,opt,name=url,proto3" json:"url,omitempty" firestore:"url,omitempty"`                                                // @gotags: firestore:"url,omitempty"
	LogicExecutions []string `protobuf:"bytes,9,rep,name=logic_executions,json=logicExecutions,proto3" json:"logic_executions,omitempty" firestore:"logic_executions,omitempty"` // @gotags: firestore:"logic_executions,omitempty"
}

func (x *Webhook) Reset() {
	*x = Webhook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Webhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Webhook) ProtoMessage() {}

func (x *Webhook) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Webhook.ProtoReflect.Descriptor instead.
func (*Webhook) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{45}
}

func (x *Webhook) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Webhook) GetXKey() string {
	if x != nil {
		return x.XKey
	}
	return ""
}

func (x *Webhook) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Webhook) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Webhook) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Webhook) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Webhook) GetEvents() []string {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Webhook) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Webhook) GetLogicExecutions() []string {
	if x != nil {
		return x.LogicExecutions
	}
	return nil
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x22, 0x6f, 0x0a, 0x14, 0x50, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xdb, 0x02, 0x0a, 0x0b, 0x46,
	0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x73, 0x33, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x33,
	0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0xbf, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xa0, 0x01, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61,
	0x78, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x93, 0x01,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x22, 0x72, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x69, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x33, 0x5f, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x33, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x0d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x58,
	0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xeb, 0x03, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x0f, 0x61, 0x70, 0x69,
	0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x2e, 0x41, 0x70, 0x69, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x61, 0x70, 0x69, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x1a, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64,
	0x4f, 0x6e, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x69,
	0x73, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x1a, 0x5b, 0x0a, 0x13, 0x41, 0x70, 0x69, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x41, 0x50, 0x49, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6b,
	0x0a, 0x0d, 0x41, 0x50, 0x49, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0xd2, 0x04, 0x0a, 0x0a,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e,
	0x6c, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48,
	0x6f, 0x62, 0x62, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x22, 0x4a, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x66, 0x72, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x68, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x72,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x72, 0x6f, 0x22, 0x69, 0x0a, 0x0c,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x08, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x52, 0x08,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3d,
	0x0a, 0x1a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x19, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd8, 0x02,
	0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3d, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x6f, 0x6f,
	0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x22, 0x5f, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x0b, 0x54, 0x65,
	0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x93, 0x08, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x61, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x41, 0x50, 0x49, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x34, 0x0a,
	0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x06, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72,
	0x69, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66,
	0x72, 0x6f, 0x6d, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52,
	0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x4f, 0x0a, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x13, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x49, 0x64, 0x73,
	0x1a, 0x49, 0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x48, 0x0a, 0x10, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7b, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x22, 0x73, 0x0a, 0x0d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x68, 0x69, 0x64, 0x65, 0x22, 0xb7, 0x02, 0x0a, 0x10, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x11, 0x0a, 0x04,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x30, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65,
	0x73, 0x22, 0x8f, 0x01, 0x0a, 0x0b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x64, 0x69, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x64, 0x69,
	0x74, 0x65, 0x64, 0x22, 0x94, 0x05, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66,
	0x65, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x74, 0x61, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x19, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x6e,
	0x65, 0x78, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x42, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x11, 0x0a, 0x04,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x06,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22,
	0x98, 0x03, 0x0a, 0x11, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x66, 0x69, 0x72, 0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66,
	0x69, 0x72, 0x65, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x47, 0x0a, 0x20, 0x66, 0x69, 0x72, 0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x66, 0x69, 0x72, 0x65,
	0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x44, 0x69, 0x72, 0x22, 0x7f, 0x0a, 0x08, 0x41, 0x50,
	0x49, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x22, 0x38, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xa4, 0x04, 0x0a, 0x0d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x08,
	0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52,
	0x07, 0x65, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x61, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb0, 0x01, 0x0a,
	0x0d, 0x41, 0x64, 0x64, 0x4f, 0x6e, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x5f, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x71, 0x6c, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22,
	0x9d, 0x02, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x11, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a,
	0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0x31, 0x0a, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0xee, 0x03, 0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f,
	0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x72,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x22, 0x93, 0x02, 0x0a, 0x0e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x70, 0x69, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x70, 0x69, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x75, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2c, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x66, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x85, 0x03,
	0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f,
	0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f,
	0x6f, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x67, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xaa, 0x05, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x08, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x52, 0x07, 0x65, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x45,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x66, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3c, 0x0a,
	0x1a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x3e, 0x0a, 0x14, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x66, 0x0a, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x7e, 0x0a, 0x15, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x22, 0xab, 0x04, 0x0a, 0x0a, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x68, 0x69, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x73, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x01, 0x52, 0x10, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x78, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x69,
	0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x69, 0x73, 0x55, 0x72, 0x6c, 0x22, 0xde, 0x03, 0x0a, 0x09, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x71, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x73, 0x22, 0xde, 0x01, 0x0a,
	0x07, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x11, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x39, 0x0a,
	0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x10, 0x02, 0x2a, 0x6b, 0x0a, 0x10, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c,
	0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x52, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x10, 0x05, 0x2a, 0x36, 0x0a, 0x14, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a,
	0x0b, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01, 0x42, 0x27, 0x5a,
	0x25, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x74,
	0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_common_proto_goTypes = []interface{}{
	(PluginType)(0),                          // 0: protobuff.PluginType
	(PluginLoadStatus)(0),                    // 1: protobuff.PluginLoadStatus
	(PluginActivateStatus)(0),                // 2: protobuff.PluginActivateStatus
	(*PictureDeleteRequest)(nil),             // 3: protobuff.PictureDeleteRequest
	(*FileDetails)(nil),                      // 4: protobuff.FileDetails
	(*UploadParams)(nil),                     // 5: protobuff.UploadParams
	(*Filter)(nil),                           // 6: protobuff.Filter
	(*Request)(nil),                          // 7: protobuff.Request
	(*FileLink)(nil),                         // 8: protobuff.FileLink
	(*FilePickParameter)(nil),                // 9: protobuff.FilePickParameter
	(*ImageMetaInfo)(nil),                    // 10: protobuff.ImageMetaInfo
	(*LoginRequest)(nil),                     // 11: protobuff.LoginRequest
	(*RegisterRequest)(nil),                  // 12: protobuff.RegisterRequest
	(*Role)(nil),                             // 13: protobuff.Role
	(*APIPermission)(nil),                    // 14: protobuff.APIPermission
	(*SystemUser)(nil),                       // 15: protobuff.SystemUser
	(*ProjectLimit)(nil),                     // 16: protobuff.ProjectLimit
	(*UserProjects)(nil),                     // 17: protobuff.UserProjects
	(*UserSubscription)(nil),                 // 18: protobuff.UserSubscription
	(*UserMeta)(nil),                         // 19: protobuff.UserMeta
	(*MetaField)(nil),                        // 20: protobuff.MetaField
	(*PreviewMode)(nil),                      // 21: protobuff.PreviewMode
	(*TeamMembers)(nil),                      // 22: protobuff.TeamMembers
	(*Project)(nil),                          // 23: protobuff.Project
	(*ActivatedPlugins)(nil),                 // 24: protobuff.ActivatedPlugins
	(*Workspace)(nil),                        // 25: protobuff.Workspace
	(*SystemMessage)(nil),                    // 26: protobuff.SystemMessage
	(*SupportAndTicket)(nil),                 // 27: protobuff.SupportAndTicket
	(*TicketReply)(nil),                      // 28: protobuff.TicketReply
	(*ProjectInvoices)(nil),                  // 29: protobuff.ProjectInvoices
	(*ProjectUsages)(nil),                    // 30: protobuff.ProjectUsages
	(*DriverCredentials)(nil),                // 31: protobuff.DriverCredentials
	(*APIToken)(nil),                         // 32: protobuff.APIToken
	(*Response)(nil),                         // 33: protobuff.Response
	(*PluginDetails)(nil),                    // 34: protobuff.PluginDetails
	(*AddOnsDetails)(nil),                    // 35: protobuff.AddOnsDetails
	(*AccountUsage)(nil),                     // 36: protobuff.AccountUsage
	(*MonthlySubscription)(nil),              // 37: protobuff.MonthlySubscription
	(*UsagesTracking)(nil),                   // 38: protobuff.UsagesTracking
	(*ProjectSchema)(nil),                    // 39: protobuff.ProjectSchema
	(*ModelType)(nil),                        // 40: protobuff.ModelType
	(*CloudFunction)(nil),                    // 41: protobuff.CloudFunction
	(*FunctionEnvVariables)(nil),             // 42: protobuff.FunctionEnvVariables
	(*CloudFunctionRequestResponseType)(nil), // 43: protobuff.CloudFunctionRequestResponseType
	(*FunctionRuntimeConfig)(nil),            // 44: protobuff.FunctionRuntimeConfig
	(*Validation)(nil),                       // 45: protobuff.Validation
	(*FieldInfo)(nil),                        // 46: protobuff.FieldInfo
	(*ConnectionType)(nil),                   // 47: protobuff.ConnectionType
	(*Webhook)(nil),                          // 48: protobuff.Webhook
	nil,                                      // 49: protobuff.Role.ApiPermissionsEntry
	nil,                                      // 50: protobuff.Project.RolesEntry
}
var file_common_proto_depIdxs = []int32{
	5,  // 0: protobuff.FileDetails.upload_param:type_name -> protobuff.UploadParams
	6,  // 1: protobuff.Request.filter:type_name -> protobuff.Filter
	15, // 2: protobuff.FilePickParameter.origin:type_name -> protobuff.SystemUser
	49, // 3: protobuff.Role.api_permissions:type_name -> protobuff.Role.ApiPermissionsEntry
	15, // 4: protobuff.UserProjects.user:type_name -> protobuff.SystemUser
	23, // 5: protobuff.UserProjects.projects:type_name -> protobuff.Project
	37, // 6: protobuff.UserSubscription.subscription:type_name -> protobuff.MonthlySubscription
	29, // 7: protobuff.UserSubscription.invoices:type_name -> protobuff.ProjectInvoices
	19, // 8: protobuff.MetaField.created_by:type_name -> protobuff.UserMeta
	19, // 9: protobuff.MetaField.last_modified_by:type_name -> protobuff.UserMeta
	39, // 10: protobuff.Project.schema:type_name -> protobuff.ProjectSchema
	34, // 11: protobuff.Project.plugins:type_name -> protobuff.PluginDetails
	35, // 12: protobuff.Project.addons:type_name -> protobuff.AddOnsDetails
	32, // 13: protobuff.Project.tokens:type_name -> protobuff.APIToken
	50, // 14: protobuff.Project.roles:type_name -> protobuff.Project.RolesEntry
	31, // 15: protobuff.Project.driver:type_name -> protobuff.DriverCredentials
	38, // 16: protobuff.Project.limits:type_name -> protobuff.UsagesTracking
	22, // 17: protobuff.Project.teams:type_name -> protobuff.TeamMembers
	26, // 18: protobuff.Project.system_messages:type_name -> protobuff.SystemMessage
	25, // 19: protobuff.Project.workspaces:type_name -> protobuff.Workspace
	24, // 20: protobuff.Project.activated_plugins_ids:type_name -> protobuff.ActivatedPlugins
	28, // 21: protobuff.SupportAndTicket.replies:type_name -> protobuff.TicketReply
	19, // 22: protobuff.TicketReply.user:type_name -> protobuff.UserMeta
	38, // 23: protobuff.ProjectUsages.usages:type_name -> protobuff.UsagesTracking
	0,  // 24: protobuff.PluginDetails.type:type_name -> protobuff.PluginType
	42, // 25: protobuff.PluginDetails.env_vars:type_name -> protobuff.FunctionEnvVariables
	1,  // 26: protobuff.PluginDetails.load_status:type_name -> protobuff.PluginLoadStatus
	2,  // 27: protobuff.PluginDetails.activate_status:type_name -> protobuff.PluginActivateStatus
	37, // 28: protobuff.AccountUsage.subscriptions:type_name -> protobuff.MonthlySubscription
	38, // 29: protobuff.AccountUsage.limits:type_name -> protobuff.UsagesTracking
	38, // 30: protobuff.AccountUsage.usages:type_name -> protobuff.UsagesTracking
	29, // 31: protobuff.MonthlySubscription.invoices:type_name -> protobuff.ProjectInvoices
	40, // 32: protobuff.ProjectSchema.models:type_name -> protobuff.ModelType
	41, // 33: protobuff.ProjectSchema.functions:type_name -> protobuff.CloudFunction
	46, // 34: protobuff.ModelType.fields:type_name -> protobuff.FieldInfo
	47, // 35: protobuff.ModelType.connections:type_name -> protobuff.ConnectionType
	42, // 36: protobuff.CloudFunction.env_vars:type_name -> protobuff.FunctionEnvVariables
	43, // 37: protobuff.CloudFunction.request:type_name -> protobuff.CloudFunctionRequestResponseType
	43, // 38: protobuff.CloudFunction.response:type_name -> protobuff.CloudFunctionRequestResponseType
	44, // 39: protobuff.CloudFunction.runtime_config:type_name -> protobuff.FunctionRuntimeConfig
	46, // 40: protobuff.CloudFunctionRequestResponseType.params:type_name -> protobuff.FieldInfo
	46, // 41: protobuff.FieldInfo.sub_field_info:type_name -> protobuff.FieldInfo
	45, // 42: protobuff.FieldInfo.validation:type_name -> protobuff.Validation
	14, // 43: protobuff.Role.ApiPermissionsEntry.value:type_name -> protobuff.APIPermission
	13, // 44: protobuff.Project.RolesEntry.value:type_name -> protobuff.Role
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PictureDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilePickParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageMetaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProjects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamMembers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivatedPlugins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workspace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportAndTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectInvoices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectUsages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriverCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOnsDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthlySubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsagesTracking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionEnvVariables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudFunctionRequestResponseType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionRuntimeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Webhook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}

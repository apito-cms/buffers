// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common.proto

package protobuff

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PictureDeleteRequest struct {
	Urls      []string `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty" firestore:"urls,omitempty"`
	Model     string   `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty" firestore:"model,omitempty"`
	Id        string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`
	FieldName string   `protobuf:"bytes,4,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty" firestore:"field_name,omitempty"`
}

func (m *PictureDeleteRequest) Reset()         { *m = PictureDeleteRequest{} }
func (m *PictureDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*PictureDeleteRequest) ProtoMessage()    {}
func (*PictureDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}
func (m *PictureDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PictureDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PictureDeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PictureDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PictureDeleteRequest.Merge(m, src)
}
func (m *PictureDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *PictureDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PictureDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PictureDeleteRequest proto.InternalMessageInfo

func (m *PictureDeleteRequest) GetUrls() []string {
	if m != nil {
		return m.Urls
	}
	return nil
}

func (m *PictureDeleteRequest) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *PictureDeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PictureDeleteRequest) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

type FileDetails struct {
	Id            string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`
	XKey          string        `protobuf:"bytes,2,opt,name=_key,json=Key,proto3" json:"_key,omitempty" firestore:"_key,omitempty"`
	Type          string        `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty" firestore:"type,omitempty"`
	FileExtension string        `protobuf:"bytes,4,opt,name=file_extension,json=fileExtension,proto3" json:"file_extension,omitempty" file_extension:"title,omitempty"`
	FileName      string        `protobuf:"bytes,5,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty" firestore:"file_name,omitempty"`
	ContentType   string        `protobuf:"bytes,6,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty" firestore:"content_type,omitempty"`
	Size_         int64         `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty" firestore:"size,omitempty"`
	S3Key         string        `protobuf:"bytes,8,opt,name=s3_key,json=s3Key,proto3" json:"s3_key,omitempty" firestore:"s3_key,omitempty"`
	Url           string        `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty" firestore:"url,omitempty"`
	CreatedAt     string        `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" firestore:"created_at,omitempty"`
	UploadParam   *UploadParams `protobuf:"bytes,11,opt,name=upload_param,json=uploadParam,proto3" json:"upload_param,omitempty" firestore:"upload_param,omitempty"`
	Buffer        []byte        `protobuf:"bytes,12,opt,name=buffer,proto3" json:"buffer,omitempty" firestore:"upload_param,omitempty"`
}

func (m *FileDetails) Reset()         { *m = FileDetails{} }
func (m *FileDetails) String() string { return proto.CompactTextString(m) }
func (*FileDetails) ProtoMessage()    {}
func (*FileDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{1}
}
func (m *FileDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileDetails.Merge(m, src)
}
func (m *FileDetails) XXX_Size() int {
	return m.Size()
}
func (m *FileDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_FileDetails.DiscardUnknown(m)
}

var xxx_messageInfo_FileDetails proto.InternalMessageInfo

func (m *FileDetails) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FileDetails) GetXKey() string {
	if m != nil {
		return m.XKey
	}
	return ""
}

func (m *FileDetails) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *FileDetails) GetFileExtension() string {
	if m != nil {
		return m.FileExtension
	}
	return ""
}

func (m *FileDetails) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *FileDetails) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *FileDetails) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *FileDetails) GetS3Key() string {
	if m != nil {
		return m.S3Key
	}
	return ""
}

func (m *FileDetails) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *FileDetails) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *FileDetails) GetUploadParam() *UploadParams {
	if m != nil {
		return m.UploadParam
	}
	return nil
}

func (m *FileDetails) GetBuffer() []byte {
	if m != nil {
		return m.Buffer
	}
	return nil
}

type UploadParams struct {
	DocId      string `protobuf:"bytes,1,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty" firestore:"doc_id,omitempty"`
	ProjectId  string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" firestore:"project_id,omitempty"`
	ModelName  string `protobuf:"bytes,3,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty" firestore:"model_name,omitempty"`
	FieldName  string `protobuf:"bytes,4,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty" firestore:"field_name,omitempty"`
	AllowMulti bool   `protobuf:"varint,5,opt,name=allow_multi,json=allowMulti,proto3" json:"allow_multi,omitempty" firestore:"allow_multi,omitempty"`
}

func (m *UploadParams) Reset()         { *m = UploadParams{} }
func (m *UploadParams) String() string { return proto.CompactTextString(m) }
func (*UploadParams) ProtoMessage()    {}
func (*UploadParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{2}
}
func (m *UploadParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadParams.Merge(m, src)
}
func (m *UploadParams) XXX_Size() int {
	return m.Size()
}
func (m *UploadParams) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadParams.DiscardUnknown(m)
}

var xxx_messageInfo_UploadParams proto.InternalMessageInfo

func (m *UploadParams) GetDocId() string {
	if m != nil {
		return m.DocId
	}
	return ""
}

func (m *UploadParams) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *UploadParams) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *UploadParams) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *UploadParams) GetAllowMulti() bool {
	if m != nil {
		return m.AllowMulti
	}
	return false
}

type Filter struct {
	Page     uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty" firestore:"page,omitempty"`
	Offset   uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty" firestore:"offset,omitempty"`
	Limit    uint32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty" firestore:"limit,omitempty"`
	Order    string `protobuf:"bytes,4,opt,name=order,proto3" json:"order,omitempty" firestore:"order,omitempty"`
	Min      uint32 `protobuf:"varint,5,opt,name=min,proto3" json:"min,omitempty" firestore:"min,omitempty"`
	Max      uint32 `protobuf:"varint,6,opt,name=max,proto3" json:"max,omitempty" firestore:"max,omitempty"`
	Category string `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty" firestore:"category,omitempty"`
}

func (m *Filter) Reset()         { *m = Filter{} }
func (m *Filter) String() string { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()    {}
func (*Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{3}
}
func (m *Filter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Filter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filter.Merge(m, src)
}
func (m *Filter) XXX_Size() int {
	return m.Size()
}
func (m *Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Filter proto.InternalMessageInfo

func (m *Filter) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *Filter) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Filter) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Filter) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *Filter) GetMin() uint32 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *Filter) GetMax() uint32 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *Filter) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

type Request struct {
	Id           string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`
	Type         string  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty" firestore:"type,omitempty"`
	Filter       *Filter `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty" firestore:"filter,omitempty"`
	SearchString string  `protobuf:"bytes,5,opt,name=search_string,json=searchString,proto3" json:"search_string,omitempty" firestore:"search_string,omitempty"`
	Retry        bool    `protobuf:"varint,6,opt,name=retry,proto3" json:"retry,omitempty" firestore:"retry,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{4}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Request) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Request) GetFilter() *Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *Request) GetSearchString() string {
	if m != nil {
		return m.SearchString
	}
	return ""
}

func (m *Request) GetRetry() bool {
	if m != nil {
		return m.Retry
	}
	return false
}

// File Picker
type FileLink struct {
	Link      string `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty" firestore:"link,omitempty"`
	Title     string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty" firestore:"title,omitempty"`
	CreatedAt string `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" firestore:"created_at,omitempty"`
	UpdatedAt string `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" firestore:"updated_at,omitempty"`
}

func (m *FileLink) Reset()         { *m = FileLink{} }
func (m *FileLink) String() string { return proto.CompactTextString(m) }
func (*FileLink) ProtoMessage()    {}
func (*FileLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{5}
}
func (m *FileLink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileLink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileLink.Merge(m, src)
}
func (m *FileLink) XXX_Size() int {
	return m.Size()
}
func (m *FileLink) XXX_DiscardUnknown() {
	xxx_messageInfo_FileLink.DiscardUnknown(m)
}

var xxx_messageInfo_FileLink proto.InternalMessageInfo

func (m *FileLink) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *FileLink) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *FileLink) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *FileLink) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type FilePickParameter struct {
	NumberOfImages uint32      `protobuf:"varint,1,opt,name=number_of_images,json=numberOfImages,proto3" json:"number_of_images,omitempty" firestore:"number_of_images,omitempty"`
	S3Folder       string      `protobuf:"bytes,2,opt,name=s3_folder,json=s3Folder,proto3" json:"s3_folder,omitempty" firestore:"s3_folder,omitempty"`
	PickerTitle    string      `protobuf:"bytes,3,opt,name=picker_title,json=pickerTitle,proto3" json:"picker_title,omitempty" firestore:"picker_title,omitempty"`
	Origin         *SystemUser `protobuf:"bytes,4,opt,name=origin,proto3" json:"origin,omitempty" firestore:"origin,omitempty"`
}

func (m *FilePickParameter) Reset()         { *m = FilePickParameter{} }
func (m *FilePickParameter) String() string { return proto.CompactTextString(m) }
func (*FilePickParameter) ProtoMessage()    {}
func (*FilePickParameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{6}
}
func (m *FilePickParameter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilePickParameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FilePickParameter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FilePickParameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilePickParameter.Merge(m, src)
}
func (m *FilePickParameter) XXX_Size() int {
	return m.Size()
}
func (m *FilePickParameter) XXX_DiscardUnknown() {
	xxx_messageInfo_FilePickParameter.DiscardUnknown(m)
}

var xxx_messageInfo_FilePickParameter proto.InternalMessageInfo

func (m *FilePickParameter) GetNumberOfImages() uint32 {
	if m != nil {
		return m.NumberOfImages
	}
	return 0
}

func (m *FilePickParameter) GetS3Folder() string {
	if m != nil {
		return m.S3Folder
	}
	return ""
}

func (m *FilePickParameter) GetPickerTitle() string {
	if m != nil {
		return m.PickerTitle
	}
	return ""
}

func (m *FilePickParameter) GetOrigin() *SystemUser {
	if m != nil {
		return m.Origin
	}
	return nil
}

type ImageMetaInfo struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty" firestore:"identifier,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" firestore:"name,omitempty"`
	Width      uint32 `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty" firestore:"width,omitempty"`
	Height     uint32 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty" firestore:"height,omitempty"`
	Type       string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty" firestore:"type,omitempty"`
}

func (m *ImageMetaInfo) Reset()         { *m = ImageMetaInfo{} }
func (m *ImageMetaInfo) String() string { return proto.CompactTextString(m) }
func (*ImageMetaInfo) ProtoMessage()    {}
func (*ImageMetaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{7}
}
func (m *ImageMetaInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageMetaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageMetaInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageMetaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageMetaInfo.Merge(m, src)
}
func (m *ImageMetaInfo) XXX_Size() int {
	return m.Size()
}
func (m *ImageMetaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageMetaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ImageMetaInfo proto.InternalMessageInfo

func (m *ImageMetaInfo) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *ImageMetaInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ImageMetaInfo) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *ImageMetaInfo) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ImageMetaInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type LoginRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty" firestore:"username,omitempty"`
	Email    string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty" firestore:"email,omitempty"`
	Secret   string `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty" firestore:"secret,omitempty"`
}

func (m *LoginRequest) Reset()         { *m = LoginRequest{} }
func (m *LoginRequest) String() string { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()    {}
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{8}
}
func (m *LoginRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRequest.Merge(m, src)
}
func (m *LoginRequest) XXX_Size() int {
	return m.Size()
}
func (m *LoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRequest proto.InternalMessageInfo

func (m *LoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *LoginRequest) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

type RegisterRequest struct {
	Username   string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty" firestore:"username,omitempty"`
	Email      string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty" firestore:"email,omitempty"`
	Secret     string `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty" firestore:"secret,omitempty"`
	FullName   string `protobuf:"bytes,4,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty" firestore:"full_name,omitempty"`
	Profession string `protobuf:"bytes,5,opt,name=profession,proto3" json:"profession,omitempty" firestore:"profession,omitempty"`
}

func (m *RegisterRequest) Reset()         { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()    {}
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{9}
}
func (m *RegisterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRequest.Merge(m, src)
}
func (m *RegisterRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRequest proto.InternalMessageInfo

func (m *RegisterRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RegisterRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *RegisterRequest) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *RegisterRequest) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *RegisterRequest) GetProfession() string {
	if m != nil {
		return m.Profession
	}
	return ""
}

type Role struct {
	ApiPermissions            map[string]*APIPermission `protobuf:"bytes,1,rep,name=api_permissions,json=apiPermissions,proto3" json:"api_permissions,omitempty" firestore:"permissions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AdministrativePermissions []string                  `protobuf:"bytes,2,rep,name=administrative_permissions,json=administrativePermissions,proto3" json:"administrative_permissions,omitempty" firestore:"administrative_permissions,omitempty"`
	LogicExecutions           []string                  `protobuf:"bytes,3,rep,name=logic_executions,json=logicExecutions,proto3" json:"logic_executions,omitempty" firestore:"logic_executions,omitempty"`
	SystemGenerated           bool                      `protobuf:"varint,4,opt,name=system_generated,json=systemGenerated,proto3" json:"system_generated,omitempty" firestore:"system_generated,omitempty"`
	IsAdmin                   bool                      `protobuf:"varint,5,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty" firestore:"is_admin,omitempty"`
}

func (m *Role) Reset()         { *m = Role{} }
func (m *Role) String() string { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()    {}
func (*Role) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{10}
}
func (m *Role) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Role) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Role.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Role) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Role.Merge(m, src)
}
func (m *Role) XXX_Size() int {
	return m.Size()
}
func (m *Role) XXX_DiscardUnknown() {
	xxx_messageInfo_Role.DiscardUnknown(m)
}

var xxx_messageInfo_Role proto.InternalMessageInfo

func (m *Role) GetApiPermissions() map[string]*APIPermission {
	if m != nil {
		return m.ApiPermissions
	}
	return nil
}

func (m *Role) GetAdministrativePermissions() []string {
	if m != nil {
		return m.AdministrativePermissions
	}
	return nil
}

func (m *Role) GetLogicExecutions() []string {
	if m != nil {
		return m.LogicExecutions
	}
	return nil
}

func (m *Role) GetSystemGenerated() bool {
	if m != nil {
		return m.SystemGenerated
	}
	return false
}

func (m *Role) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

type APIPermission struct {
	Read   string `protobuf:"bytes,2,opt,name=read,proto3" json:"read,omitempty" firestore:"read,omitempty"`
	Create string `protobuf:"bytes,3,opt,name=create,proto3" json:"create,omitempty" firestore:"create,omitempty"`
	Update string `protobuf:"bytes,4,opt,name=update,proto3" json:"update,omitempty" firestore:"update,omitempty"`
	Delete string `protobuf:"bytes,5,opt,name=delete,proto3" json:"delete,omitempty" firestore:"delete,omitempty"`
}

func (m *APIPermission) Reset()         { *m = APIPermission{} }
func (m *APIPermission) String() string { return proto.CompactTextString(m) }
func (*APIPermission) ProtoMessage()    {}
func (*APIPermission) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{11}
}
func (m *APIPermission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIPermission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIPermission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIPermission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIPermission.Merge(m, src)
}
func (m *APIPermission) XXX_Size() int {
	return m.Size()
}
func (m *APIPermission) XXX_DiscardUnknown() {
	xxx_messageInfo_APIPermission.DiscardUnknown(m)
}

var xxx_messageInfo_APIPermission proto.InternalMessageInfo

func (m *APIPermission) GetRead() string {
	if m != nil {
		return m.Read
	}
	return ""
}

func (m *APIPermission) GetCreate() string {
	if m != nil {
		return m.Create
	}
	return ""
}

func (m *APIPermission) GetUpdate() string {
	if m != nil {
		return m.Update
	}
	return ""
}

func (m *APIPermission) GetDelete() string {
	if m != nil {
		return m.Delete
	}
	return ""
}

type SystemUser struct {
	XKey             string `protobuf:"bytes,1,opt,name=_key,json=Key,proto3" json:"_key,omitempty" firestore:"_key,omitempty"`
	Id               string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`
	Name             string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" firestore:"name,omitempty"`
	Username         string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty" firestore:"username,omitempty"`
	Email            string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty" firestore:"email,omitempty"`
	Secret           string `protobuf:"bytes,6,opt,name=secret,proto3" json:"secret,omitempty" firestore:"secret,omitempty"`
	Avatar           string `protobuf:"bytes,7,opt,name=avatar,proto3" json:"avatar,omitempty" firestore:"avatar,omitempty"`
	CurrentProjectId string `protobuf:"bytes,8,opt,name=current_project_id,json=currentProjectId,proto3" json:"current_project_id,omitempty" firestore:"current_project_id,omitempty"`
	CreatedAt        string `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" firestore:"created_at,omitempty"`
	UpdatedAt        string `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" firestore:"updated_at,omitempty"`
	ProjectLimit     uint32 `protobuf:"varint,11,opt,name=project_limit,json=projectLimit,proto3" json:"project_limit,omitempty" firestore:"project_limit,omitempty"`
	IsSuperAdmin     bool   `protobuf:"varint,12,opt,name=is_super_admin,json=isSuperAdmin,proto3" json:"is_super_admin,omitempty" firestore:"is_super_admin,omitempty"`
	RefreshToken     string `protobuf:"bytes,13,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty" firestore:"refresh_token,omitempty"`
	AccessToken      string `protobuf:"bytes,14,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty" firestore:"access_token,omitempty"`
}

func (m *SystemUser) Reset()         { *m = SystemUser{} }
func (m *SystemUser) String() string { return proto.CompactTextString(m) }
func (*SystemUser) ProtoMessage()    {}
func (*SystemUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{12}
}
func (m *SystemUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemUser.Merge(m, src)
}
func (m *SystemUser) XXX_Size() int {
	return m.Size()
}
func (m *SystemUser) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemUser.DiscardUnknown(m)
}

var xxx_messageInfo_SystemUser proto.InternalMessageInfo

func (m *SystemUser) GetXKey() string {
	if m != nil {
		return m.XKey
	}
	return ""
}

func (m *SystemUser) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SystemUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SystemUser) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SystemUser) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *SystemUser) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *SystemUser) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *SystemUser) GetCurrentProjectId() string {
	if m != nil {
		return m.CurrentProjectId
	}
	return ""
}

func (m *SystemUser) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *SystemUser) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *SystemUser) GetProjectLimit() uint32 {
	if m != nil {
		return m.ProjectLimit
	}
	return 0
}

func (m *SystemUser) GetIsSuperAdmin() bool {
	if m != nil {
		return m.IsSuperAdmin
	}
	return false
}

func (m *SystemUser) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *SystemUser) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type UserProjects struct {
	User     *SystemUser `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty" firestore:"user,omitempty"`
	Projects []*Project  `protobuf:"bytes,2,rep,name=projects,proto3" json:"projects,omitempty" firestore:"projects,omitempty"`
}

func (m *UserProjects) Reset()         { *m = UserProjects{} }
func (m *UserProjects) String() string { return proto.CompactTextString(m) }
func (*UserProjects) ProtoMessage()    {}
func (*UserProjects) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{13}
}
func (m *UserProjects) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserProjects) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserProjects.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserProjects) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserProjects.Merge(m, src)
}
func (m *UserProjects) XXX_Size() int {
	return m.Size()
}
func (m *UserProjects) XXX_DiscardUnknown() {
	xxx_messageInfo_UserProjects.DiscardUnknown(m)
}

var xxx_messageInfo_UserProjects proto.InternalMessageInfo

func (m *UserProjects) GetUser() *SystemUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserProjects) GetProjects() []*Project {
	if m != nil {
		return m.Projects
	}
	return nil
}

type UserMeta struct {
	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`
	Avatar      string `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty" firestore:"avatar,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" firestore:"name,omitempty"`
	Role        string `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty" firestore:"role,omitempty"`
	Email       string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty" firestore:"email,omitempty"`
	ProjectUser bool   `protobuf:"varint,6,opt,name=project_user,json=projectUser,proto3" json:"project_user,omitempty" firestore:"email,omitempty"`
}

func (m *UserMeta) Reset()         { *m = UserMeta{} }
func (m *UserMeta) String() string { return proto.CompactTextString(m) }
func (*UserMeta) ProtoMessage()    {}
func (*UserMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{14}
}
func (m *UserMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserMeta.Merge(m, src)
}
func (m *UserMeta) XXX_Size() int {
	return m.Size()
}
func (m *UserMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_UserMeta.DiscardUnknown(m)
}

var xxx_messageInfo_UserMeta proto.InternalMessageInfo

func (m *UserMeta) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserMeta) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *UserMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserMeta) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *UserMeta) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserMeta) GetProjectUser() bool {
	if m != nil {
		return m.ProjectUser
	}
	return false
}

type MetaField struct {
	CreatedAt      string    `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" firestore:"created_at,omitempty"`
	UpdatedAt      string    `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" firestore:"updated_at,omitempty"`
	CreatedBy      *UserMeta `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty" firestore:"title,omitempty"`
	LastModifiedBy *UserMeta `protobuf:"bytes,4,opt,name=last_modified_by,json=lastModifiedBy,proto3" json:"last_modified_by,omitempty" firestore:"created_by,omitempty"`
	Status         string    `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty" firestore:"status,omitempty"`
	TenantId       string    `protobuf:"bytes,6,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty" firestore:"tenant_id,omitempty"`
}

func (m *MetaField) Reset()         { *m = MetaField{} }
func (m *MetaField) String() string { return proto.CompactTextString(m) }
func (*MetaField) ProtoMessage()    {}
func (*MetaField) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{15}
}
func (m *MetaField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetaField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetaField.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetaField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaField.Merge(m, src)
}
func (m *MetaField) XXX_Size() int {
	return m.Size()
}
func (m *MetaField) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaField.DiscardUnknown(m)
}

var xxx_messageInfo_MetaField proto.InternalMessageInfo

func (m *MetaField) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *MetaField) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *MetaField) GetCreatedBy() *UserMeta {
	if m != nil {
		return m.CreatedBy
	}
	return nil
}

func (m *MetaField) GetLastModifiedBy() *UserMeta {
	if m != nil {
		return m.LastModifiedBy
	}
	return nil
}

func (m *MetaField) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *MetaField) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

type PreviewMode struct {
	Title  string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty" firestore:"title,omitempty"`
	Icon   string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty" firestore:"icon,omitempty"`
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty" firestore:"status,omitempty"`
	Id     string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`
}

func (m *PreviewMode) Reset()         { *m = PreviewMode{} }
func (m *PreviewMode) String() string { return proto.CompactTextString(m) }
func (*PreviewMode) ProtoMessage()    {}
func (*PreviewMode) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{16}
}
func (m *PreviewMode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreviewMode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreviewMode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreviewMode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreviewMode.Merge(m, src)
}
func (m *PreviewMode) XXX_Size() int {
	return m.Size()
}
func (m *PreviewMode) XXX_DiscardUnknown() {
	xxx_messageInfo_PreviewMode.DiscardUnknown(m)
}

var xxx_messageInfo_PreviewMode proto.InternalMessageInfo

func (m *PreviewMode) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PreviewMode) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *PreviewMode) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PreviewMode) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// user project
type Project struct {
	XKey               string                       `protobuf:"bytes,1,opt,name=_key,json=Key,proto3" json:"_key,omitempty" firestore:"_key,omitempty"`
	Id                 string                       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`
	ProjectName        string                       `protobuf:"bytes,3,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty" firestore:"project_name,omitempty"`
	ProjectDescription string                       `protobuf:"bytes,4,opt,name=project_description,json=projectDescription,proto3" json:"project_description,omitempty" firestore:"project_description,omitempty"`
	Schema             *UserDefinedSchema           `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty" firestore:"schema,omitempty"`
	CreatedAt          string                       `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" firestore:"created_at,omitempty"`
	UpdatedAt          string                       `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" firestore:"updated_at,omitempty"`
	ExpireAt           string                       `protobuf:"bytes,8,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty" firestore:"expire_at,omitempty"`
	Extensions         map[string]*ExtensionDetails `protobuf:"bytes,9,rep,name=extensions,proto3" json:"extensions,omitempty" firestore:"extensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Addons             *AddOnsDetails               `protobuf:"bytes,10,opt,name=addons,proto3" json:"addons,omitempty" firestore:"addons,omitempty"`
	Tokens             []*APIToken                  `protobuf:"bytes,11,rep,name=tokens,proto3" json:"tokens,omitempty" firestore:"tokens,omitempty"`
	Roles              map[string]*Role             `protobuf:"bytes,12,rep,name=roles,proto3" json:"roles,omitempty" firestore:"roles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Driver             *DriverCredentials           `protobuf:"bytes,13,opt,name=driver,proto3" json:"driver,omitempty" firestore:"driver,omitempty"`
	TempBanned         bool                         `protobuf:"varint,14,opt,name=temp_banned,json=tempBanned,proto3" json:"temp_banned,omitempty" firestore:"temp_banned,omitempty"`
	Plan               string                       `protobuf:"bytes,15,opt,name=plan,proto3" json:"plan,omitempty" firestore:"limits,omitempty"`
	TrialEnds          string                       `protobuf:"bytes,16,opt,name=trial_ends,json=trialEnds,proto3" json:"trial_ends,omitempty" firestore:"limits,omitempty"`
}

func (m *Project) Reset()         { *m = Project{} }
func (m *Project) String() string { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()    {}
func (*Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{17}
}
func (m *Project) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Project.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Project.Merge(m, src)
}
func (m *Project) XXX_Size() int {
	return m.Size()
}
func (m *Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Project proto.InternalMessageInfo

func (m *Project) GetXKey() string {
	if m != nil {
		return m.XKey
	}
	return ""
}

func (m *Project) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Project) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *Project) GetProjectDescription() string {
	if m != nil {
		return m.ProjectDescription
	}
	return ""
}

func (m *Project) GetSchema() *UserDefinedSchema {
	if m != nil {
		return m.Schema
	}
	return nil
}

func (m *Project) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Project) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Project) GetExpireAt() string {
	if m != nil {
		return m.ExpireAt
	}
	return ""
}

func (m *Project) GetExtensions() map[string]*ExtensionDetails {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *Project) GetAddons() *AddOnsDetails {
	if m != nil {
		return m.Addons
	}
	return nil
}

func (m *Project) GetTokens() []*APIToken {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *Project) GetRoles() map[string]*Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *Project) GetDriver() *DriverCredentials {
	if m != nil {
		return m.Driver
	}
	return nil
}

func (m *Project) GetTempBanned() bool {
	if m != nil {
		return m.TempBanned
	}
	return false
}

func (m *Project) GetPlan() string {
	if m != nil {
		return m.Plan
	}
	return ""
}

func (m *Project) GetTrialEnds() string {
	if m != nil {
		return m.TrialEnds
	}
	return ""
}

type SupportAndTicket struct {
	XKey             string         `protobuf:"bytes,1,opt,name=_key,json=Key,proto3" json:"_key,omitempty"`
	Id               string         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Type             string         `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	ProjectId        string         `protobuf:"bytes,4,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Resolved         bool           `protobuf:"varint,5,opt,name=resolved,proto3" json:"resolved,omitempty"`
	Title            string         `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	IssueDescription string         `protobuf:"bytes,7,opt,name=issue_description,json=issueDescription,proto3" json:"issue_description,omitempty"`
	CreatedAt        string         `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        string         `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Replies          []*TicketReply `protobuf:"bytes,10,rep,name=replies,proto3" json:"replies,omitempty"`
}

func (m *SupportAndTicket) Reset()         { *m = SupportAndTicket{} }
func (m *SupportAndTicket) String() string { return proto.CompactTextString(m) }
func (*SupportAndTicket) ProtoMessage()    {}
func (*SupportAndTicket) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{18}
}
func (m *SupportAndTicket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SupportAndTicket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SupportAndTicket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SupportAndTicket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupportAndTicket.Merge(m, src)
}
func (m *SupportAndTicket) XXX_Size() int {
	return m.Size()
}
func (m *SupportAndTicket) XXX_DiscardUnknown() {
	xxx_messageInfo_SupportAndTicket.DiscardUnknown(m)
}

var xxx_messageInfo_SupportAndTicket proto.InternalMessageInfo

func (m *SupportAndTicket) GetXKey() string {
	if m != nil {
		return m.XKey
	}
	return ""
}

func (m *SupportAndTicket) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SupportAndTicket) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SupportAndTicket) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *SupportAndTicket) GetResolved() bool {
	if m != nil {
		return m.Resolved
	}
	return false
}

func (m *SupportAndTicket) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SupportAndTicket) GetIssueDescription() string {
	if m != nil {
		return m.IssueDescription
	}
	return ""
}

func (m *SupportAndTicket) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *SupportAndTicket) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *SupportAndTicket) GetReplies() []*TicketReply {
	if m != nil {
		return m.Replies
	}
	return nil
}

type TicketReply struct {
	Description string    `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	User        *UserMeta `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	CreatedAt   string    `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Edited      bool      `protobuf:"varint,4,opt,name=edited,proto3" json:"edited,omitempty"`
}

func (m *TicketReply) Reset()         { *m = TicketReply{} }
func (m *TicketReply) String() string { return proto.CompactTextString(m) }
func (*TicketReply) ProtoMessage()    {}
func (*TicketReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{19}
}
func (m *TicketReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TicketReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TicketReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TicketReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TicketReply.Merge(m, src)
}
func (m *TicketReply) XXX_Size() int {
	return m.Size()
}
func (m *TicketReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TicketReply.DiscardUnknown(m)
}

var xxx_messageInfo_TicketReply proto.InternalMessageInfo

func (m *TicketReply) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TicketReply) GetUser() *UserMeta {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *TicketReply) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *TicketReply) GetEdited() bool {
	if m != nil {
		return m.Edited
	}
	return false
}

type ProjectInvoices struct {
	XKey               string  `protobuf:"bytes,1,opt,name=_key,json=Key,proto3" json:"_key,omitempty" firestore:"_key,omitempty"`
	Id                 string  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`
	Type               string  `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty" firestore:"type,omitempty"`
	ProjectId          string  `protobuf:"bytes,4,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" firestore:"project_id,omitempty"`
	SubscriptionStart  string  `protobuf:"bytes,5,opt,name=subscription_start,json=subscriptionStart,proto3" json:"subscription_start,omitempty" firestore:"subscription_start,omitempty"`
	SubscriptionEnd    string  `protobuf:"bytes,6,opt,name=subscription_end,json=subscriptionEnd,proto3" json:"subscription_end,omitempty" firestore:"subscription_end,omitempty"`
	CouponCode         string  `protobuf:"bytes,7,opt,name=coupon_code,json=couponCode,proto3" json:"coupon_code,omitempty" firestore:"coupon_code,omitempty"`
	DiscountAmount     float64 `protobuf:"fixed64,8,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty" firestore:"discount_amount,omitempty"`
	DiscountPercentage int64   `protobuf:"varint,9,opt,name=discount_percentage,json=discountPercentage,proto3" json:"discount_percentage,omitempty" firestore:"discount_percentage,omitempty"`
	PaymentMethod      string  `protobuf:"bytes,10,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty" firestore:"payment_method,omitempty"`
	Amount             float64 `protobuf:"fixed64,11,opt,name=amount,proto3" json:"amount,omitempty" firestore:"amount,omitempty"`
	Tax                float64 `protobuf:"fixed64,12,opt,name=tax,proto3" json:"tax,omitempty" firestore:"tax,omitempty"`
	PaymentGateway     float64 `protobuf:"fixed64,13,opt,name=payment_gateway,json=paymentGateway,proto3" json:"payment_gateway,omitempty" firestore:"payment_gateway,omitempty"`
}

func (m *ProjectInvoices) Reset()         { *m = ProjectInvoices{} }
func (m *ProjectInvoices) String() string { return proto.CompactTextString(m) }
func (*ProjectInvoices) ProtoMessage()    {}
func (*ProjectInvoices) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{20}
}
func (m *ProjectInvoices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProjectInvoices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProjectInvoices.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProjectInvoices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectInvoices.Merge(m, src)
}
func (m *ProjectInvoices) XXX_Size() int {
	return m.Size()
}
func (m *ProjectInvoices) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectInvoices.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectInvoices proto.InternalMessageInfo

func (m *ProjectInvoices) GetXKey() string {
	if m != nil {
		return m.XKey
	}
	return ""
}

func (m *ProjectInvoices) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProjectInvoices) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ProjectInvoices) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *ProjectInvoices) GetSubscriptionStart() string {
	if m != nil {
		return m.SubscriptionStart
	}
	return ""
}

func (m *ProjectInvoices) GetSubscriptionEnd() string {
	if m != nil {
		return m.SubscriptionEnd
	}
	return ""
}

func (m *ProjectInvoices) GetCouponCode() string {
	if m != nil {
		return m.CouponCode
	}
	return ""
}

func (m *ProjectInvoices) GetDiscountAmount() float64 {
	if m != nil {
		return m.DiscountAmount
	}
	return 0
}

func (m *ProjectInvoices) GetDiscountPercentage() int64 {
	if m != nil {
		return m.DiscountPercentage
	}
	return 0
}

func (m *ProjectInvoices) GetPaymentMethod() string {
	if m != nil {
		return m.PaymentMethod
	}
	return ""
}

func (m *ProjectInvoices) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ProjectInvoices) GetTax() float64 {
	if m != nil {
		return m.Tax
	}
	return 0
}

func (m *ProjectInvoices) GetPaymentGateway() float64 {
	if m != nil {
		return m.PaymentGateway
	}
	return 0
}

type ProjectUsages struct {
	Id     string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`
	XKey   string          `protobuf:"bytes,2,opt,name=_key,json=Key,proto3" json:"_key,omitempty" firestore:"_key,omitempty"`
	Type   string          `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty" firestore:"type,omitempty"`
	Usage  *UsagesTracking `protobuf:"bytes,4,opt,name=usage,proto3" json:"usage,omitempty" firestore:"usage,omitempty"`
	Limits *UsagesTracking `protobuf:"bytes,5,opt,name=limits,proto3" json:"limits,omitempty" firestore:"limits,omitempty"`
}

func (m *ProjectUsages) Reset()         { *m = ProjectUsages{} }
func (m *ProjectUsages) String() string { return proto.CompactTextString(m) }
func (*ProjectUsages) ProtoMessage()    {}
func (*ProjectUsages) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{21}
}
func (m *ProjectUsages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProjectUsages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProjectUsages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProjectUsages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectUsages.Merge(m, src)
}
func (m *ProjectUsages) XXX_Size() int {
	return m.Size()
}
func (m *ProjectUsages) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectUsages.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectUsages proto.InternalMessageInfo

func (m *ProjectUsages) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProjectUsages) GetXKey() string {
	if m != nil {
		return m.XKey
	}
	return ""
}

func (m *ProjectUsages) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ProjectUsages) GetUsage() *UsagesTracking {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *ProjectUsages) GetLimits() *UsagesTracking {
	if m != nil {
		return m.Limits
	}
	return nil
}

type DriverCredentials struct {
	Engine                string `protobuf:"bytes,1,opt,name=engine,proto3" json:"engine,omitempty"`
	Host                  string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port                  string `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	User                  string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	Secret                string `protobuf:"bytes,5,opt,name=secret,proto3" json:"secret,omitempty"`
	Database              string `protobuf:"bytes,6,opt,name=database,proto3" json:"database,omitempty"`
	ProjectId             string `protobuf:"bytes,7,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ProjectCredentialJson string `protobuf:"bytes,8,opt,name=project_credential_json,json=projectCredentialJson,proto3" json:"project_credential_json,omitempty"`
}

func (m *DriverCredentials) Reset()         { *m = DriverCredentials{} }
func (m *DriverCredentials) String() string { return proto.CompactTextString(m) }
func (*DriverCredentials) ProtoMessage()    {}
func (*DriverCredentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{22}
}
func (m *DriverCredentials) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DriverCredentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DriverCredentials.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DriverCredentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriverCredentials.Merge(m, src)
}
func (m *DriverCredentials) XXX_Size() int {
	return m.Size()
}
func (m *DriverCredentials) XXX_DiscardUnknown() {
	xxx_messageInfo_DriverCredentials.DiscardUnknown(m)
}

var xxx_messageInfo_DriverCredentials proto.InternalMessageInfo

func (m *DriverCredentials) GetEngine() string {
	if m != nil {
		return m.Engine
	}
	return ""
}

func (m *DriverCredentials) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *DriverCredentials) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *DriverCredentials) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *DriverCredentials) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *DriverCredentials) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *DriverCredentials) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *DriverCredentials) GetProjectCredentialJson() string {
	if m != nil {
		return m.ProjectCredentialJson
	}
	return ""
}

type APIToken struct {
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty" firestore:"token,omitempty"`
	Role   string `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty" firestore:"role,omitempty"`
	Expire string `protobuf:"bytes,4,opt,name=expire,proto3" json:"expire,omitempty" firestore:"expire,omitempty"`
}

func (m *APIToken) Reset()         { *m = APIToken{} }
func (m *APIToken) String() string { return proto.CompactTextString(m) }
func (*APIToken) ProtoMessage()    {}
func (*APIToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{23}
}
func (m *APIToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIToken.Merge(m, src)
}
func (m *APIToken) XXX_Size() int {
	return m.Size()
}
func (m *APIToken) XXX_DiscardUnknown() {
	xxx_messageInfo_APIToken.DiscardUnknown(m)
}

var xxx_messageInfo_APIToken proto.InternalMessageInfo

func (m *APIToken) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *APIToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *APIToken) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *APIToken) GetExpire() string {
	if m != nil {
		return m.Expire
	}
	return ""
}

type ExtensionDetails struct {
	Name        string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name,omitempty"`
	Description string                `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" firestore:"description,omitempty"`
	Type        string                `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty" firestore:"type,omitempty"`
	Credentials *ThirdPartyCredential `protobuf:"bytes,4,opt,name=credentials,proto3" json:"credentials,omitempty" firestore:"credentials,omitempty"`
}

func (m *ExtensionDetails) Reset()         { *m = ExtensionDetails{} }
func (m *ExtensionDetails) String() string { return proto.CompactTextString(m) }
func (*ExtensionDetails) ProtoMessage()    {}
func (*ExtensionDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{24}
}
func (m *ExtensionDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtensionDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtensionDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtensionDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtensionDetails.Merge(m, src)
}
func (m *ExtensionDetails) XXX_Size() int {
	return m.Size()
}
func (m *ExtensionDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtensionDetails.DiscardUnknown(m)
}

var xxx_messageInfo_ExtensionDetails proto.InternalMessageInfo

func (m *ExtensionDetails) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ExtensionDetails) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ExtensionDetails) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ExtensionDetails) GetCredentials() *ThirdPartyCredential {
	if m != nil {
		return m.Credentials
	}
	return nil
}

type ThirdPartyCredential struct {
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty" firestore:"account_id,omitempty"`
	AccessKey string `protobuf:"bytes,2,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty" firestore:"access_key,omitempty"`
	SecretKey string `protobuf:"bytes,3,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty" firestore:"secret_key,omitempty"`
	ApiKey    string `protobuf:"bytes,4,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty" firestore:"api_key,omitempty"`
	Region    string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty" firestore:"region,omitempty"`
}

func (m *ThirdPartyCredential) Reset()         { *m = ThirdPartyCredential{} }
func (m *ThirdPartyCredential) String() string { return proto.CompactTextString(m) }
func (*ThirdPartyCredential) ProtoMessage()    {}
func (*ThirdPartyCredential) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{25}
}
func (m *ThirdPartyCredential) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThirdPartyCredential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThirdPartyCredential.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThirdPartyCredential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThirdPartyCredential.Merge(m, src)
}
func (m *ThirdPartyCredential) XXX_Size() int {
	return m.Size()
}
func (m *ThirdPartyCredential) XXX_DiscardUnknown() {
	xxx_messageInfo_ThirdPartyCredential.DiscardUnknown(m)
}

var xxx_messageInfo_ThirdPartyCredential proto.InternalMessageInfo

func (m *ThirdPartyCredential) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *ThirdPartyCredential) GetAccessKey() string {
	if m != nil {
		return m.AccessKey
	}
	return ""
}

func (m *ThirdPartyCredential) GetSecretKey() string {
	if m != nil {
		return m.SecretKey
	}
	return ""
}

func (m *ThirdPartyCredential) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *ThirdPartyCredential) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

type AddOnsDetails struct {
	Locals             []string              `protobuf:"bytes,1,rep,name=locals,proto3" json:"locals,omitempty" firestore:"locals,omitempty"`
	SystemGraphqlHooks bool                  `protobuf:"varint,2,opt,name=system_graphql_hooks,json=systemGraphqlHooks,proto3" json:"system_graphql_hooks,omitempty" firestore:"system_graphql_hooks,omitempty"`
	RevisionHistory    bool                  `protobuf:"varint,3,opt,name=revision_history,json=revisionHistory,proto3" json:"revision_history,omitempty" firestore:"revision_history,omitempty"`
	Auth               *AuthenticationAddOns `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty" firestore:"auth,omitempty"`
}

func (m *AddOnsDetails) Reset()         { *m = AddOnsDetails{} }
func (m *AddOnsDetails) String() string { return proto.CompactTextString(m) }
func (*AddOnsDetails) ProtoMessage()    {}
func (*AddOnsDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{26}
}
func (m *AddOnsDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddOnsDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddOnsDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddOnsDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddOnsDetails.Merge(m, src)
}
func (m *AddOnsDetails) XXX_Size() int {
	return m.Size()
}
func (m *AddOnsDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_AddOnsDetails.DiscardUnknown(m)
}

var xxx_messageInfo_AddOnsDetails proto.InternalMessageInfo

func (m *AddOnsDetails) GetLocals() []string {
	if m != nil {
		return m.Locals
	}
	return nil
}

func (m *AddOnsDetails) GetSystemGraphqlHooks() bool {
	if m != nil {
		return m.SystemGraphqlHooks
	}
	return false
}

func (m *AddOnsDetails) GetRevisionHistory() bool {
	if m != nil {
		return m.RevisionHistory
	}
	return false
}

func (m *AddOnsDetails) GetAuth() *AuthenticationAddOns {
	if m != nil {
		return m.Auth
	}
	return nil
}

type AuthenticationAddOns struct {
	Type          string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" firestore:"type,omitempty"`
	AuthUserRoles string `protobuf:"bytes,2,opt,name=auth_user_roles,json=authUserRoles,proto3" json:"auth_user_roles,omitempty" firestore:"auth_user_roles,omitempty"`
	Disabled      bool   `protobuf:"varint,3,opt,name=disabled,proto3" json:"disabled,omitempty" firestore:"disabled,omitempty"`
}

func (m *AuthenticationAddOns) Reset()         { *m = AuthenticationAddOns{} }
func (m *AuthenticationAddOns) String() string { return proto.CompactTextString(m) }
func (*AuthenticationAddOns) ProtoMessage()    {}
func (*AuthenticationAddOns) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{27}
}
func (m *AuthenticationAddOns) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthenticationAddOns) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthenticationAddOns.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthenticationAddOns) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthenticationAddOns.Merge(m, src)
}
func (m *AuthenticationAddOns) XXX_Size() int {
	return m.Size()
}
func (m *AuthenticationAddOns) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthenticationAddOns.DiscardUnknown(m)
}

var xxx_messageInfo_AuthenticationAddOns proto.InternalMessageInfo

func (m *AuthenticationAddOns) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AuthenticationAddOns) GetAuthUserRoles() string {
	if m != nil {
		return m.AuthUserRoles
	}
	return ""
}

func (m *AuthenticationAddOns) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

type AccountUsage struct {
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`
	XKey            string                 `protobuf:"bytes,2,opt,name=_key,json=Key,proto3" json:"_key,omitempty" firestore:"_key,omitempty"`
	Type            string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty" firestore:"type,omitempty"`
	Subscriptions   []*MonthlySubscription `protobuf:"bytes,4,rep,name=subscriptions,proto3" json:"subscriptions,omitempty" firestore:"subscriptions,omitempty"`
	Limits          *UsagesTracking        `protobuf:"bytes,5,opt,name=limits,proto3" json:"limits,omitempty" firestore:"limits,omitempty"`
	Usages          []*UsagesTracking      `protobuf:"bytes,6,rep,name=usages,proto3" json:"usages,omitempty" firestore:"usages,omitempty"`
	NumberOfProject uint32                 `protobuf:"varint,7,opt,name=number_of_project,json=numberOfProject,proto3" json:"number_of_project,omitempty" firestore:"number_of_project,omitempty"`
}

func (m *AccountUsage) Reset()         { *m = AccountUsage{} }
func (m *AccountUsage) String() string { return proto.CompactTextString(m) }
func (*AccountUsage) ProtoMessage()    {}
func (*AccountUsage) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{28}
}
func (m *AccountUsage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountUsage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountUsage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountUsage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountUsage.Merge(m, src)
}
func (m *AccountUsage) XXX_Size() int {
	return m.Size()
}
func (m *AccountUsage) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountUsage.DiscardUnknown(m)
}

var xxx_messageInfo_AccountUsage proto.InternalMessageInfo

func (m *AccountUsage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AccountUsage) GetXKey() string {
	if m != nil {
		return m.XKey
	}
	return ""
}

func (m *AccountUsage) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AccountUsage) GetSubscriptions() []*MonthlySubscription {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func (m *AccountUsage) GetLimits() *UsagesTracking {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *AccountUsage) GetUsages() []*UsagesTracking {
	if m != nil {
		return m.Usages
	}
	return nil
}

func (m *AccountUsage) GetNumberOfProject() uint32 {
	if m != nil {
		return m.NumberOfProject
	}
	return 0
}

type MonthlySubscription struct {
	StartDate          string             `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty" firestore:"start_date,omitempty"`
	EndDate            string             `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty" firestore:"end_date,omitempty"`
	SubscriptionStatus string             `protobuf:"bytes,3,opt,name=subscription_status,json=subscriptionStatus,proto3" json:"subscription_status,omitempty" firestore:"subscription_status,omitempty"`
	PaymentStatus      string             `protobuf:"bytes,4,opt,name=payment_status,json=paymentStatus,proto3" json:"payment_status,omitempty" firestore:"payment_status,omitempty"`
	SubsData           *CommonPaymentData `protobuf:"bytes,5,opt,name=subs_data,json=subsData,proto3" json:"subs_data,omitempty" firestore:"subs_data,omitempty"`
}

func (m *MonthlySubscription) Reset()         { *m = MonthlySubscription{} }
func (m *MonthlySubscription) String() string { return proto.CompactTextString(m) }
func (*MonthlySubscription) ProtoMessage()    {}
func (*MonthlySubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{29}
}
func (m *MonthlySubscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MonthlySubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MonthlySubscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MonthlySubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonthlySubscription.Merge(m, src)
}
func (m *MonthlySubscription) XXX_Size() int {
	return m.Size()
}
func (m *MonthlySubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_MonthlySubscription.DiscardUnknown(m)
}

var xxx_messageInfo_MonthlySubscription proto.InternalMessageInfo

func (m *MonthlySubscription) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *MonthlySubscription) GetEndDate() string {
	if m != nil {
		return m.EndDate
	}
	return ""
}

func (m *MonthlySubscription) GetSubscriptionStatus() string {
	if m != nil {
		return m.SubscriptionStatus
	}
	return ""
}

func (m *MonthlySubscription) GetPaymentStatus() string {
	if m != nil {
		return m.PaymentStatus
	}
	return ""
}

func (m *MonthlySubscription) GetSubsData() *CommonPaymentData {
	if m != nil {
		return m.SubsData
	}
	return nil
}

type CommonPaymentData struct {
	Id             string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" firestore:"checkout_id,omitempty"`
	CheckoutSystem string  `protobuf:"bytes,2,opt,name=checkout_system,json=checkoutSystem,proto3" json:"checkout_system,omitempty" firestore:"checkout_system,omitempty"`
	PlanCode       string  `protobuf:"bytes,3,opt,name=plan_code,json=planCode,proto3" json:"plan_code,omitempty" firestore:"plan_code,omitempty"`
	ProductAmount  float64 `protobuf:"fixed64,4,opt,name=product_amount,json=productAmount,proto3" json:"product_amount,omitempty" firestore:"product_amount,omitempty"`
	DiscountCode   string  `protobuf:"bytes,5,opt,name=discount_code,json=discountCode,proto3" json:"discount_code,omitempty" firestore:"discount_code,omitempty"`
	Quantity       uint32  `protobuf:"varint,6,opt,name=quantity,proto3" json:"quantity,omitempty" firestore:"quantity,omitempty"`
	PaymentMethod  string  `protobuf:"bytes,7,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty" firestore:"payment_method,omitempty"`
	Earning        float64 `protobuf:"fixed64,8,opt,name=earning,proto3" json:"earning,omitempty" firestore:"earning,omitempty"`
	Fee            float64 `protobuf:"fixed64,9,opt,name=fee,proto3" json:"fee,omitempty" firestore:"fee,omitempty"`
	Tax            float64 `protobuf:"fixed64,10,opt,name=tax,proto3" json:"tax,omitempty" firestore:"tax,omitempty"`
}

func (m *CommonPaymentData) Reset()         { *m = CommonPaymentData{} }
func (m *CommonPaymentData) String() string { return proto.CompactTextString(m) }
func (*CommonPaymentData) ProtoMessage()    {}
func (*CommonPaymentData) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{30}
}
func (m *CommonPaymentData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonPaymentData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonPaymentData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonPaymentData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonPaymentData.Merge(m, src)
}
func (m *CommonPaymentData) XXX_Size() int {
	return m.Size()
}
func (m *CommonPaymentData) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonPaymentData.DiscardUnknown(m)
}

var xxx_messageInfo_CommonPaymentData proto.InternalMessageInfo

func (m *CommonPaymentData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CommonPaymentData) GetCheckoutSystem() string {
	if m != nil {
		return m.CheckoutSystem
	}
	return ""
}

func (m *CommonPaymentData) GetPlanCode() string {
	if m != nil {
		return m.PlanCode
	}
	return ""
}

func (m *CommonPaymentData) GetProductAmount() float64 {
	if m != nil {
		return m.ProductAmount
	}
	return 0
}

func (m *CommonPaymentData) GetDiscountCode() string {
	if m != nil {
		return m.DiscountCode
	}
	return ""
}

func (m *CommonPaymentData) GetQuantity() uint32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *CommonPaymentData) GetPaymentMethod() string {
	if m != nil {
		return m.PaymentMethod
	}
	return ""
}

func (m *CommonPaymentData) GetEarning() float64 {
	if m != nil {
		return m.Earning
	}
	return 0
}

func (m *CommonPaymentData) GetFee() float64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *CommonPaymentData) GetTax() float64 {
	if m != nil {
		return m.Tax
	}
	return 0
}

type UsagesTracking struct {
	ApiCalls        uint32  `protobuf:"varint,4,opt,name=api_calls,json=apiCalls,proto3" json:"api_calls,omitempty" firestore:"api_calls,omitempty"`
	ApiBandwidth    float64 `protobuf:"fixed64,5,opt,name=api_bandwidth,json=apiBandwidth,proto3" json:"api_bandwidth,omitempty" firestore:"api_bandwidth,omitempty"`
	MediaStorage    float64 `protobuf:"fixed64,6,opt,name=media_storage,json=mediaStorage,proto3" json:"media_storage,omitempty" firestore:"media_storage,omitempty"`
	MediaBandwidth  float64 `protobuf:"fixed64,7,opt,name=media_bandwidth,json=mediaBandwidth,proto3" json:"media_bandwidth,omitempty" firestore:"media_bandwidth,omitempty"`
	NumberOfMedia   uint32  `protobuf:"varint,8,opt,name=number_of_media,json=numberOfMedia,proto3" json:"number_of_media,omitempty" firestore:"number_of_media,omitempty"`
	NumberOfRecords uint32  `protobuf:"varint,9,opt,name=number_of_records,json=numberOfRecords,proto3" json:"number_of_records,omitempty" firestore:"number_of_records,omitempty"`
}

func (m *UsagesTracking) Reset()         { *m = UsagesTracking{} }
func (m *UsagesTracking) String() string { return proto.CompactTextString(m) }
func (*UsagesTracking) ProtoMessage()    {}
func (*UsagesTracking) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{31}
}
func (m *UsagesTracking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UsagesTracking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UsagesTracking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UsagesTracking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsagesTracking.Merge(m, src)
}
func (m *UsagesTracking) XXX_Size() int {
	return m.Size()
}
func (m *UsagesTracking) XXX_DiscardUnknown() {
	xxx_messageInfo_UsagesTracking.DiscardUnknown(m)
}

var xxx_messageInfo_UsagesTracking proto.InternalMessageInfo

func (m *UsagesTracking) GetApiCalls() uint32 {
	if m != nil {
		return m.ApiCalls
	}
	return 0
}

func (m *UsagesTracking) GetApiBandwidth() float64 {
	if m != nil {
		return m.ApiBandwidth
	}
	return 0
}

func (m *UsagesTracking) GetMediaStorage() float64 {
	if m != nil {
		return m.MediaStorage
	}
	return 0
}

func (m *UsagesTracking) GetMediaBandwidth() float64 {
	if m != nil {
		return m.MediaBandwidth
	}
	return 0
}

func (m *UsagesTracking) GetNumberOfMedia() uint32 {
	if m != nil {
		return m.NumberOfMedia
	}
	return 0
}

func (m *UsagesTracking) GetNumberOfRecords() uint32 {
	if m != nil {
		return m.NumberOfRecords
	}
	return 0
}

type UserDefinedSchema struct {
	Models    []*ModelType     `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty" firestore:"models,omitempty"`
	Functions []*CloudFunction `protobuf:"bytes,2,rep,name=functions,proto3" json:"functions,omitempty" firestore:"functions,omitempty"`
}

func (m *UserDefinedSchema) Reset()         { *m = UserDefinedSchema{} }
func (m *UserDefinedSchema) String() string { return proto.CompactTextString(m) }
func (*UserDefinedSchema) ProtoMessage()    {}
func (*UserDefinedSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{32}
}
func (m *UserDefinedSchema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserDefinedSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserDefinedSchema.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserDefinedSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDefinedSchema.Merge(m, src)
}
func (m *UserDefinedSchema) XXX_Size() int {
	return m.Size()
}
func (m *UserDefinedSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDefinedSchema.DiscardUnknown(m)
}

var xxx_messageInfo_UserDefinedSchema proto.InternalMessageInfo

func (m *UserDefinedSchema) GetModels() []*ModelType {
	if m != nil {
		return m.Models
	}
	return nil
}

func (m *UserDefinedSchema) GetFunctions() []*CloudFunction {
	if m != nil {
		return m.Functions
	}
	return nil
}

type ModelType struct {
	Name            string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name,omitempty"`
	Fields          []*FieldInfo      `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty" firestore:"fields,omitempty"`
	Connections     []*ConnectionType `protobuf:"bytes,3,rep,name=connections,proto3" json:"connections,omitempty" firestore:"connections,omitempty"`
	HookIds         []string          `protobuf:"bytes,4,rep,name=hook_ids,json=hookIds,proto3" json:"hook_ids,omitempty" firestore:"hook_ids,omitempty"`
	Locals          []string          `protobuf:"bytes,5,rep,name=locals,proto3" json:"locals,omitempty" firestore:"locals,omitempty"`
	RepeatedGroups  []string          `protobuf:"bytes,6,rep,name=repeated_groups,json=repeatedGroups,proto3" json:"repeated_groups,omitempty" firestore:"locals,omitempty"`
	SystemGenerated bool              `protobuf:"varint,7,opt,name=system_generated,json=systemGenerated,proto3" json:"system_generated,omitempty" firestore:"system_generated,omitempty"`
}

func (m *ModelType) Reset()         { *m = ModelType{} }
func (m *ModelType) String() string { return proto.CompactTextString(m) }
func (*ModelType) ProtoMessage()    {}
func (*ModelType) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{33}
}
func (m *ModelType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModelType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModelType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelType.Merge(m, src)
}
func (m *ModelType) XXX_Size() int {
	return m.Size()
}
func (m *ModelType) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelType.DiscardUnknown(m)
}

var xxx_messageInfo_ModelType proto.InternalMessageInfo

func (m *ModelType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ModelType) GetFields() []*FieldInfo {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ModelType) GetConnections() []*ConnectionType {
	if m != nil {
		return m.Connections
	}
	return nil
}

func (m *ModelType) GetHookIds() []string {
	if m != nil {
		return m.HookIds
	}
	return nil
}

func (m *ModelType) GetLocals() []string {
	if m != nil {
		return m.Locals
	}
	return nil
}

func (m *ModelType) GetRepeatedGroups() []string {
	if m != nil {
		return m.RepeatedGroups
	}
	return nil
}

func (m *ModelType) GetSystemGenerated() bool {
	if m != nil {
		return m.SystemGenerated
	}
	return false
}

type CloudFunction struct {
	Id                string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`
	Name              string                            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" firestore:"name,omitempty"`
	Request           *CloudFunctionRequestResponseType `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty" firestore:"request,omitempty"`
	Response          *CloudFunctionRequestResponseType `protobuf:"bytes,4,opt,name=response,proto3" json:"response,omitempty" firestore:"response,omitempty"`
	FunctionProvider  string                            `protobuf:"bytes,5,opt,name=function_provider,json=functionProvider,proto3" json:"function_provider,omitempty" firestore:"function_provider,omitempty"`
	FunctionConnected bool                              `protobuf:"varint,6,opt,name=function_connected,json=functionConnected,proto3" json:"function_connected,omitempty" firestore:"function_connected,omitempty"`
	UpdatedAt         string                            `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" firestore:"updated_at,omitempty"`
	CreatedAt         string                            `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" firestore:"created_at,omitempty"`
	ProviderConfig    *FunctionProviderConfig           `protobuf:"bytes,9,opt,name=provider_config,json=providerConfig,proto3" json:"provider_config,omitempty" firestore:"provider_config,omitempty"`
	Description       string                            `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty" firestore:"description,omitempty"`
}

func (m *CloudFunction) Reset()         { *m = CloudFunction{} }
func (m *CloudFunction) String() string { return proto.CompactTextString(m) }
func (*CloudFunction) ProtoMessage()    {}
func (*CloudFunction) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{34}
}
func (m *CloudFunction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudFunction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudFunction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudFunction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudFunction.Merge(m, src)
}
func (m *CloudFunction) XXX_Size() int {
	return m.Size()
}
func (m *CloudFunction) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudFunction.DiscardUnknown(m)
}

var xxx_messageInfo_CloudFunction proto.InternalMessageInfo

func (m *CloudFunction) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CloudFunction) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CloudFunction) GetRequest() *CloudFunctionRequestResponseType {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *CloudFunction) GetResponse() *CloudFunctionRequestResponseType {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *CloudFunction) GetFunctionProvider() string {
	if m != nil {
		return m.FunctionProvider
	}
	return ""
}

func (m *CloudFunction) GetFunctionConnected() bool {
	if m != nil {
		return m.FunctionConnected
	}
	return false
}

func (m *CloudFunction) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *CloudFunction) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *CloudFunction) GetProviderConfig() *FunctionProviderConfig {
	if m != nil {
		return m.ProviderConfig
	}
	return nil
}

func (m *CloudFunction) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type FunctionProviderConfig struct {
	RemoteFunctionName string                  `protobuf:"bytes,1,opt,name=remote_function_name,json=remoteFunctionName,proto3" json:"remote_function_name,omitempty" firestore:"remote_function_name,omitempty"`
	Region             string                  `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty" firestore:"region,omitempty"`
	EnvVars            []*FunctionEnvVariables `protobuf:"bytes,3,rep,name=env_vars,json=envVars,proto3" json:"env_vars,omitempty" firestore:"env_vars,omitempty"`
	Configs            *FunctionInternalConfig `protobuf:"bytes,4,opt,name=configs,proto3" json:"configs,omitempty" firestore:"configs,omitempty"`
}

func (m *FunctionProviderConfig) Reset()         { *m = FunctionProviderConfig{} }
func (m *FunctionProviderConfig) String() string { return proto.CompactTextString(m) }
func (*FunctionProviderConfig) ProtoMessage()    {}
func (*FunctionProviderConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{35}
}
func (m *FunctionProviderConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FunctionProviderConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FunctionProviderConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FunctionProviderConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FunctionProviderConfig.Merge(m, src)
}
func (m *FunctionProviderConfig) XXX_Size() int {
	return m.Size()
}
func (m *FunctionProviderConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_FunctionProviderConfig.DiscardUnknown(m)
}

var xxx_messageInfo_FunctionProviderConfig proto.InternalMessageInfo

func (m *FunctionProviderConfig) GetRemoteFunctionName() string {
	if m != nil {
		return m.RemoteFunctionName
	}
	return ""
}

func (m *FunctionProviderConfig) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *FunctionProviderConfig) GetEnvVars() []*FunctionEnvVariables {
	if m != nil {
		return m.EnvVars
	}
	return nil
}

func (m *FunctionProviderConfig) GetConfigs() *FunctionInternalConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

type FunctionEnvVariables struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty" firestore:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" firestore:"value,omitempty"`
}

func (m *FunctionEnvVariables) Reset()         { *m = FunctionEnvVariables{} }
func (m *FunctionEnvVariables) String() string { return proto.CompactTextString(m) }
func (*FunctionEnvVariables) ProtoMessage()    {}
func (*FunctionEnvVariables) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{36}
}
func (m *FunctionEnvVariables) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FunctionEnvVariables) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FunctionEnvVariables.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FunctionEnvVariables) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FunctionEnvVariables.Merge(m, src)
}
func (m *FunctionEnvVariables) XXX_Size() int {
	return m.Size()
}
func (m *FunctionEnvVariables) XXX_DiscardUnknown() {
	xxx_messageInfo_FunctionEnvVariables.DiscardUnknown(m)
}

var xxx_messageInfo_FunctionEnvVariables proto.InternalMessageInfo

func (m *FunctionEnvVariables) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *FunctionEnvVariables) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type CloudFunctionRequestResponseType struct {
	Model  string       `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty" firestore:"model,omitempty"`
	Params []*FieldInfo `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty" firestore:"params,omitempty"`
}

func (m *CloudFunctionRequestResponseType) Reset()         { *m = CloudFunctionRequestResponseType{} }
func (m *CloudFunctionRequestResponseType) String() string { return proto.CompactTextString(m) }
func (*CloudFunctionRequestResponseType) ProtoMessage()    {}
func (*CloudFunctionRequestResponseType) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{37}
}
func (m *CloudFunctionRequestResponseType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudFunctionRequestResponseType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudFunctionRequestResponseType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudFunctionRequestResponseType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudFunctionRequestResponseType.Merge(m, src)
}
func (m *CloudFunctionRequestResponseType) XXX_Size() int {
	return m.Size()
}
func (m *CloudFunctionRequestResponseType) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudFunctionRequestResponseType.DiscardUnknown(m)
}

var xxx_messageInfo_CloudFunctionRequestResponseType proto.InternalMessageInfo

func (m *CloudFunctionRequestResponseType) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *CloudFunctionRequestResponseType) GetParams() []*FieldInfo {
	if m != nil {
		return m.Params
	}
	return nil
}

type FunctionInternalConfig struct {
	Runtime string `protobuf:"bytes,1,opt,name=runtime,proto3" json:"runtime,omitempty" firestore:"runtime,omitempty"`
	Memory  int64  `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty" firestore:"memory,omitempty"`
	Handler string `protobuf:"bytes,3,opt,name=handler,proto3" json:"handler,omitempty" firestore:"handler,omitempty"`
	TimeOut int64  `protobuf:"varint,4,opt,name=time_out,json=timeOut,proto3" json:"time_out,omitempty" firestore:"time_out,omitempty"`
}

func (m *FunctionInternalConfig) Reset()         { *m = FunctionInternalConfig{} }
func (m *FunctionInternalConfig) String() string { return proto.CompactTextString(m) }
func (*FunctionInternalConfig) ProtoMessage()    {}
func (*FunctionInternalConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{38}
}
func (m *FunctionInternalConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FunctionInternalConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FunctionInternalConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FunctionInternalConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FunctionInternalConfig.Merge(m, src)
}
func (m *FunctionInternalConfig) XXX_Size() int {
	return m.Size()
}
func (m *FunctionInternalConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_FunctionInternalConfig.DiscardUnknown(m)
}

var xxx_messageInfo_FunctionInternalConfig proto.InternalMessageInfo

func (m *FunctionInternalConfig) GetRuntime() string {
	if m != nil {
		return m.Runtime
	}
	return ""
}

func (m *FunctionInternalConfig) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *FunctionInternalConfig) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

func (m *FunctionInternalConfig) GetTimeOut() int64 {
	if m != nil {
		return m.TimeOut
	}
	return 0
}

type Validation struct {
	Required          bool      `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty" firestore:"required,omitempty"`
	Hide              bool      `protobuf:"varint,2,opt,name=hide,proto3" json:"hide,omitempty" firestore:"hide,omitempty"`
	AsTitle           bool      `protobuf:"varint,3,opt,name=as_title,json=asTitle,proto3" json:"as_title,omitempty" firestore:"as_title,omitempty"`
	Locals            []string  `protobuf:"bytes,4,rep,name=locals,proto3" json:"locals,omitempty" firestore:"locals,omitempty"`
	Unique            bool      `protobuf:"varint,5,opt,name=unique,proto3" json:"unique,omitempty" firestore:"unique,omitempty"`
	CharLimit         []uint32  `protobuf:"varint,6,rep,packed,name=char_limit,json=charLimit,proto3" json:"char_limit,omitempty" firestore:"char_limit,omitempty"`
	IntRangeLimit     []uint32  `protobuf:"varint,10,rep,packed,name=int_range_limit,json=intRangeLimit,proto3" json:"int_range_limit,omitempty" firestore:"int_range_limit,omitempty"`
	DoubleRangeLimit  []float64 `protobuf:"fixed64,11,rep,packed,name=double_range_limit,json=doubleRangeLimit,proto3" json:"double_range_limit,omitempty" firestore:"double_range_limit,omitempty"`
	IsEmail           bool      `protobuf:"varint,7,opt,name=is_email,json=isEmail,proto3" json:"is_email,omitempty" firestore:"is_email,omitempty"`
	Placeholder       string    `protobuf:"bytes,8,opt,name=placeholder,proto3" json:"placeholder,omitempty" firestore:"placeholder,omitempty"`
	FixedListElements []string  `protobuf:"bytes,9,rep,name=fixed_list_elements,json=fixedListElements,proto3" json:"fixed_list_elements,omitempty" firestore:"fixed_list_elements,omitempty"`
	IsMultiChoice     bool      `protobuf:"varint,12,opt,name=is_multi_choice,json=isMultiChoice,proto3" json:"is_multi_choice,omitempty" firestore:"is_multi_choice,omitempty"`
	ListType          string    `protobuf:"bytes,13,opt,name=list_type,json=listType,proto3" json:"list_type,omitempty" firestore:"list_type,omitempty"`
	IsGallery         bool      `protobuf:"varint,14,opt,name=is_gallery,json=isGallery,proto3" json:"is_gallery,omitempty" firestore:"is_gallery,omitempty"`
	IsPassword        bool      `protobuf:"varint,15,opt,name=is_password,json=isPassword,proto3" json:"is_password,omitempty" firestore:"is_gallery,omitempty"`
	IsSystemRole      bool      `protobuf:"varint,16,opt,name=is_system_role,json=isSystemRole,proto3" json:"is_system_role,omitempty" firestore:"is_gallery,omitempty"`
}

func (m *Validation) Reset()         { *m = Validation{} }
func (m *Validation) String() string { return proto.CompactTextString(m) }
func (*Validation) ProtoMessage()    {}
func (*Validation) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{39}
}
func (m *Validation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validation.Merge(m, src)
}
func (m *Validation) XXX_Size() int {
	return m.Size()
}
func (m *Validation) XXX_DiscardUnknown() {
	xxx_messageInfo_Validation.DiscardUnknown(m)
}

var xxx_messageInfo_Validation proto.InternalMessageInfo

func (m *Validation) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *Validation) GetHide() bool {
	if m != nil {
		return m.Hide
	}
	return false
}

func (m *Validation) GetAsTitle() bool {
	if m != nil {
		return m.AsTitle
	}
	return false
}

func (m *Validation) GetLocals() []string {
	if m != nil {
		return m.Locals
	}
	return nil
}

func (m *Validation) GetUnique() bool {
	if m != nil {
		return m.Unique
	}
	return false
}

func (m *Validation) GetCharLimit() []uint32 {
	if m != nil {
		return m.CharLimit
	}
	return nil
}

func (m *Validation) GetIntRangeLimit() []uint32 {
	if m != nil {
		return m.IntRangeLimit
	}
	return nil
}

func (m *Validation) GetDoubleRangeLimit() []float64 {
	if m != nil {
		return m.DoubleRangeLimit
	}
	return nil
}

func (m *Validation) GetIsEmail() bool {
	if m != nil {
		return m.IsEmail
	}
	return false
}

func (m *Validation) GetPlaceholder() string {
	if m != nil {
		return m.Placeholder
	}
	return ""
}

func (m *Validation) GetFixedListElements() []string {
	if m != nil {
		return m.FixedListElements
	}
	return nil
}

func (m *Validation) GetIsMultiChoice() bool {
	if m != nil {
		return m.IsMultiChoice
	}
	return false
}

func (m *Validation) GetListType() string {
	if m != nil {
		return m.ListType
	}
	return ""
}

func (m *Validation) GetIsGallery() bool {
	if m != nil {
		return m.IsGallery
	}
	return false
}

func (m *Validation) GetIsPassword() bool {
	if m != nil {
		return m.IsPassword
	}
	return false
}

func (m *Validation) GetIsSystemRole() bool {
	if m != nil {
		return m.IsSystemRole
	}
	return false
}

type FieldInfo struct {
	Identifier              string          `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty" firestore:"identifier,omitempty"`
	Description             string          `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" firestore:"description,omitempty"`
	InputType               string          `protobuf:"bytes,3,opt,name=input_type,json=inputType,proto3" json:"input_type,omitempty" firestore:"input_type,omitempty"`
	FieldType               string          `protobuf:"bytes,4,opt,name=field_type,json=fieldType,proto3" json:"field_type,omitempty" firestore:"field_type,omitempty"`
	SubFieldInfo            []*SubFieldInfo `protobuf:"bytes,5,rep,name=sub_field_info,json=subFieldInfo,proto3" json:"sub_field_info,omitempty" firestore:"modules,omitempty"`
	Validation              *Validation     `protobuf:"bytes,6,opt,name=validation,proto3" json:"validation,omitempty" firestore:"validation,omitempty"`
	Serial                  uint32          `protobuf:"varint,7,opt,name=serial,proto3" json:"serial,omitempty" firestore:"serial,omitempty"`
	Label                   string          `protobuf:"bytes,8,opt,name=label,proto3" json:"label,omitempty" firestore:"label,omitempty"`
	SystemGenerated         bool            `protobuf:"varint,9,opt,name=system_generated,json=systemGenerated,proto3" json:"system_generated,omitempty" firestore:"system_generated,omitempty"`
	RepeatedGroupIdentifier string          `protobuf:"bytes,10,opt,name=repeated_group_identifier,json=repeatedGroupIdentifier,proto3" json:"repeated_group_identifier,omitempty" firestore:"repeated_group_identifier,omitempty"`
}

func (m *FieldInfo) Reset()         { *m = FieldInfo{} }
func (m *FieldInfo) String() string { return proto.CompactTextString(m) }
func (*FieldInfo) ProtoMessage()    {}
func (*FieldInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{40}
}
func (m *FieldInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FieldInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FieldInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldInfo.Merge(m, src)
}
func (m *FieldInfo) XXX_Size() int {
	return m.Size()
}
func (m *FieldInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FieldInfo proto.InternalMessageInfo

func (m *FieldInfo) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *FieldInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *FieldInfo) GetInputType() string {
	if m != nil {
		return m.InputType
	}
	return ""
}

func (m *FieldInfo) GetFieldType() string {
	if m != nil {
		return m.FieldType
	}
	return ""
}

func (m *FieldInfo) GetSubFieldInfo() []*SubFieldInfo {
	if m != nil {
		return m.SubFieldInfo
	}
	return nil
}

func (m *FieldInfo) GetValidation() *Validation {
	if m != nil {
		return m.Validation
	}
	return nil
}

func (m *FieldInfo) GetSerial() uint32 {
	if m != nil {
		return m.Serial
	}
	return 0
}

func (m *FieldInfo) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *FieldInfo) GetSystemGenerated() bool {
	if m != nil {
		return m.SystemGenerated
	}
	return false
}

func (m *FieldInfo) GetRepeatedGroupIdentifier() string {
	if m != nil {
		return m.RepeatedGroupIdentifier
	}
	return ""
}

type SubFieldInfo struct {
	Identifier      string      `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty" firestore:"identifier,omitempty"`
	Description     string      `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" firestore:"description,omitempty"`
	InputType       string      `protobuf:"bytes,3,opt,name=input_type,json=inputType,proto3" json:"input_type,omitempty" firestore:"input_type,omitempty"`
	FieldType       string      `protobuf:"bytes,4,opt,name=field_type,json=fieldType,proto3" json:"field_type,omitempty" firestore:"field_type,omitempty"`
	Validation      *Validation `protobuf:"bytes,5,opt,name=validation,proto3" json:"validation,omitempty" firestore:"validation,omitempty"`
	Serial          uint32      `protobuf:"varint,6,opt,name=serial,proto3" json:"serial,omitempty" firestore:"serial,omitempty"`
	SystemGenerated bool        `protobuf:"varint,7,opt,name=system_generated,json=systemGenerated,proto3" json:"system_generated,omitempty" firestore:"system_generated,omitempty"`
	Label           string      `protobuf:"bytes,8,opt,name=label,proto3" json:"label,omitempty" firestore:"label,omitempty"`
}

func (m *SubFieldInfo) Reset()         { *m = SubFieldInfo{} }
func (m *SubFieldInfo) String() string { return proto.CompactTextString(m) }
func (*SubFieldInfo) ProtoMessage()    {}
func (*SubFieldInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{41}
}
func (m *SubFieldInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubFieldInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubFieldInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubFieldInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubFieldInfo.Merge(m, src)
}
func (m *SubFieldInfo) XXX_Size() int {
	return m.Size()
}
func (m *SubFieldInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SubFieldInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SubFieldInfo proto.InternalMessageInfo

func (m *SubFieldInfo) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *SubFieldInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SubFieldInfo) GetInputType() string {
	if m != nil {
		return m.InputType
	}
	return ""
}

func (m *SubFieldInfo) GetFieldType() string {
	if m != nil {
		return m.FieldType
	}
	return ""
}

func (m *SubFieldInfo) GetValidation() *Validation {
	if m != nil {
		return m.Validation
	}
	return nil
}

func (m *SubFieldInfo) GetSerial() uint32 {
	if m != nil {
		return m.Serial
	}
	return 0
}

func (m *SubFieldInfo) GetSystemGenerated() bool {
	if m != nil {
		return m.SystemGenerated
	}
	return false
}

func (m *SubFieldInfo) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type ConnectionType struct {
	Model               string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty" firestore:"model,omitempty"`
	Relation            string `protobuf:"bytes,2,opt,name=relation,proto3" json:"relation,omitempty" firestore:"relation,omitempty"`
	Type                string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty" firestore:"type,omitempty"`
	MultiTenantRelation bool   `protobuf:"varint,4,opt,name=multi_tenant_relation,json=multiTenantRelation,proto3" json:"multi_tenant_relation,omitempty" firestore:"multi_tenant_relation,omitempty"`
	ProtectedRelation   bool   `protobuf:"varint,5,opt,name=protected_relation,json=protectedRelation,proto3" json:"protected_relation,omitempty" firestore:"protected_relation,omitempty"`
	SystemGenerated     bool   `protobuf:"varint,6,opt,name=system_generated,json=systemGenerated,proto3" json:"system_generated,omitempty" firestore:"system_generated,omitempty"`
}

func (m *ConnectionType) Reset()         { *m = ConnectionType{} }
func (m *ConnectionType) String() string { return proto.CompactTextString(m) }
func (*ConnectionType) ProtoMessage()    {}
func (*ConnectionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{42}
}
func (m *ConnectionType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectionType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionType.Merge(m, src)
}
func (m *ConnectionType) XXX_Size() int {
	return m.Size()
}
func (m *ConnectionType) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionType.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionType proto.InternalMessageInfo

func (m *ConnectionType) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *ConnectionType) GetRelation() string {
	if m != nil {
		return m.Relation
	}
	return ""
}

func (m *ConnectionType) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ConnectionType) GetMultiTenantRelation() bool {
	if m != nil {
		return m.MultiTenantRelation
	}
	return false
}

func (m *ConnectionType) GetProtectedRelation() bool {
	if m != nil {
		return m.ProtectedRelation
	}
	return false
}

func (m *ConnectionType) GetSystemGenerated() bool {
	if m != nil {
		return m.SystemGenerated
	}
	return false
}

type Webhook struct {
	Id              string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" firestore:"id,omitempty"`
	XKey            string   `protobuf:"bytes,2,opt,name=_key,json=Key,proto3" json:"_key,omitempty" firestore:"_key,omitempty"`
	Type            string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty" firestore:"type,omitempty"`
	Model           string   `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty" firestore:"model,omitempty"`
	ProjectId       string   `protobuf:"bytes,5,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" firestore:"project_id,omitempty"`
	Name            string   `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty" firestore:"name,omitempty"`
	Events          []string `protobuf:"bytes,7,rep,name=events,proto3" json:"events,omitempty" firestore:"events,omitempty"`
	Url             string   `protobuf:"bytes,8,opt,name=url,proto3" json:"url,omitempty" firestore:"url,omitempty"`
	LogicExecutions []string `protobuf:"bytes,9,rep,name=logic_executions,json=logicExecutions,proto3" json:"logic_executions,omitempty" firestore:"logic_executions,omitempty"`
}

func (m *Webhook) Reset()         { *m = Webhook{} }
func (m *Webhook) String() string { return proto.CompactTextString(m) }
func (*Webhook) ProtoMessage()    {}
func (*Webhook) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{43}
}
func (m *Webhook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Webhook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Webhook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Webhook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Webhook.Merge(m, src)
}
func (m *Webhook) XXX_Size() int {
	return m.Size()
}
func (m *Webhook) XXX_DiscardUnknown() {
	xxx_messageInfo_Webhook.DiscardUnknown(m)
}

var xxx_messageInfo_Webhook proto.InternalMessageInfo

func (m *Webhook) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Webhook) GetXKey() string {
	if m != nil {
		return m.XKey
	}
	return ""
}

func (m *Webhook) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Webhook) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Webhook) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *Webhook) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Webhook) GetEvents() []string {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *Webhook) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Webhook) GetLogicExecutions() []string {
	if m != nil {
		return m.LogicExecutions
	}
	return nil
}

func init() {
	proto.RegisterType((*PictureDeleteRequest)(nil), "protobuff.PictureDeleteRequest")
	proto.RegisterType((*FileDetails)(nil), "protobuff.FileDetails")
	proto.RegisterType((*UploadParams)(nil), "protobuff.UploadParams")
	proto.RegisterType((*Filter)(nil), "protobuff.Filter")
	proto.RegisterType((*Request)(nil), "protobuff.Request")
	proto.RegisterType((*FileLink)(nil), "protobuff.FileLink")
	proto.RegisterType((*FilePickParameter)(nil), "protobuff.FilePickParameter")
	proto.RegisterType((*ImageMetaInfo)(nil), "protobuff.ImageMetaInfo")
	proto.RegisterType((*LoginRequest)(nil), "protobuff.LoginRequest")
	proto.RegisterType((*RegisterRequest)(nil), "protobuff.RegisterRequest")
	proto.RegisterType((*Role)(nil), "protobuff.Role")
	proto.RegisterMapType((map[string]*APIPermission)(nil), "protobuff.Role.ApiPermissionsEntry")
	proto.RegisterType((*APIPermission)(nil), "protobuff.APIPermission")
	proto.RegisterType((*SystemUser)(nil), "protobuff.SystemUser")
	proto.RegisterType((*UserProjects)(nil), "protobuff.UserProjects")
	proto.RegisterType((*UserMeta)(nil), "protobuff.UserMeta")
	proto.RegisterType((*MetaField)(nil), "protobuff.MetaField")
	proto.RegisterType((*PreviewMode)(nil), "protobuff.PreviewMode")
	proto.RegisterType((*Project)(nil), "protobuff.Project")
	proto.RegisterMapType((map[string]*ExtensionDetails)(nil), "protobuff.Project.ExtensionsEntry")
	proto.RegisterMapType((map[string]*Role)(nil), "protobuff.Project.RolesEntry")
	proto.RegisterType((*SupportAndTicket)(nil), "protobuff.SupportAndTicket")
	proto.RegisterType((*TicketReply)(nil), "protobuff.TicketReply")
	proto.RegisterType((*ProjectInvoices)(nil), "protobuff.ProjectInvoices")
	proto.RegisterType((*ProjectUsages)(nil), "protobuff.ProjectUsages")
	proto.RegisterType((*DriverCredentials)(nil), "protobuff.DriverCredentials")
	proto.RegisterType((*APIToken)(nil), "protobuff.APIToken")
	proto.RegisterType((*ExtensionDetails)(nil), "protobuff.ExtensionDetails")
	proto.RegisterType((*ThirdPartyCredential)(nil), "protobuff.ThirdPartyCredential")
	proto.RegisterType((*AddOnsDetails)(nil), "protobuff.AddOnsDetails")
	proto.RegisterType((*AuthenticationAddOns)(nil), "protobuff.AuthenticationAddOns")
	proto.RegisterType((*AccountUsage)(nil), "protobuff.AccountUsage")
	proto.RegisterType((*MonthlySubscription)(nil), "protobuff.MonthlySubscription")
	proto.RegisterType((*CommonPaymentData)(nil), "protobuff.CommonPaymentData")
	proto.RegisterType((*UsagesTracking)(nil), "protobuff.UsagesTracking")
	proto.RegisterType((*UserDefinedSchema)(nil), "protobuff.UserDefinedSchema")
	proto.RegisterType((*ModelType)(nil), "protobuff.ModelType")
	proto.RegisterType((*CloudFunction)(nil), "protobuff.CloudFunction")
	proto.RegisterType((*FunctionProviderConfig)(nil), "protobuff.FunctionProviderConfig")
	proto.RegisterType((*FunctionEnvVariables)(nil), "protobuff.FunctionEnvVariables")
	proto.RegisterType((*CloudFunctionRequestResponseType)(nil), "protobuff.CloudFunctionRequestResponseType")
	proto.RegisterType((*FunctionInternalConfig)(nil), "protobuff.FunctionInternalConfig")
	proto.RegisterType((*Validation)(nil), "protobuff.Validation")
	proto.RegisterType((*FieldInfo)(nil), "protobuff.FieldInfo")
	proto.RegisterType((*SubFieldInfo)(nil), "protobuff.SubFieldInfo")
	proto.RegisterType((*ConnectionType)(nil), "protobuff.ConnectionType")
	proto.RegisterType((*Webhook)(nil), "protobuff.Webhook")
}

func init() { proto.RegisterFile("common.proto", fileDescriptor_555bd8c177793206) }

var fileDescriptor_555bd8c177793206 = []byte{
	// 5029 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0xcd, 0x6f, 0x24, 0xc7,
	0x75, 0xd7, 0xcc, 0x90, 0xc3, 0x61, 0x0d, 0xb9, 0xe4, 0xf6, 0xae, 0x24, 0x6a, 0xad, 0xdd, 0x59,
	0xb5, 0x2c, 0x6b, 0x6d, 0x29, 0xbb, 0x36, 0xd7, 0x4a, 0x16, 0x0a, 0x2c, 0x6b, 0xc9, 0xfd, 0x30,
	0xed, 0x5d, 0x89, 0x1a, 0xae, 0xe4, 0x40, 0x8b, 0xa8, 0x55, 0xec, 0xae, 0x99, 0x29, 0xb3, 0xa7,
	0x7b, 0xd4, 0x1f, 0xd4, 0x32, 0x87, 0x5c, 0x02, 0xe4, 0x12, 0x20, 0xf1, 0x25, 0xb7, 0xfc, 0x03,
	0x4e, 0xe0, 0xe4, 0x18, 0x20, 0x40, 0x90, 0xdc, 0xf2, 0xe1, 0x1c, 0x7c, 0x48, 0x90, 0x20, 0x41,
	0x06, 0x86, 0x74, 0x0f, 0x90, 0x81, 0x6f, 0x39, 0x24, 0x78, 0xaf, 0xaa, 0xbb, 0xeb, 0x75, 0x37,
	0x25, 0x0e, 0x77, 0x15, 0x28, 0x40, 0x4e, 0x24, 0xdf, 0xef, 0xbd, 0xd7, 0xd5, 0x55, 0xaf, 0xde,
	0x57, 0x55, 0x93, 0xad, 0xb8, 0xe1, 0x78, 0x1c, 0x06, 0x57, 0x27, 0x51, 0x98, 0x84, 0xd6, 0x32,
	0xfe, 0xd8, 0x4f, 0x07, 0x83, 0x0b, 0xeb, 0xc9, 0x48, 0x46, 0xde, 0xb5, 0x61, 0x38, 0x0c, 0x15,
	0x68, 0xff, 0xb2, 0xc1, 0xce, 0xef, 0x4a, 0x37, 0x49, 0x23, 0x71, 0x4b, 0xf8, 0x22, 0x11, 0x7d,
	0xf1, 0x51, 0x2a, 0xe2, 0xc4, 0xda, 0x64, 0x0b, 0x69, 0xe4, 0xc7, 0x1b, 0x8d, 0xcb, 0xad, 0x2b,
	0xcb, 0x5b, 0x97, 0x66, 0xd3, 0xde, 0x85, 0x81, 0x8c, 0x44, 0x9c, 0x84, 0x91, 0x78, 0xdd, 0x06,
	0xe8, 0xd5, 0x70, 0x2c, 0x13, 0x31, 0x9e, 0x24, 0x47, 0x76, 0x1f, 0x79, 0xad, 0xd7, 0xd8, 0xe2,
	0x38, 0xf4, 0x84, 0xbf, 0xd1, 0xbc, 0xdc, 0xb8, 0xb2, 0xbc, 0xd5, 0x9b, 0x4d, 0x7b, 0x5f, 0x31,
	0x84, 0x10, 0x33, 0xa5, 0x14, 0xb7, 0xf5, 0x2a, 0x6b, 0x4a, 0x6f, 0xa3, 0x85, 0x32, 0xcf, 0xcf,
	0xa6, 0xbd, 0x0d, 0x43, 0x46, 0x7a, 0xa6, 0x40, 0x53, 0x7a, 0xd6, 0x36, 0x63, 0x03, 0x29, 0x7c,
	0xcf, 0x09, 0xf8, 0x58, 0x6c, 0x2c, 0xa0, 0xd4, 0x57, 0x67, 0xd3, 0xde, 0x65, 0x43, 0xaa, 0x60,
	0x30, 0xa5, 0x97, 0x91, 0xfc, 0x16, 0x1f, 0x0b, 0xfb, 0x77, 0xda, 0xac, 0x7b, 0x47, 0xfa, 0xe2,
	0x96, 0x48, 0xb8, 0xf4, 0x63, 0x3d, 0x84, 0xc6, 0x09, 0x87, 0xf0, 0x2d, 0xb6, 0xe0, 0x1c, 0x88,
	0x23, 0xfd, 0x9a, 0xe5, 0xb9, 0x01, 0xc8, 0x94, 0x68, 0xfd, 0x40, 0x1c, 0xc1, 0x74, 0x26, 0x47,
	0x13, 0xa1, 0xdf, 0xb2, 0x2c, 0x02, 0x10, 0x99, 0x4e, 0x20, 0x58, 0x3f, 0x60, 0x67, 0x06, 0xd2,
	0x17, 0x8e, 0x78, 0x94, 0x88, 0x20, 0x96, 0x61, 0x40, 0xdf, 0xd6, 0x44, 0x5e, 0xb7, 0x13, 0x99,
	0xf8, 0x44, 0xc7, 0x2a, 0x70, 0xdc, 0xce, 0x18, 0xac, 0x37, 0xd9, 0x32, 0x8a, 0xe0, 0xac, 0x2d,
	0xa2, 0x9e, 0x17, 0x67, 0xd3, 0x5e, 0x8f, 0xcc, 0x9a, 0xc6, 0x4d, 0x35, 0x1d, 0xa0, 0xc2, 0x9c,
	0x59, 0x3b, 0x60, 0x57, 0x41, 0x22, 0x82, 0xc4, 0xc1, 0x57, 0x69, 0xa3, 0x92, 0xaf, 0xcd, 0xa6,
	0x3d, 0xdb, 0x50, 0x62, 0xb2, 0x98, 0x7a, 0xba, 0x1a, 0x78, 0x00, 0x6f, 0xb6, 0xc9, 0x16, 0x62,
	0xf9, 0x5b, 0x62, 0x63, 0xe9, 0x72, 0xe3, 0x4a, 0xab, 0x32, 0x1b, 0x00, 0x91, 0xd9, 0x00, 0x82,
	0xf5, 0x6b, 0xac, 0x1d, 0x5f, 0xc7, 0x69, 0xef, 0xe0, 0x83, 0x2f, 0xcf, 0xa6, 0xbd, 0xe7, 0x4d,
	0xa9, 0xeb, 0xe5, 0x89, 0x5f, 0x8c, 0xaf, 0xc3, 0xd4, 0x5f, 0x63, 0xad, 0x34, 0xf2, 0x37, 0x96,
	0x51, 0xea, 0xe2, 0x6c, 0xda, 0x7b, 0x8e, 0x1a, 0x32, 0x59, 0xab, 0x34, 0xf2, 0xc1, 0xc2, 0xdc,
	0x48, 0xf0, 0x44, 0x78, 0x0e, 0x4f, 0x36, 0x58, 0xad, 0x85, 0x15, 0x0c, 0xc4, 0xc2, 0x34, 0xf9,
	0x66, 0x62, 0xed, 0xb3, 0x95, 0x74, 0xe2, 0x87, 0xdc, 0x73, 0x26, 0x3c, 0xe2, 0xe3, 0x8d, 0xee,
	0xe5, 0xc6, 0x95, 0xee, 0xe6, 0xb3, 0x57, 0xf3, 0xcd, 0x78, 0xf5, 0x5d, 0x84, 0x77, 0x01, 0x8d,
	0x2b, 0xd3, 0x68, 0xca, 0x92, 0x69, 0x4c, 0x0b, 0x29, 0xeb, 0x0d, 0xd6, 0x06, 0x4d, 0x22, 0xda,
	0x58, 0xb9, 0xdc, 0xb8, 0xb2, 0x72, 0x62, 0x25, 0x5a, 0xca, 0x9e, 0x36, 0xd9, 0x8a, 0x39, 0x0a,
	0x98, 0x63, 0x2f, 0x74, 0x9d, 0x7c, 0x2b, 0x94, 0xe7, 0x58, 0x81, 0x64, 0x8e, 0xbd, 0xd0, 0xdd,
	0xc1, 0x4d, 0x39, 0x89, 0xc2, 0x1f, 0x09, 0x37, 0x01, 0xe1, 0x66, 0xed, 0x94, 0x15, 0x0c, 0x64,
	0xca, 0x34, 0x59, 0x29, 0x41, 0x87, 0xa0, 0x6c, 0xb4, 0x55, 0xab, 0xa4, 0x60, 0x20, 0x4a, 0x90,
	0x8c, 0x56, 0xfa, 0x24, 0xdc, 0x83, 0x75, 0x87, 0x75, 0xb9, 0xef, 0x87, 0x1f, 0x3b, 0xe3, 0xd4,
	0x4f, 0x24, 0x6e, 0x97, 0xce, 0xd6, 0x4b, 0xb3, 0x69, 0xef, 0x05, 0x43, 0x8b, 0xc1, 0x61, 0xaa,
	0x61, 0x48, 0xbf, 0x0f, 0x64, 0xfb, 0x77, 0x5b, 0xac, 0x7d, 0x47, 0xfa, 0x89, 0x88, 0xc0, 0xe4,
	0x27, 0x7c, 0x28, 0x70, 0x62, 0x57, 0x2b, 0x26, 0x0f, 0x10, 0x31, 0x79, 0x20, 0x58, 0x37, 0x58,
	0x3b, 0x1c, 0x0c, 0x62, 0x91, 0xe0, 0x8c, 0xae, 0x56, 0x96, 0x43, 0x81, 0x64, 0x65, 0x15, 0x09,
	0x3c, 0xb1, 0x2f, 0xc7, 0x32, 0xc1, 0x59, 0x5c, 0xad, 0x78, 0x62, 0xc4, 0xc8, 0x32, 0x22, 0x05,
	0xc4, 0xc2, 0xc8, 0x13, 0x91, 0x9e, 0xb7, 0xb2, 0x18, 0x62, 0x44, 0x0c, 0x29, 0xb0, 0xc3, 0xc6,
	0x32, 0xc0, 0x69, 0x5a, 0xad, 0xec, 0xb0, 0xb1, 0x0c, 0xc8, 0x0e, 0x1b, 0xcb, 0x00, 0x05, 0xf8,
	0x23, 0xf4, 0x20, 0x35, 0x02, 0xfc, 0x11, 0x15, 0xe0, 0x8f, 0xac, 0x37, 0x58, 0xc7, 0xe5, 0x89,
	0x18, 0x86, 0xd1, 0x11, 0x3a, 0x8d, 0xe5, 0x2d, 0x7b, 0x36, 0xed, 0x5d, 0x32, 0x37, 0xa4, 0x86,
	0x89, 0xef, 0xca, 0x88, 0xf6, 0x5f, 0x36, 0xd9, 0x52, 0x16, 0xd9, 0xe6, 0xf3, 0xf5, 0x99, 0xe3,
	0x6e, 0xce, 0xe5, 0xb8, 0xdb, 0x03, 0x5c, 0x75, 0x9c, 0xc7, 0xee, 0xe6, 0x59, 0x63, 0xd7, 0x2b,
	0x73, 0xa8, 0x2c, 0xa5, 0xe2, 0x27, 0x4b, 0xa9, 0x48, 0xd6, 0x3d, 0xb6, 0x1a, 0x0b, 0x1e, 0xb9,
	0x23, 0x27, 0x4e, 0x22, 0x19, 0x0c, 0xb5, 0xf3, 0x7e, 0x79, 0x36, 0xed, 0xbd, 0x68, 0xba, 0x3f,
	0x93, 0xc7, 0xd4, 0xb3, 0xa2, 0x90, 0x3d, 0x04, 0x60, 0x85, 0x23, 0x91, 0x44, 0x47, 0x38, 0xf7,
	0x9d, 0xca, 0x0a, 0x23, 0x46, 0x56, 0x18, 0x29, 0xf6, 0x7f, 0x37, 0x58, 0x07, 0xe2, 0xe5, 0x3d,
	0x19, 0x1c, 0xc0, 0x94, 0xf8, 0x32, 0x38, 0xd0, 0x53, 0x58, 0x9e, 0x12, 0x80, 0xc8, 0x94, 0x00,
	0x01, 0x9e, 0x8b, 0x11, 0xea, 0x98, 0xd4, 0xa0, 0x12, 0xbd, 0x14, 0x77, 0xc9, 0x15, 0xb7, 0x4e,
	0xe7, 0x8a, 0xb7, 0x19, 0x4b, 0x27, 0x5e, 0xa6, 0xa4, 0xde, 0x25, 0x14, 0x0c, 0x44, 0x89, 0x26,
	0xdf, 0x4c, 0xec, 0xbf, 0x69, 0xb2, 0xb3, 0x30, 0x03, 0xbb, 0xd2, 0x3d, 0x40, 0x6f, 0x29, 0x60,
	0x71, 0x1e, 0xb0, 0xf5, 0x20, 0x1d, 0xef, 0x8b, 0xc8, 0x09, 0x07, 0x8e, 0x1c, 0xf3, 0xa1, 0x88,
	0xf5, 0x0e, 0xff, 0xc6, 0x6c, 0xda, 0xfb, 0x9a, 0xf1, 0x80, 0x32, 0x9b, 0xf9, 0x98, 0x33, 0x0a,
	0x7c, 0x7b, 0xb0, 0x83, 0x10, 0xc4, 0xea, 0xf8, 0xba, 0x33, 0x08, 0x7d, 0xd8, 0x8a, 0xcd, 0xda,
	0x58, 0x9d, 0xe3, 0xc4, 0xde, 0xe3, 0xeb, 0x77, 0x90, 0x08, 0xb1, 0x7a, 0x22, 0xdd, 0x03, 0x11,
	0x39, 0x6a, 0xd6, 0x5b, 0xb5, 0xb1, 0xda, 0x64, 0x21, 0x41, 0x46, 0x01, 0x0f, 0x70, 0x09, 0xde,
	0x66, 0xed, 0x30, 0x92, 0x43, 0x19, 0x68, 0x63, 0x7e, 0xda, 0x30, 0xe6, 0xbd, 0xa3, 0x38, 0x11,
	0xe3, 0x77, 0xe3, 0x1a, 0x83, 0x56, 0x32, 0xd4, 0x37, 0x21, 0xc9, 0xfe, 0xd3, 0x26, 0x5b, 0xc5,
	0x17, 0xbd, 0x2f, 0x12, 0xbe, 0x13, 0x0c, 0x42, 0xeb, 0x16, 0x63, 0xd2, 0x13, 0x41, 0x22, 0x07,
	0x52, 0x44, 0xda, 0xac, 0xca, 0x0b, 0x54, 0x30, 0x10, 0x67, 0x5b, 0x90, 0xc1, 0x2c, 0xd1, 0xe7,
	0xd7, 0xef, 0xd4, 0xb2, 0xb7, 0x47, 0x5e, 0x30, 0xcb, 0x8f, 0xa5, 0x97, 0x8c, 0x8e, 0xf1, 0x93,
	0x88, 0x11, 0xb3, 0x44, 0x0a, 0x38, 0xe6, 0x91, 0x90, 0xc3, 0x91, 0xb2, 0xa6, 0xaa, 0x63, 0x56,
	0x20, 0x79, 0x79, 0x45, 0xca, 0xdd, 0xc9, 0xe2, 0xc9, 0xdd, 0x89, 0xfd, 0x57, 0x0d, 0xb6, 0x72,
	0x2f, 0x1c, 0xca, 0x20, 0xf3, 0x60, 0x6f, 0xb0, 0x4e, 0x1a, 0x8b, 0x08, 0xdf, 0xb6, 0x51, 0xeb,
	0x0d, 0x33, 0x98, 0x58, 0x47, 0x46, 0x84, 0xb7, 0x16, 0x63, 0x2e, 0x8f, 0xcb, 0xd3, 0x11, 0x23,
	0x6f, 0x8d, 0x14, 0x78, 0xeb, 0x58, 0xb8, 0x91, 0xc8, 0x36, 0x62, 0x25, 0x03, 0x43, 0x90, 0xbc,
	0xb5, 0x22, 0xd9, 0x7f, 0xdf, 0x64, 0x6b, 0x7d, 0x31, 0x94, 0x71, 0x22, 0xa2, 0xff, 0xab, 0x2f,
	0x81, 0x19, 0x74, 0xea, 0xfb, 0x66, 0x62, 0x51, 0xc9, 0xa0, 0x33, 0x9c, 0x66, 0xd0, 0xa9, 0xaf,
	0x72, 0x93, 0x5b, 0x98, 0x25, 0x0d, 0x44, 0x8c, 0xc9, 0xfc, 0xe2, 0x71, 0x59, 0x92, 0x66, 0x20,
	0x76, 0x5e, 0x90, 0xed, 0xbf, 0x58, 0x60, 0x0b, 0xfd, 0xd0, 0x17, 0x56, 0xcc, 0xd6, 0xf8, 0x44,
	0x3a, 0x13, 0x11, 0x8d, 0x25, 0x42, 0xaa, 0x5a, 0xeb, 0x6e, 0xbe, 0x68, 0x6c, 0x51, 0xe0, 0xbc,
	0x7a, 0x73, 0x22, 0x77, 0x0b, 0xae, 0xdb, 0x41, 0x12, 0x1d, 0x55, 0xd2, 0x19, 0x43, 0x0d, 0xf1,
	0x4d, 0x9c, 0xc8, 0x5a, 0x31, 0xbb, 0xc0, 0xbd, 0xb1, 0x0c, 0x64, 0x9c, 0x44, 0x3c, 0x91, 0x87,
	0x82, 0x3c, 0xbf, 0x89, 0xd5, 0xe2, 0xb7, 0x67, 0xd3, 0xde, 0x37, 0xcd, 0x4c, 0xe9, 0x58, 0x01,
	0xf3, 0x49, 0xcf, 0x51, 0x36, 0xf3, 0xa1, 0xef, 0xb2, 0x75, 0x3f, 0x1c, 0x4a, 0xd7, 0x11, 0x8f,
	0x84, 0x9b, 0x26, 0xf8, 0xa8, 0x16, 0x3e, 0xaa, 0xec, 0x66, 0xcb, 0x6c, 0xe6, 0x03, 0xd6, 0x10,
	0xbc, 0x9d, 0x63, 0xa0, 0x36, 0x46, 0x0f, 0xe6, 0x0c, 0x45, 0x20, 0x22, 0xf0, 0xf4, 0xb8, 0xb0,
	0x9d, 0x8a, 0xda, 0x32, 0x1b, 0x51, 0xab, 0xc0, 0xbb, 0x19, 0x66, 0x7d, 0x87, 0x75, 0x64, 0xec,
	0xe0, 0xdb, 0xe8, 0xd4, 0xb1, 0x6c, 0xd9, 0x19, 0x6c, 0xaa, 0x59, 0x92, 0xf1, 0x4d, 0xa0, 0x5d,
	0x78, 0xc8, 0xce, 0xd5, 0xac, 0x97, 0xb5, 0xce, 0x5a, 0x50, 0xfc, 0xe0, 0x56, 0xe9, 0xc3, 0xaf,
	0xd6, 0x55, 0xb6, 0x78, 0xc8, 0xfd, 0x54, 0x79, 0xbc, 0xee, 0xe6, 0x86, 0xb1, 0xea, 0x37, 0x77,
	0x77, 0x0a, 0x05, 0x7d, 0xc5, 0xf6, 0x7a, 0xf3, 0x46, 0xc3, 0xfe, 0xcf, 0x06, 0x5b, 0x25, 0x20,
	0x78, 0xa4, 0x48, 0x70, 0xef, 0x18, 0xb7, 0x09, 0x10, 0xf1, 0x48, 0x40, 0x80, 0x4d, 0xa4, 0xc2,
	0xeb, 0x31, 0x9b, 0x48, 0x81, 0x64, 0x13, 0x29, 0x12, 0x48, 0xaa, 0x98, 0xaa, 0x77, 0x50, 0x59,
	0x52, 0x81, 0x44, 0x52, 0x91, 0x40, 0xd2, 0xc3, 0x0e, 0x85, 0xde, 0x38, 0x95, 0xda, 0x04, 0x41,
	0x22, 0xa9, 0x48, 0xf6, 0x4f, 0x96, 0x18, 0x2b, 0x22, 0x55, 0x5e, 0xbd, 0x37, 0x4e, 0x5e, 0xbd,
	0xab, 0x94, 0xb1, 0x79, 0xf2, 0x94, 0xd1, 0xa8, 0x60, 0x4e, 0x16, 0x88, 0x4c, 0x6f, 0xb8, 0xf0,
	0x38, 0xde, 0x70, 0xf1, 0x94, 0xde, 0xb0, 0x3d, 0xa7, 0x37, 0xbc, 0xc1, 0xda, 0xfc, 0x90, 0x27,
	0x3c, 0xd2, 0xf9, 0x78, 0x59, 0x52, 0x81, 0x44, 0x52, 0x91, 0xac, 0xf7, 0x99, 0xe5, 0xa6, 0x51,
	0x24, 0x82, 0xc4, 0x31, 0x6a, 0x46, 0x55, 0xd4, 0xbf, 0x3a, 0x9b, 0xf6, 0xae, 0x98, 0x86, 0x54,
	0x61, 0x34, 0x35, 0xae, 0x6b, 0x78, 0xd7, 0x2c, 0x21, 0x8d, 0x7c, 0x71, 0xf9, 0x49, 0xe4, 0x8b,
	0xec, 0x54, 0xf9, 0x22, 0xa4, 0xed, 0xd9, 0xa0, 0x55, 0x25, 0xd6, 0xc5, 0x4c, 0xa1, 0x9c, 0xb6,
	0x13, 0x1e, 0x92, 0xb6, 0x6b, 0xe4, 0x1e, 0x16, 0x66, 0x6f, 0xb1, 0x33, 0x32, 0x76, 0xe2, 0x74,
	0x22, 0x22, 0xed, 0x58, 0x56, 0xd0, 0xb1, 0x5c, 0x99, 0x4d, 0x7b, 0x5f, 0xa5, 0x8e, 0xc5, 0x60,
	0x22, 0xfa, 0x64, 0xbc, 0x07, 0x08, 0xfa, 0x18, 0x18, 0x5d, 0x24, 0x06, 0x91, 0x88, 0x47, 0x4e,
	0x12, 0x1e, 0x88, 0x60, 0x63, 0xb5, 0xb6, 0xa8, 0x20, 0x3c, 0x44, 0x9b, 0x46, 0x1e, 0x00, 0x00,
	0xd9, 0x26, 0x77, 0x5d, 0x11, 0xc7, 0x5a, 0xd9, 0x99, 0xda, 0x6c, 0xd3, 0x64, 0x21, 0xd9, 0xa6,
	0x02, 0x50, 0x95, 0xfd, 0xd3, 0x06, 0x5b, 0x81, 0x5d, 0xaa, 0x97, 0x34, 0xb6, 0x76, 0xd8, 0x02,
	0x18, 0x39, 0xee, 0xd6, 0x63, 0x93, 0xcf, 0x4a, 0x7b, 0x32, 0xa6, 0x69, 0x22, 0xaa, 0xb0, 0xfa,
	0xac, 0xa3, 0x27, 0x55, 0x05, 0xaa, 0xee, 0xa6, 0x65, 0xa8, 0xd3, 0x4f, 0xac, 0xec, 0xbb, 0x4c,
	0x84, 0xec, 0xbb, 0x8c, 0x68, 0xff, 0x53, 0x93, 0x75, 0x60, 0x08, 0x90, 0xcb, 0xce, 0x59, 0x59,
	0x16, 0x3b, 0xa8, 0x39, 0xe7, 0x0e, 0x3a, 0x8d, 0x83, 0x01, 0x37, 0x1f, 0xfa, 0x99, 0x73, 0xa9,
	0xb8, 0xf9, 0x90, 0x56, 0x00, 0xc8, 0x7b, 0x5a, 0xa7, 0xb2, 0xc5, 0x32, 0xe3, 0x75, 0x70, 0xe9,
	0xea, 0x4b, 0xcd, 0x8a, 0x74, 0x57, 0x0b, 0xc1, 0x74, 0xda, 0x3f, 0x6b, 0xb1, 0x65, 0x98, 0xd3,
	0x3b, 0x52, 0xf8, 0xe5, 0x6d, 0xdd, 0x78, 0x12, 0xdb, 0xba, 0x79, 0xba, 0x6d, 0xbd, 0x57, 0x8c,
	0x64, 0xff, 0x08, 0x17, 0xa0, 0xbb, 0x79, 0xce, 0x6c, 0xea, 0x69, 0x5b, 0xf8, 0xfc, 0x0a, 0x37,
	0x1b, 0xd9, 0xd6, 0x91, 0xe5, 0xb2, 0x75, 0x9f, 0xc7, 0x89, 0x33, 0x0e, 0x3d, 0x28, 0x65, 0x50,
	0xf5, 0xc2, 0xf1, 0xaa, 0x8f, 0x7b, 0xf3, 0x7d, 0x12, 0xb8, 0xce, 0x80, 0xca, 0xfb, 0x5a, 0xe3,
	0xd6, 0x11, 0xba, 0xfa, 0x84, 0x27, 0x69, 0x7c, 0x4c, 0xfc, 0x54, 0x20, 0x75, 0xf5, 0x48, 0x82,
	0xc4, 0x37, 0x11, 0x01, 0x0f, 0xd0, 0x4f, 0xb7, 0x6b, 0x13, 0xdf, 0x1c, 0x27, 0xbb, 0x44, 0x51,
	0x77, 0x3c, 0xfb, 0x17, 0x0d, 0xd6, 0xdd, 0x8d, 0xc4, 0xa1, 0x14, 0x1f, 0xdf, 0x0f, 0x3d, 0x51,
	0x74, 0x03, 0x1a, 0x73, 0x75, 0x03, 0x36, 0xd9, 0x82, 0x74, 0xc3, 0xe0, 0x98, 0x54, 0x05, 0x20,
	0x62, 0xc3, 0x40, 0x30, 0x5e, 0xbb, 0x35, 0xe7, 0x6b, 0xab, 0xdd, 0xbc, 0x70, 0xb2, 0xdd, 0x6c,
	0xff, 0x2b, 0x63, 0x4b, 0xda, 0x85, 0x7c, 0xf1, 0x19, 0xc6, 0x4e, 0xb1, 0xc3, 0x0c, 0x47, 0x50,
	0x29, 0xef, 0x0d, 0x96, 0xba, 0x8d, 0x86, 0x35, 0xc9, 0x07, 0xec, 0x5c, 0xc6, 0xe7, 0x89, 0xd8,
	0x8d, 0xe4, 0x24, 0x29, 0x4e, 0x1a, 0x7e, 0x65, 0x36, 0xed, 0x7d, 0xbd, 0x46, 0xa3, 0xc1, 0x69,
	0x2a, 0xb6, 0x34, 0x7e, 0xab, 0x80, 0xad, 0xf7, 0x58, 0x3b, 0x76, 0x47, 0x62, 0xcc, 0xd1, 0xec,
	0xba, 0x9b, 0xcf, 0x97, 0x2c, 0xfa, 0x96, 0x18, 0xc8, 0x40, 0x78, 0x7b, 0xc8, 0x53, 0x5d, 0x1d,
	0x24, 0xd3, 0xd5, 0x41, 0x52, 0xc9, 0x25, 0xb4, 0x9f, 0x84, 0x4b, 0x58, 0x3a, 0x9d, 0x4b, 0x78,
	0x93, 0x2d, 0x8b, 0x47, 0x13, 0x19, 0x09, 0xd0, 0xd1, 0xa9, 0xdd, 0x1e, 0x39, 0x4e, 0xb6, 0x87,
	0xa2, 0xde, 0x4c, 0xac, 0x11, 0x63, 0xf9, 0x49, 0x4e, 0xbc, 0xb1, 0x8c, 0xa1, 0xc9, 0xae, 0x86,
	0xa6, 0xab, 0xf9, 0x69, 0x8e, 0x2e, 0xe1, 0xca, 0x43, 0x2d, 0x94, 0x90, 0xda, 0xb1, 0x20, 0x5b,
	0x7d, 0xd6, 0xe6, 0x9e, 0x07, 0x4f, 0x61, 0xd5, 0x9a, 0xc1, 0xf3, 0xde, 0x0e, 0x62, 0x7d, 0x22,
	0x56, 0x8d, 0x46, 0x28, 0x46, 0xa3, 0x11, 0x92, 0xac, 0xfb, 0xac, 0x8d, 0x31, 0x3d, 0xde, 0xe8,
	0xe2, 0xc8, 0xcf, 0xd1, 0x3a, 0x04, 0xe3, 0x7a, 0x45, 0x9d, 0x92, 0x20, 0xea, 0x14, 0xc9, 0x7a,
	0xc0, 0x16, 0x21, 0xf8, 0xc4, 0x1b, 0x2b, 0xa8, 0xed, 0x62, 0xcd, 0x3c, 0x40, 0x4d, 0xab, 0xa7,
	0xa0, 0xd2, 0xc0, 0x04, 0x88, 0x36, 0x30, 0x81, 0x02, 0x66, 0xe8, 0x45, 0xf2, 0x50, 0x44, 0x98,
	0xe9, 0x50, 0x33, 0xbc, 0x85, 0xc0, 0x76, 0x24, 0xb0, 0x97, 0xc4, 0x6b, 0x5e, 0x5e, 0x89, 0xd2,
	0xda, 0x02, 0x49, 0xd6, 0x1d, 0xd6, 0x05, 0x92, 0xb3, 0xcf, 0x83, 0x40, 0x78, 0x98, 0xf9, 0x54,
	0x4f, 0x0a, 0x0c, 0x0e, 0xb2, 0x30, 0xf0, 0xcb, 0x16, 0x92, 0xad, 0x6f, 0xb3, 0x85, 0x89, 0xcf,
	0x83, 0x8d, 0xb5, 0x5a, 0x27, 0x85, 0xd9, 0x21, 0x3d, 0x70, 0x05, 0x6e, 0xeb, 0xbb, 0x8c, 0x25,
	0x91, 0xe4, 0xbe, 0x23, 0x02, 0x2f, 0xde, 0x58, 0x3f, 0xa1, 0xec, 0x32, 0xca, 0xdc, 0x0e, 0xbc,
	0xf8, 0xc2, 0xfb, 0x6c, 0xad, 0x64, 0x54, 0x35, 0x75, 0xe6, 0xb7, 0x68, 0x9d, 0xf9, 0x15, 0x63,
	0xea, 0x72, 0x61, 0x6d, 0x36, 0x46, 0xa9, 0x79, 0x61, 0x87, 0xb1, 0x62, 0xa1, 0x6a, 0xd4, 0xbe,
	0x44, 0xd5, 0xae, 0x95, 0x9a, 0x16, 0x66, 0xd5, 0xfa, 0xe7, 0x4d, 0xb6, 0xbe, 0x97, 0x4e, 0x26,
	0x61, 0x94, 0xdc, 0x0c, 0xbc, 0x07, 0xd2, 0x3d, 0x10, 0x89, 0x75, 0xd6, 0xf4, 0xb2, 0xca, 0x8b,
	0x9e, 0x29, 0xbc, 0x28, 0xfa, 0x49, 0xcb, 0x3c, 0x75, 0xd5, 0xcd, 0xf9, 0x8b, 0xe4, 0xa8, 0x0a,
	0xfd, 0x9c, 0x79, 0x08, 0x75, 0x81, 0x75, 0x22, 0x11, 0x87, 0xfe, 0xa1, 0xf0, 0x54, 0xf1, 0xde,
	0xcf, 0xff, 0xb6, 0xce, 0x67, 0x61, 0x0b, 0xdd, 0x4d, 0x16, 0x95, 0x5e, 0x61, 0x67, 0x65, 0x1c,
	0xa7, 0x82, 0xf8, 0x4f, 0xf4, 0x25, 0xfd, 0x75, 0x04, 0x4c, 0x77, 0x78, 0x91, 0xb8, 0xad, 0x8e,
	0x7a, 0x7a, 0xe1, 0x90, 0x2e, 0x12, 0x87, 0xb4, 0xac, 0xe0, 0xc2, 0xd5, 0x7c, 0x93, 0x2d, 0x45,
	0x62, 0xe2, 0x4b, 0x01, 0xfb, 0x17, 0x76, 0xc7, 0x33, 0xc6, 0xa4, 0xa9, 0x69, 0xe9, 0x8b, 0x89,
	0x7f, 0xd4, 0xcf, 0xd8, 0xec, 0x3f, 0x68, 0xb0, 0xae, 0x01, 0x58, 0x97, 0x59, 0xd7, 0x1c, 0xa6,
	0x9a, 0x3b, 0x93, 0x64, 0xbd, 0xac, 0x13, 0xee, 0xe6, 0xb1, 0x09, 0x88, 0x4e, 0xa7, 0x2f, 0x56,
	0x7b, 0xf3, 0xe6, 0xab, 0x3c, 0xc3, 0xda, 0xc2, 0x93, 0x79, 0x4b, 0xa5, 0xaf, 0xff, 0xb2, 0xff,
	0x64, 0x89, 0xad, 0x65, 0x05, 0x5b, 0x70, 0x18, 0x4a, 0x57, 0xc4, 0xff, 0x2b, 0x25, 0xf9, 0xdc,
	0xc7, 0xef, 0xdb, 0x55, 0x43, 0x99, 0xff, 0x4c, 0xf3, 0x21, 0xb3, 0xe2, 0x74, 0x3f, 0x9f, 0x5d,
	0x27, 0x4e, 0x78, 0x94, 0xe8, 0x0c, 0xac, 0x5c, 0xec, 0x56, 0x19, 0x4d, 0xa5, 0x67, 0x4d, 0x78,
	0x0f, 0x50, 0xec, 0x5f, 0x99, 0x32, 0x22, 0xc8, 0xf2, 0xb3, 0x4a, 0xff, 0xaa, 0xc4, 0x46, 0xfb,
	0x57, 0x06, 0x78, 0x3b, 0xf0, 0xc0, 0xa7, 0xb9, 0x61, 0x3a, 0x09, 0x03, 0xc7, 0x0d, 0x3d, 0xa1,
	0xc3, 0x62, 0xd9, 0xa7, 0x19, 0x1c, 0xc4, 0xa7, 0x29, 0xfa, 0x36, 0x64, 0x79, 0x7d, 0xb6, 0xe6,
	0xc9, 0xd8, 0x0d, 0xd3, 0x20, 0x71, 0xf8, 0x18, 0x7e, 0xa0, 0xc1, 0x37, 0xb6, 0xbe, 0x3e, 0x9b,
	0xf6, 0x5e, 0x32, 0xdd, 0x2b, 0xe5, 0x22, 0x59, 0x6c, 0x86, 0xdd, 0x44, 0x08, 0xd2, 0x95, 0x9c,
	0x7b, 0x22, 0x22, 0x57, 0x04, 0x09, 0x1f, 0x0a, 0xdc, 0x29, 0xad, 0x4a, 0xba, 0x52, 0xc3, 0x49,
	0xd2, 0x95, 0x0c, 0xdf, 0xcd, 0x61, 0xeb, 0x6d, 0x76, 0x66, 0xc2, 0x8f, 0xc6, 0x22, 0x48, 0x9c,
	0xb1, 0x48, 0x46, 0xa1, 0xa7, 0xeb, 0xff, 0x72, 0xa1, 0x4d, 0x99, 0xc8, 0xbd, 0x0b, 0x0d, 0xdd,
	0x47, 0x04, 0xab, 0x3c, 0xf5, 0xee, 0x5d, 0x7c, 0xf7, 0x4a, 0x5c, 0xad, 0xbc, 0xb2, 0xe6, 0xb7,
	0xae, 0xb1, 0x56, 0xc2, 0x1f, 0x61, 0xa1, 0xdf, 0xa8, 0x1c, 0x92, 0x26, 0xa5, 0x43, 0xd2, 0x84,
	0x3f, 0x82, 0xf9, 0xce, 0x86, 0x35, 0xe4, 0x89, 0xf8, 0x98, 0x1f, 0x61, 0xb0, 0xab, 0xce, 0x77,
	0x89, 0x8b, 0xcc, 0xb7, 0xc6, 0xee, 0x2a, 0xc8, 0xfe, 0x59, 0x93, 0xad, 0xee, 0x66, 0x75, 0x19,
	0x1e, 0x4e, 0x7d, 0x29, 0xaf, 0xca, 0xec, 0xb2, 0xc5, 0x14, 0x86, 0xa7, 0xcb, 0xa6, 0xe7, 0x88,
	0xd7, 0x82, 0x61, 0x3f, 0x88, 0xb8, 0x7b, 0x20, 0x83, 0x61, 0x25, 0x61, 0x40, 0x31, 0x92, 0x30,
	0x20, 0xc5, 0xda, 0x63, 0x6d, 0x15, 0x39, 0x75, 0xde, 0xfa, 0x19, 0x2a, 0x3f, 0x3f, 0xe2, 0x6a,
	0x55, 0xf6, 0xac, 0xc1, 0xce, 0x56, 0xb2, 0x0d, 0xf4, 0x94, 0xc1, 0x50, 0x06, 0xba, 0x1c, 0xea,
	0xeb, 0xbf, 0x20, 0x7a, 0x8d, 0xc2, 0x58, 0x97, 0xaa, 0x7d, 0xfc, 0x1d, 0x68, 0x10, 0x05, 0xb3,
	0x88, 0x06, 0xbf, 0x03, 0x0d, 0x3d, 0xb6, 0x8a, 0x65, 0xca, 0x39, 0x3f, 0x93, 0x37, 0xf6, 0x16,
	0x95, 0x4e, 0xdd, 0xb6, 0xbb, 0xc0, 0x3a, 0x1e, 0x4f, 0xf8, 0x3e, 0x8f, 0xb3, 0x28, 0x96, 0xff,
	0x5d, 0x8a, 0x8c, 0x4b, 0xe5, 0xc8, 0xf8, 0xab, 0xec, 0xd9, 0x0c, 0x76, 0xf3, 0xd1, 0x3b, 0x3f,
	0x8a, 0xc3, 0x40, 0xc7, 0xb1, 0xa7, 0x35, 0x5c, 0xbc, 0xdb, 0xf7, 0xe3, 0x30, 0xb0, 0x3f, 0x6d,
	0xb0, 0x4e, 0x96, 0x07, 0xe6, 0xad, 0x8b, 0xc6, 0x7c, 0x87, 0x74, 0xaa, 0xaf, 0x74, 0xcc, 0xd9,
	0x71, 0xb9, 0xa1, 0xa4, 0xb8, 0xf3, 0x8e, 0x47, 0x6b, 0x8e, 0x8e, 0xc7, 0x0d, 0xd6, 0x56, 0x59,
	0xf9, 0x31, 0xed, 0x69, 0x05, 0x92, 0xa5, 0x55, 0x24, 0xfb, 0xa7, 0x4d, 0xb6, 0x5e, 0xce, 0x86,
	0x4e, 0xf5, 0xb6, 0x77, 0x69, 0x84, 0x6e, 0xd6, 0x7a, 0xdf, 0x63, 0x0a, 0x30, 0x12, 0xc8, 0x4f,
	0xb3, 0x8f, 0x46, 0xac, 0x5b, 0xac, 0x6d, 0xac, 0x77, 0x53, 0xcf, 0x4c, 0x32, 0x46, 0x32, 0xf2,
	0x76, 0x79, 0x94, 0x1c, 0x15, 0xab, 0x5c, 0x8d, 0x0d, 0x85, 0x0a, 0x7a, 0x05, 0xac, 0xa0, 0xdb,
	0xff, 0xd6, 0x64, 0xe7, 0xeb, 0x94, 0x41, 0xd8, 0xe5, 0xae, 0x72, 0xdb, 0xb9, 0x9f, 0x29, 0x87,
	0xdd, 0x82, 0x81, 0x84, 0x5d, 0x4d, 0x56, 0x7d, 0x60, 0xdd, 0x6e, 0x2c, 0x9c, 0x4f, 0x8d, 0x12,
	0xcd, 0x50, 0x56, 0x22, 0xe2, 0x18, 0x1c, 0xd1, 0x36, 0x63, 0x6a, 0xd7, 0xa0, 0x92, 0xfa, 0xcb,
	0x07, 0x05, 0x03, 0x51, 0xa2, 0xc8, 0xa0, 0xe4, 0x75, 0xb6, 0xc4, 0x27, 0x12, 0x35, 0x28, 0x93,
	0x7a, 0x61, 0x36, 0xed, 0x5d, 0x34, 0x87, 0xa1, 0x50, 0x1a, 0x01, 0x26, 0x12, 0x64, 0x6f, 0xb0,
	0x76, 0x24, 0x86, 0xc5, 0x59, 0x61, 0xd9, 0x1a, 0x15, 0x48, 0x24, 0x15, 0xc9, 0xfe, 0xe7, 0x26,
	0x5b, 0x25, 0xf5, 0x1c, 0xe8, 0xf2, 0x43, 0x97, 0xe7, 0x37, 0x3a, 0x2b, 0x4e, 0x0b, 0x41, 0xea,
	0xb4, 0x90, 0x64, 0x7d, 0xc8, 0xce, 0x67, 0xc7, 0x5f, 0x11, 0x9f, 0x8c, 0x3e, 0xf2, 0x9d, 0x51,
	0x18, 0x1e, 0xc4, 0x38, 0xab, 0x9d, 0xad, 0xab, 0xb3, 0x69, 0xef, 0x1b, 0x35, 0x27, 0x65, 0x26,
	0x2b, 0x09, 0xba, 0xfa, 0xb4, 0x4c, 0xe1, 0xdf, 0x03, 0x18, 0xf2, 0x98, 0x48, 0x1c, 0x4a, 0xd8,
	0x39, 0xce, 0x48, 0x82, 0x22, 0x35, 0xdd, 0xd5, 0x73, 0xb8, 0x32, 0x1b, 0xc9, 0x63, 0x32, 0xf0,
	0x7b, 0x0a, 0xb3, 0xf6, 0xd8, 0x02, 0x4f, 0x93, 0x51, 0x8d, 0x15, 0xdf, 0x4c, 0x93, 0x11, 0x98,
	0x9b, 0xcb, 0x61, 0xa7, 0xa8, 0x89, 0xaa, 0xec, 0x10, 0x90, 0x25, 0x3b, 0x04, 0x08, 0xf6, 0xbf,
	0x37, 0xd8, 0xf9, 0x3a, 0xf1, 0x7c, 0xbb, 0x35, 0xe6, 0xd8, 0x6e, 0xef, 0xb0, 0x35, 0x50, 0x8a,
	0x6d, 0x52, 0x47, 0x55, 0xbd, 0xca, 0x56, 0xcb, 0x11, 0xbb, 0xc4, 0x45, 0xf2, 0x0d, 0xc0, 0x20,
	0x35, 0xc7, 0x62, 0xcb, 0x7a, 0x83, 0x75, 0x3c, 0x19, 0xf3, 0x7d, 0x5f, 0x78, 0x7a, 0x0e, 0xcb,
	0x0d, 0xed, 0x0c, 0x26, 0xbd, 0x88, 0x8c, 0x68, 0xff, 0xe1, 0x02, 0x5b, 0xb9, 0xa9, 0xf6, 0x11,
	0x86, 0xb9, 0x2f, 0x67, 0xbc, 0x1f, 0xb3, 0x55, 0x33, 0x6b, 0x05, 0x4f, 0x05, 0xe5, 0xd0, 0x25,
	0x63, 0x8d, 0xef, 0x87, 0x41, 0x32, 0xf2, 0x8f, 0xf6, 0x0c, 0xb6, 0xea, 0xa5, 0x29, 0x53, 0x07,
	0x99, 0x54, 0x82, 0x7c, 0x21, 0xc9, 0x00, 0x28, 0xc5, 0x54, 0x23, 0xde, 0x68, 0xe3, 0xe0, 0xe7,
	0x50, 0xaa, 0xe4, 0xe8, 0x29, 0xa9, 0xca, 0xce, 0x7e, 0xc8, 0xce, 0x16, 0x37, 0x8d, 0x74, 0x3c,
	0xc6, 0x50, 0xbe, 0xba, 0xf5, 0xca, 0x6c, 0xda, 0x7b, 0xb9, 0xf6, 0x46, 0x92, 0xe6, 0x23, 0x9b,
	0x29, 0xbb, 0x92, 0xa4, 0x93, 0x3f, 0xfb, 0x8f, 0x5b, 0xec, 0x5c, 0xcd, 0x94, 0xa2, 0x93, 0x84,
	0x62, 0xc4, 0xc1, 0x43, 0xdd, 0x7a, 0x77, 0x5d, 0x30, 0x50, 0x27, 0x09, 0xe4, 0x5b, 0x3c, 0x11,
	0xd6, 0x77, 0x58, 0x47, 0x04, 0x9e, 0x52, 0xd1, 0xac, 0x3d, 0xfd, 0xcc, 0x60, 0x72, 0x62, 0x2e,
	0x02, 0x0f, 0xc5, 0x3f, 0x60, 0xe7, 0xca, 0xb5, 0x53, 0xd1, 0xf0, 0x2d, 0x17, 0x05, 0x35, 0x9c,
	0xd4, 0x3f, 0xd1, 0x32, 0x2b, 0x49, 0x63, 0xb3, 0x28, 0xd0, 0xaa, 0x17, 0x3e, 0xb3, 0x28, 0xa8,
	0x6a, 0xcd, 0x8a, 0x02, 0xad, 0xf0, 0x03, 0xb6, 0x0c, 0x8f, 0x81, 0x37, 0xaa, 0xeb, 0x8b, 0x6e,
	0xe3, 0xf5, 0xfd, 0x5d, 0x25, 0x72, 0x8b, 0x27, 0xbc, 0x7a, 0xfd, 0x2b, 0x93, 0xa6, 0xd7, 0xbf,
	0xd2, 0xfd, 0x18, 0xd8, 0xed, 0x3f, 0x5b, 0x64, 0x67, 0x2b, 0x4a, 0xac, 0xd7, 0x8c, 0x9d, 0x5c,
	0x09, 0xd9, 0x23, 0xe1, 0x1e, 0x84, 0x69, 0x39, 0xa4, 0xc2, 0x96, 0xee, 0xb3, 0xb5, 0x1c, 0x55,
	0xce, 0xfb, 0x18, 0x27, 0x55, 0xe2, 0x22, 0x65, 0x45, 0x86, 0xa9, 0x43, 0x3b, 0xeb, 0x4d, 0xb6,
	0x3c, 0xf1, 0xb9, 0x2e, 0x30, 0x5b, 0xb5, 0x3d, 0xd3, 0x1c, 0xa7, 0x07, 0x6f, 0x3e, 0x57, 0xc5,
	0x25, 0xac, 0x49, 0x14, 0x7a, 0xa9, 0x9b, 0xd7, 0x96, 0x0b, 0x58, 0xeb, 0x54, 0xd6, 0x84, 0x30,
	0xd1, 0x35, 0x51, 0x90, 0xae, 0x2c, 0xef, 0xb1, 0xd5, 0xbc, 0x5e, 0xc4, 0x61, 0xd5, 0xdf, 0xb3,
	0x24, 0x3c, 0xe4, 0x48, 0x34, 0x43, 0x70, 0x78, 0x6f, 0xb0, 0xce, 0x47, 0x29, 0x0f, 0x12, 0x99,
	0x1c, 0xe9, 0x6b, 0xae, 0x65, 0x8b, 0xce, 0x60, 0xf2, 0x7a, 0x19, 0xb1, 0xa6, 0x0e, 0x5d, 0x7a,
	0xbc, 0x3a, 0xf4, 0xd7, 0xd9, 0x92, 0xe0, 0x51, 0x20, 0x83, 0xa1, 0x2e, 0xc2, 0xcb, 0x79, 0x88,
	0x46, 0xe9, 0x06, 0x53, 0x34, 0x28, 0x45, 0x07, 0x42, 0x55, 0xd9, 0xd5, 0x52, 0x74, 0x20, 0xc8,
	0x3c, 0x00, 0x67, 0x56, 0xbb, 0xb2, 0x93, 0xd6, 0xae, 0xf6, 0x7f, 0xb4, 0xd8, 0x19, 0xea, 0xf4,
	0xc0, 0x46, 0x20, 0x37, 0x72, 0xb9, 0xaf, 0x33, 0xd1, 0xd5, 0x8a, 0x8d, 0xe4, 0x38, 0x99, 0x44,
	0x3e, 0x91, 0xdb, 0x40, 0x84, 0x25, 0x05, 0x8e, 0x7d, 0x1e, 0x78, 0xea, 0x96, 0xdf, 0x22, 0x8e,
	0xa7, 0xbc, 0xa4, 0x84, 0x87, 0x2c, 0x29, 0x9f, 0xc8, 0xad, 0x0c, 0x00, 0x6d, 0x63, 0xe1, 0x49,
	0xee, 0x80, 0x18, 0xd4, 0x9a, 0xed, 0x5a, 0x6d, 0x84, 0x87, 0x68, 0x43, 0x64, 0x4f, 0x01, 0xb0,
	0xab, 0x14, 0x67, 0x31, 0xba, 0xa5, 0xda, 0x62, 0xbd, 0xc4, 0x45, 0x76, 0x15, 0x62, 0xc5, 0x08,
	0xdf, 0x61, 0x6b, 0x85, 0x53, 0x47, 0x0c, 0xd7, 0x7a, 0xb5, 0xa2, 0xb3, 0xc4, 0x45, 0xcc, 0x26,
	0x73, 0xfc, 0xf7, 0x01, 0xa1, 0xf1, 0x24, 0x12, 0x6e, 0x18, 0x79, 0x31, 0xda, 0xc1, 0x67, 0xc5,
	0x13, 0xcd, 0x57, 0x1b, 0x4f, 0xfa, 0x0a, 0xb3, 0xff, 0xba, 0xc1, 0xce, 0x56, 0xce, 0x7f, 0xac,
	0xb7, 0x58, 0x1b, 0xaf, 0xf2, 0x67, 0x37, 0xd9, 0xce, 0x93, 0x80, 0xee, 0x09, 0xff, 0xc1, 0xd1,
	0x44, 0x54, 0xc2, 0xa1, 0x12, 0x21, 0xe1, 0x50, 0x91, 0xac, 0x87, 0x6c, 0x79, 0x90, 0x06, 0x6e,
	0x92, 0x5f, 0x4e, 0xa3, 0x47, 0x1e, 0xdb, 0x7e, 0x98, 0x7a, 0x77, 0x34, 0x43, 0xcd, 0x6d, 0x3e,
	0x2d, 0x49, 0xbf, 0x12, 0xc8, 0xa8, 0xf6, 0xef, 0x2f, 0xb0, 0xe5, 0x7c, 0x50, 0xa7, 0xaa, 0xf5,
	0xde, 0x62, 0x6d, 0xfc, 0xe8, 0x20, 0x1b, 0xdb, 0x79, 0x72, 0x51, 0x5c, 0xf8, 0xde, 0x4e, 0x30,
	0x08, 0x6b, 0xee, 0x8a, 0x83, 0x48, 0xe9, 0xae, 0x38, 0x90, 0xac, 0x7d, 0xd6, 0x75, 0xc3, 0x20,
	0x10, 0x6e, 0x71, 0x45, 0x8e, 0xe6, 0x15, 0xdb, 0x39, 0x8a, 0x13, 0x59, 0x6d, 0xea, 0xe5, 0xc2,
	0xe5, 0x6f, 0x77, 0x32, 0x3a, 0xc4, 0x6a, 0x48, 0xea, 0x1d, 0xe9, 0xa9, 0xac, 0xab, 0x1a, 0xab,
	0x33, 0x98, 0xb8, 0x12, 0x20, 0xee, 0x78, 0x66, 0x1d, 0xb2, 0x38, 0x67, 0x1d, 0xb2, 0xc3, 0xd6,
	0x22, 0x31, 0x51, 0x0d, 0xe7, 0x61, 0x14, 0xa6, 0x13, 0x95, 0x38, 0x9d, 0x44, 0xc5, 0x99, 0x4c,
	0xf0, 0x2e, 0xca, 0xd5, 0x5e, 0xfc, 0x5b, 0x7a, 0xec, 0x8b, 0x7f, 0xf6, 0xdf, 0xb5, 0xd9, 0x2a,
	0x31, 0xa9, 0xf9, 0xbf, 0x35, 0x98, 0xfb, 0x06, 0xf3, 0x88, 0x2d, 0x45, 0xea, 0x46, 0xad, 0xbe,
	0x8d, 0xf0, 0xca, 0x71, 0xf6, 0xad, 0x2f, 0xde, 0xf6, 0x45, 0x3c, 0x09, 0x83, 0x58, 0xa0, 0x01,
	0x94, 0x83, 0x80, 0x56, 0x45, 0x56, 0x4e, 0xd3, 0xac, 0x03, 0x3c, 0x19, 0x41, 0x59, 0x5d, 0x52,
	0xcd, 0xf5, 0xa8, 0xb2, 0x95, 0x64, 0xba, 0x88, 0xeb, 0xce, 0x88, 0xd6, 0x6f, 0xb0, 0xb3, 0xd9,
	0x46, 0x83, 0xf4, 0xf4, 0x50, 0x7a, 0x22, 0xd2, 0x11, 0xb9, 0xec, 0x77, 0x2a, 0x7c, 0xe4, 0x8a,
	0x58, 0x86, 0xee, 0x6a, 0xd0, 0x7a, 0xc8, 0xac, 0x5c, 0x42, 0xdb, 0xb5, 0xf0, 0xf4, 0x1d, 0x95,
	0x72, 0x47, 0xbe, 0xca, 0x48, 0x3a, 0xf2, 0x19, 0xbc, 0x9d, 0xa1, 0x4f, 0xe6, 0x40, 0x79, 0xbb,
	0x7a, 0x46, 0x34, 0xff, 0xd1, 0x76, 0xca, 0xd6, 0xb2, 0xf9, 0x80, 0xd1, 0x0f, 0xe4, 0x10, 0xdd,
	0x76, 0x77, 0xf3, 0x05, 0xd3, 0xc7, 0x94, 0x26, 0x67, 0x1b, 0x19, 0xab, 0xfd, 0x62, 0xaa, 0x88,
	0xf6, 0x8b, 0x89, 0x68, 0xb9, 0x7b, 0xc5, 0x4e, 0xdb, 0xbd, 0xb2, 0x7f, 0xd9, 0x64, 0xcf, 0xd4,
	0x0f, 0xcf, 0xfa, 0x90, 0x9d, 0x8f, 0xc4, 0x38, 0x4c, 0x84, 0x93, 0xaf, 0x8f, 0xe1, 0x79, 0xcb,
	0x0d, 0x89, 0x3a, 0x56, 0x92, 0xf0, 0x2b, 0x86, 0xec, 0x59, 0x78, 0x29, 0xa2, 0x68, 0xbc, 0x34,
	0xe7, 0x6b, 0xbc, 0x58, 0x1f, 0x40, 0x25, 0x73, 0xe8, 0x1c, 0xf2, 0x28, 0x73, 0xbf, 0xbd, 0x9a,
	0xf9, 0xbe, 0x1d, 0x1c, 0xbe, 0xc7, 0x23, 0x09, 0x15, 0x77, 0x5c, 0x53, 0xea, 0x28, 0xf9, 0x52,
	0xa9, 0x03, 0x12, 0x50, 0x39, 0x2c, 0xa9, 0x45, 0xc8, 0x9a, 0x73, 0x75, 0xcb, 0xb9, 0x13, 0x24,
	0x22, 0x0a, 0xb8, 0xaf, 0x97, 0xb3, 0xbc, 0xc9, 0xb5, 0x02, 0xa2, 0x5f, 0xd3, 0xec, 0xdf, 0x66,
	0xe7, 0xeb, 0x06, 0x09, 0x09, 0x5d, 0x71, 0x40, 0x57, 0x4e, 0xe8, 0xca, 0x55, 0xfd, 0x81, 0x38,
	0xb2, 0x5e, 0x33, 0x4f, 0x77, 0xab, 0x4d, 0x5b, 0xc4, 0x48, 0xd3, 0x16, 0x29, 0xf6, 0x4f, 0x1a,
	0xec, 0xf2, 0xe7, 0xb9, 0x92, 0xd3, 0x7e, 0x67, 0xfc, 0x16, 0x6b, 0xe3, 0xa7, 0x90, 0xd9, 0xca,
	0x9c, 0x2c, 0xda, 0x2a, 0x11, 0xb2, 0xd6, 0x8a, 0x64, 0xff, 0x9e, 0x61, 0xa2, 0x74, 0xca, 0x21,
	0xdb, 0x8e, 0xd2, 0x20, 0x91, 0xb9, 0x55, 0x56, 0x1c, 0xad, 0x42, 0xa9, 0xa3, 0x55, 0x34, 0xb0,
	0xbe, 0xb1, 0x18, 0x87, 0x91, 0xea, 0xa2, 0xb4, 0xaa, 0xe9, 0x0e, 0x82, 0x34, 0xdd, 0x41, 0x12,
	0x3c, 0x76, 0xc4, 0x03, 0xcf, 0x17, 0x91, 0x2e, 0xaa, 0xca, 0x8f, 0xd5, 0x28, 0x8d, 0xcc, 0x8a,
	0x06, 0x81, 0x1d, 0x1e, 0xef, 0x84, 0xa9, 0xaa, 0xa5, 0x5a, 0x15, 0xcb, 0xcc, 0x60, 0x22, 0x0e,
	0xc4, 0xb7, 0xd3, 0xc4, 0xfe, 0xaf, 0x0e, 0x63, 0xef, 0x71, 0x5f, 0x7a, 0xd8, 0x14, 0x83, 0x02,
	0x08, 0x02, 0x87, 0x8c, 0x84, 0x8a, 0x7f, 0x9d, 0x9a, 0x00, 0xa0, 0xe0, 0x52, 0x00, 0x50, 0x44,
	0x88, 0x85, 0x23, 0xe9, 0x09, 0xdd, 0x65, 0x2c, 0xc7, 0x42, 0x80, 0x48, 0x2c, 0x04, 0x02, 0xbc,
	0x01, 0x8f, 0x8d, 0x2f, 0x9e, 0xaa, 0xcf, 0xcc, 0x60, 0xf2, 0x06, 0x3c, 0x56, 0x5f, 0x3a, 0x15,
	0xa9, 0xc9, 0xc2, 0x9c, 0xa9, 0xc9, 0x0d, 0xd6, 0x4e, 0x03, 0xf9, 0x51, 0x2a, 0xf4, 0x7d, 0xff,
	0x4a, 0xbf, 0x06, 0x41, 0xda, 0xaf, 0x41, 0x12, 0xfa, 0xfa, 0x11, 0x8f, 0xf4, 0x1d, 0x61, 0xc8,
	0x67, 0x56, 0xab, 0xbe, 0x3e, 0x67, 0xa0, 0xbe, 0x7e, 0xc4, 0x23, 0x75, 0x3b, 0xf8, 0x1d, 0xb6,
	0x26, 0x83, 0xc4, 0x89, 0x78, 0x30, 0x14, 0x5a, 0x13, 0x43, 0x4d, 0x65, 0x47, 0x5e, 0xe2, 0x22,
	0x79, 0xbf, 0x0c, 0x92, 0x3e, 0x40, 0x4a, 0xe5, 0xfb, 0xcc, 0xf2, 0xc2, 0x74, 0xdf, 0x17, 0x44,
	0x6b, 0xf7, 0x72, 0xeb, 0x4a, 0xa3, 0x12, 0x25, 0xab, 0x8c, 0x24, 0x02, 0x2b, 0xd8, 0xd0, 0xad,
	0xbe, 0x8f, 0x50, 0x37, 0x4b, 0x97, 0x8e, 0xfb, 0x3e, 0xa2, 0x72, 0x3d, 0x74, 0x49, 0xc6, 0xb7,
	0xf1, 0x7a, 0xe9, 0x5d, 0xd6, 0x9d, 0xf8, 0xdc, 0x15, 0x23, 0xf5, 0x7d, 0x5c, 0xa7, 0x36, 0xc4,
	0x18, 0x1c, 0xf4, 0xea, 0x5b, 0x41, 0xb7, 0x7e, 0x93, 0x9d, 0x1b, 0xc8, 0x47, 0xc2, 0x73, 0x7c,
	0x19, 0x27, 0x8e, 0xf0, 0x05, 0x94, 0xcb, 0xea, 0xfe, 0x55, 0xb5, 0x6d, 0x54, 0xc3, 0x49, 0x73,
	0x01, 0xc0, 0xef, 0xc9, 0x38, 0xb9, 0xad, 0x51, 0x5c, 0x95, 0x58, 0x7d, 0x1f, 0xec, 0xb8, 0xa3,
	0x50, 0xba, 0x42, 0x5f, 0xda, 0xae, 0xac, 0x0a, 0xe5, 0xa2, 0xab, 0x12, 0xe3, 0x97, 0xc4, 0xdb,
	0x88, 0x40, 0x49, 0x8c, 0x23, 0xc0, 0x7e, 0xe9, 0x6a, 0x6d, 0xdb, 0x24, 0xc7, 0xc9, 0xb6, 0x02,
	0xea, 0x03, 0x7d, 0xa9, 0x41, 0xc6, 0xce, 0x90, 0xfb, 0xbe, 0x88, 0x8e, 0xf4, 0x75, 0xa5, 0xca,
	0xa7, 0x76, 0x39, 0x03, 0xb1, 0x37, 0x19, 0xdf, 0x55, 0x54, 0xeb, 0x36, 0xeb, 0xca, 0xd8, 0x99,
	0xf0, 0x38, 0xfe, 0x38, 0x8c, 0x3c, 0xbc, 0xb3, 0x74, 0x52, 0x2d, 0x4c, 0xc6, 0xbb, 0x5a, 0xce,
	0xfa, 0xbe, 0xba, 0xd4, 0xae, 0x32, 0x6c, 0x3c, 0xaa, 0x5b, 0x9f, 0x43, 0xd3, 0x8a, 0x8c, 0x55,
	0x33, 0xa9, 0x1f, 0xfa, 0xc2, 0xfe, 0xa3, 0x36, 0x5b, 0xce, 0x7d, 0xf8, 0x13, 0xfa, 0xa0, 0xf0,
	0x89, 0x9d, 0xc4, 0xc1, 0xa4, 0x07, 0x93, 0x54, 0xaf, 0x5b, 0xfd, 0x41, 0x52, 0xc1, 0x40, 0x27,
	0x1d, 0xc8, 0xd9, 0xca, 0xa9, 0xef, 0xd6, 0x51, 0xc9, 0x67, 0x7d, 0xd8, 0x5e, 0x51, 0x82, 0x64,
	0x54, 0xf2, 0x21, 0x3b, 0x13, 0xa7, 0xfb, 0x8e, 0xe2, 0x93, 0xc1, 0x20, 0xc4, 0x2a, 0x8c, 0xfe,
	0x5f, 0x82, 0xbd, 0x74, 0xbf, 0x88, 0x86, 0xe5, 0x00, 0x32, 0x0e, 0xbd, 0xb4, 0x74, 0x00, 0xb1,
	0x12, 0x1b, 0x02, 0xd6, 0x43, 0xc6, 0x0e, 0xf3, 0x28, 0x80, 0x69, 0x35, 0xbd, 0xb5, 0x5f, 0x84,
	0x88, 0xca, 0xe8, 0x0b, 0x39, 0xb2, 0x22, 0x05, 0x59, 0x7d, 0xae, 0x12, 0x49, 0xee, 0xeb, 0x96,
	0x76, 0xf5, 0x73, 0x15, 0x00, 0x4b, 0x9f, 0xab, 0x00, 0x09, 0x3f, 0x88, 0xe7, 0xfb, 0xc2, 0xd7,
	0xee, 0xa2, 0xf2, 0x41, 0x3c, 0x60, 0xf4, 0x83, 0x78, 0xa0, 0xd4, 0x16, 0x8a, 0xcb, 0x8f, 0xff,
	0x85, 0x58, 0xc8, 0x9e, 0xa3, 0xa5, 0xac, 0x63, 0x98, 0xab, 0xca, 0x99, 0xaf, 0xcf, 0xa6, 0xbd,
	0x6b, 0x24, 0x5a, 0x1e, 0xc3, 0x6f, 0x3e, 0xe8, 0x59, 0x52, 0xe7, 0xee, 0xe4, 0x3c, 0xf6, 0x3f,
	0x2c, 0xb0, 0x15, 0x73, 0x5d, 0xff, 0x7f, 0x87, 0x1c, 0xb7, 0x43, 0xa8, 0xfd, 0x2e, 0x7e, 0x51,
	0xf6, 0xdb, 0x9e, 0xd3, 0x7e, 0xbf, 0x98, 0x8e, 0xc5, 0x29, 0xb7, 0x85, 0xfd, 0x8f, 0x2d, 0x76,
	0x86, 0xb6, 0x92, 0x8a, 0x9c, 0xbc, 0x31, 0x57, 0x4e, 0x8e, 0x69, 0xa2, 0xcf, 0x0d, 0xf3, 0xa9,
	0xa6, 0x89, 0x7e, 0x65, 0x4e, 0x73, 0x99, 0x53, 0x1d, 0x1e, 0xba, 0xec, 0x69, 0x15, 0x6f, 0xf5,
	0x57, 0x0b, 0xf9, 0x00, 0xd4, 0xb7, 0x9f, 0xd7, 0x66, 0xd3, 0xde, 0x2b, 0xe6, 0xd0, 0xeb, 0x78,
	0x4d, 0xad, 0xe7, 0x90, 0xe3, 0x01, 0x32, 0xf4, 0xb3, 0x81, 0x3d, 0x64, 0x16, 0x18, 0x0d, 0xb6,
	0x05, 0x8a, 0x27, 0x2c, 0xd6, 0xb6, 0x19, 0xaa, 0x8c, 0x24, 0xb5, 0xc8, 0xe1, 0x5c, 0x79, 0x9d,
	0x35, 0xb4, 0x1f, 0xbf, 0x7f, 0xf5, 0xe3, 0x05, 0xb6, 0xf4, 0x43, 0xb1, 0x3f, 0x0a, 0xc3, 0x83,
	0x2f, 0xe7, 0xb1, 0x6f, 0x6e, 0x64, 0x0b, 0x73, 0x19, 0x19, 0xbd, 0xc9, 0xb9, 0x78, 0xba, 0x9b,
	0x9c, 0x59, 0x73, 0xae, 0x3d, 0x47, 0x73, 0xee, 0x06, 0x6b, 0x8b, 0x43, 0x4c, 0x2a, 0x97, 0x6a,
	0x2b, 0x0a, 0x05, 0xd2, 0xeb, 0x44, 0x48, 0xca, 0xfe, 0x69, 0x51, 0xe7, 0xc4, 0xff, 0xb4, 0xa8,
	0xee, 0x13, 0xe9, 0xe5, 0xc7, 0xfe, 0x44, 0x7a, 0xeb, 0xbb, 0x7f, 0xfb, 0xc9, 0xa5, 0xc6, 0xcf,
	0x3f, 0xb9, 0xd4, 0xf8, 0xc5, 0x27, 0x97, 0x1a, 0x3f, 0xfe, 0xf4, 0xd2, 0x53, 0x3f, 0xff, 0xf4,
	0xd2, 0x53, 0xff, 0xf2, 0xe9, 0xa5, 0xa7, 0xde, 0x7f, 0x69, 0x28, 0x13, 0x9f, 0xef, 0x5f, 0x75,
	0xc3, 0xf1, 0x35, 0x3e, 0x91, 0x49, 0x78, 0x55, 0x86, 0xd7, 0xd4, 0x3f, 0x16, 0x8a, 0xaf, 0xe5,
	0xfe, 0x72, 0xbf, 0x8d, 0xbf, 0x5e, 0xff, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x37, 0x3f, 0xf4,
	0x58, 0x94, 0x4c, 0x00, 0x00,
}

func (m *PictureDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PictureDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PictureDeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FieldName) > 0 {
		i -= len(m.FieldName)
		copy(dAtA[i:], m.FieldName)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.FieldName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Urls) > 0 {
		for iNdEx := len(m.Urls) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Urls[iNdEx])
			copy(dAtA[i:], m.Urls[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.Urls[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FileDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Buffer) > 0 {
		i -= len(m.Buffer)
		copy(dAtA[i:], m.Buffer)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Buffer)))
		i--
		dAtA[i] = 0x62
	}
	if m.UploadParam != nil {
		{
			size, err := m.UploadParam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.S3Key) > 0 {
		i -= len(m.S3Key)
		copy(dAtA[i:], m.S3Key)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.S3Key)))
		i--
		dAtA[i] = 0x42
	}
	if m.Size_ != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FileExtension) > 0 {
		i -= len(m.FileExtension)
		copy(dAtA[i:], m.FileExtension)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.FileExtension)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.XKey) > 0 {
		i -= len(m.XKey)
		copy(dAtA[i:], m.XKey)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.XKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UploadParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowMulti {
		i--
		if m.AllowMulti {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.FieldName) > 0 {
		i -= len(m.FieldName)
		copy(dAtA[i:], m.FieldName)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.FieldName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ModelName) > 0 {
		i -= len(m.ModelName)
		copy(dAtA[i:], m.ModelName)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ModelName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProjectId) > 0 {
		i -= len(m.ProjectId)
		copy(dAtA[i:], m.ProjectId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ProjectId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DocId) > 0 {
		i -= len(m.DocId)
		copy(dAtA[i:], m.DocId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.DocId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Filter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Filter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Filter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Max != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Max))
		i--
		dAtA[i] = 0x30
	}
	if m.Min != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Min))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Order) > 0 {
		i -= len(m.Order)
		copy(dAtA[i:], m.Order)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Order)))
		i--
		dAtA[i] = 0x22
	}
	if m.Limit != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Retry {
		i--
		if m.Retry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.SearchString) > 0 {
		i -= len(m.SearchString)
		copy(dAtA[i:], m.SearchString)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.SearchString)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FileLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FilePickParameter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilePickParameter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilePickParameter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Origin != nil {
		{
			size, err := m.Origin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.PickerTitle) > 0 {
		i -= len(m.PickerTitle)
		copy(dAtA[i:], m.PickerTitle)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.PickerTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.S3Folder) > 0 {
		i -= len(m.S3Folder)
		copy(dAtA[i:], m.S3Folder)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.S3Folder)))
		i--
		dAtA[i] = 0x12
	}
	if m.NumberOfImages != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.NumberOfImages))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ImageMetaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageMetaInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageMetaInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Height != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x20
	}
	if m.Width != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Profession) > 0 {
		i -= len(m.Profession)
		copy(dAtA[i:], m.Profession)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Profession)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FullName) > 0 {
		i -= len(m.FullName)
		copy(dAtA[i:], m.FullName)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.FullName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Role) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Role) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Role) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsAdmin {
		i--
		if m.IsAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.SystemGenerated {
		i--
		if m.SystemGenerated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.LogicExecutions) > 0 {
		for iNdEx := len(m.LogicExecutions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LogicExecutions[iNdEx])
			copy(dAtA[i:], m.LogicExecutions[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.LogicExecutions[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AdministrativePermissions) > 0 {
		for iNdEx := len(m.AdministrativePermissions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AdministrativePermissions[iNdEx])
			copy(dAtA[i:], m.AdministrativePermissions[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.AdministrativePermissions[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ApiPermissions) > 0 {
		for k := range m.ApiPermissions {
			v := m.ApiPermissions[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCommon(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCommon(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCommon(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *APIPermission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIPermission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIPermission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Delete) > 0 {
		i -= len(m.Delete)
		copy(dAtA[i:], m.Delete)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Delete)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Update) > 0 {
		i -= len(m.Update)
		copy(dAtA[i:], m.Update)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Update)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Create) > 0 {
		i -= len(m.Create)
		copy(dAtA[i:], m.Create)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Create)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Read) > 0 {
		i -= len(m.Read)
		copy(dAtA[i:], m.Read)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Read)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *SystemUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.RefreshToken) > 0 {
		i -= len(m.RefreshToken)
		copy(dAtA[i:], m.RefreshToken)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.RefreshToken)))
		i--
		dAtA[i] = 0x6a
	}
	if m.IsSuperAdmin {
		i--
		if m.IsSuperAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.ProjectLimit != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.ProjectLimit))
		i--
		dAtA[i] = 0x58
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CurrentProjectId) > 0 {
		i -= len(m.CurrentProjectId)
		copy(dAtA[i:], m.CurrentProjectId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.CurrentProjectId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.XKey) > 0 {
		i -= len(m.XKey)
		copy(dAtA[i:], m.XKey)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.XKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserProjects) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserProjects) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserProjects) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Projects) > 0 {
		for iNdEx := len(m.Projects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Projects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProjectUser {
		i--
		if m.ProjectUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetaField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetaField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TenantId) > 0 {
		i -= len(m.TenantId)
		copy(dAtA[i:], m.TenantId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.TenantId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LastModifiedBy != nil {
		{
			size, err := m.LastModifiedBy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CreatedBy != nil {
		{
			size, err := m.CreatedBy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PreviewMode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreviewMode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreviewMode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Project) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Project) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Project) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TrialEnds) > 0 {
		i -= len(m.TrialEnds)
		copy(dAtA[i:], m.TrialEnds)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.TrialEnds)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Plan) > 0 {
		i -= len(m.Plan)
		copy(dAtA[i:], m.Plan)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Plan)))
		i--
		dAtA[i] = 0x7a
	}
	if m.TempBanned {
		i--
		if m.TempBanned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.Driver != nil {
		{
			size, err := m.Driver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Roles) > 0 {
		for k := range m.Roles {
			v := m.Roles[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCommon(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCommon(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCommon(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.Addons != nil {
		{
			size, err := m.Addons.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.Extensions) > 0 {
		for k := range m.Extensions {
			v := m.Extensions[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCommon(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCommon(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCommon(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.ExpireAt) > 0 {
		i -= len(m.ExpireAt)
		copy(dAtA[i:], m.ExpireAt)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ExpireAt)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x32
	}
	if m.Schema != nil {
		{
			size, err := m.Schema.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProjectDescription) > 0 {
		i -= len(m.ProjectDescription)
		copy(dAtA[i:], m.ProjectDescription)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ProjectDescription)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProjectName) > 0 {
		i -= len(m.ProjectName)
		copy(dAtA[i:], m.ProjectName)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ProjectName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.XKey) > 0 {
		i -= len(m.XKey)
		copy(dAtA[i:], m.XKey)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.XKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SupportAndTicket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SupportAndTicket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SupportAndTicket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Replies) > 0 {
		for iNdEx := len(m.Replies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Replies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.IssueDescription) > 0 {
		i -= len(m.IssueDescription)
		copy(dAtA[i:], m.IssueDescription)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.IssueDescription)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x32
	}
	if m.Resolved {
		i--
		if m.Resolved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.ProjectId) > 0 {
		i -= len(m.ProjectId)
		copy(dAtA[i:], m.ProjectId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ProjectId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.XKey) > 0 {
		i -= len(m.XKey)
		copy(dAtA[i:], m.XKey)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.XKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TicketReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TicketReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TicketReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Edited {
		i--
		if m.Edited {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x1a
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProjectInvoices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProjectInvoices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProjectInvoices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PaymentGateway != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PaymentGateway))))
		i--
		dAtA[i] = 0x69
	}
	if m.Tax != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Tax))))
		i--
		dAtA[i] = 0x61
	}
	if m.Amount != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Amount))))
		i--
		dAtA[i] = 0x59
	}
	if len(m.PaymentMethod) > 0 {
		i -= len(m.PaymentMethod)
		copy(dAtA[i:], m.PaymentMethod)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.PaymentMethod)))
		i--
		dAtA[i] = 0x52
	}
	if m.DiscountPercentage != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.DiscountPercentage))
		i--
		dAtA[i] = 0x48
	}
	if m.DiscountAmount != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DiscountAmount))))
		i--
		dAtA[i] = 0x41
	}
	if len(m.CouponCode) > 0 {
		i -= len(m.CouponCode)
		copy(dAtA[i:], m.CouponCode)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.CouponCode)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SubscriptionEnd) > 0 {
		i -= len(m.SubscriptionEnd)
		copy(dAtA[i:], m.SubscriptionEnd)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.SubscriptionEnd)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SubscriptionStart) > 0 {
		i -= len(m.SubscriptionStart)
		copy(dAtA[i:], m.SubscriptionStart)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.SubscriptionStart)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProjectId) > 0 {
		i -= len(m.ProjectId)
		copy(dAtA[i:], m.ProjectId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ProjectId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.XKey) > 0 {
		i -= len(m.XKey)
		copy(dAtA[i:], m.XKey)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.XKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProjectUsages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProjectUsages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProjectUsages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limits != nil {
		{
			size, err := m.Limits.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Usage != nil {
		{
			size, err := m.Usage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.XKey) > 0 {
		i -= len(m.XKey)
		copy(dAtA[i:], m.XKey)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.XKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DriverCredentials) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriverCredentials) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DriverCredentials) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProjectCredentialJson) > 0 {
		i -= len(m.ProjectCredentialJson)
		copy(dAtA[i:], m.ProjectCredentialJson)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ProjectCredentialJson)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ProjectId) > 0 {
		i -= len(m.ProjectId)
		copy(dAtA[i:], m.ProjectId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ProjectId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Database) > 0 {
		i -= len(m.Database)
		copy(dAtA[i:], m.Database)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Database)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Engine) > 0 {
		i -= len(m.Engine)
		copy(dAtA[i:], m.Engine)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Engine)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *APIToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Expire) > 0 {
		i -= len(m.Expire)
		copy(dAtA[i:], m.Expire)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Expire)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExtensionDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtensionDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtensionDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Credentials != nil {
		{
			size, err := m.Credentials.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThirdPartyCredential) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThirdPartyCredential) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThirdPartyCredential) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ApiKey) > 0 {
		i -= len(m.ApiKey)
		copy(dAtA[i:], m.ApiKey)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ApiKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SecretKey) > 0 {
		i -= len(m.SecretKey)
		copy(dAtA[i:], m.SecretKey)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.SecretKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccessKey) > 0 {
		i -= len(m.AccessKey)
		copy(dAtA[i:], m.AccessKey)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.AccessKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountId) > 0 {
		i -= len(m.AccountId)
		copy(dAtA[i:], m.AccountId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.AccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddOnsDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddOnsDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddOnsDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Auth != nil {
		{
			size, err := m.Auth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.RevisionHistory {
		i--
		if m.RevisionHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.SystemGraphqlHooks {
		i--
		if m.SystemGraphqlHooks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Locals) > 0 {
		for iNdEx := len(m.Locals) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Locals[iNdEx])
			copy(dAtA[i:], m.Locals[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.Locals[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AuthenticationAddOns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthenticationAddOns) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthenticationAddOns) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Disabled {
		i--
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.AuthUserRoles) > 0 {
		i -= len(m.AuthUserRoles)
		copy(dAtA[i:], m.AuthUserRoles)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.AuthUserRoles)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountUsage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountUsage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountUsage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumberOfProject != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.NumberOfProject))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Usages) > 0 {
		for iNdEx := len(m.Usages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Usages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Limits != nil {
		{
			size, err := m.Limits.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Subscriptions) > 0 {
		for iNdEx := len(m.Subscriptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subscriptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.XKey) > 0 {
		i -= len(m.XKey)
		copy(dAtA[i:], m.XKey)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.XKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MonthlySubscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonthlySubscription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MonthlySubscription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubsData != nil {
		{
			size, err := m.SubsData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PaymentStatus) > 0 {
		i -= len(m.PaymentStatus)
		copy(dAtA[i:], m.PaymentStatus)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.PaymentStatus)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SubscriptionStatus) > 0 {
		i -= len(m.SubscriptionStatus)
		copy(dAtA[i:], m.SubscriptionStatus)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.SubscriptionStatus)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EndDate) > 0 {
		i -= len(m.EndDate)
		copy(dAtA[i:], m.EndDate)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.EndDate)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StartDate) > 0 {
		i -= len(m.StartDate)
		copy(dAtA[i:], m.StartDate)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.StartDate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommonPaymentData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonPaymentData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonPaymentData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tax != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Tax))))
		i--
		dAtA[i] = 0x51
	}
	if m.Fee != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Fee))))
		i--
		dAtA[i] = 0x49
	}
	if m.Earning != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Earning))))
		i--
		dAtA[i] = 0x41
	}
	if len(m.PaymentMethod) > 0 {
		i -= len(m.PaymentMethod)
		copy(dAtA[i:], m.PaymentMethod)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.PaymentMethod)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Quantity != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x30
	}
	if len(m.DiscountCode) > 0 {
		i -= len(m.DiscountCode)
		copy(dAtA[i:], m.DiscountCode)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.DiscountCode)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ProductAmount != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ProductAmount))))
		i--
		dAtA[i] = 0x21
	}
	if len(m.PlanCode) > 0 {
		i -= len(m.PlanCode)
		copy(dAtA[i:], m.PlanCode)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.PlanCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CheckoutSystem) > 0 {
		i -= len(m.CheckoutSystem)
		copy(dAtA[i:], m.CheckoutSystem)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.CheckoutSystem)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UsagesTracking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsagesTracking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UsagesTracking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumberOfRecords != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.NumberOfRecords))
		i--
		dAtA[i] = 0x48
	}
	if m.NumberOfMedia != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.NumberOfMedia))
		i--
		dAtA[i] = 0x40
	}
	if m.MediaBandwidth != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MediaBandwidth))))
		i--
		dAtA[i] = 0x39
	}
	if m.MediaStorage != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MediaStorage))))
		i--
		dAtA[i] = 0x31
	}
	if m.ApiBandwidth != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ApiBandwidth))))
		i--
		dAtA[i] = 0x29
	}
	if m.ApiCalls != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.ApiCalls))
		i--
		dAtA[i] = 0x20
	}
	return len(dAtA) - i, nil
}

func (m *UserDefinedSchema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDefinedSchema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserDefinedSchema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Functions) > 0 {
		for iNdEx := len(m.Functions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Functions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Models) > 0 {
		for iNdEx := len(m.Models) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Models[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ModelType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SystemGenerated {
		i--
		if m.SystemGenerated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.RepeatedGroups) > 0 {
		for iNdEx := len(m.RepeatedGroups) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RepeatedGroups[iNdEx])
			copy(dAtA[i:], m.RepeatedGroups[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.RepeatedGroups[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Locals) > 0 {
		for iNdEx := len(m.Locals) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Locals[iNdEx])
			copy(dAtA[i:], m.Locals[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.Locals[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.HookIds) > 0 {
		for iNdEx := len(m.HookIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.HookIds[iNdEx])
			copy(dAtA[i:], m.HookIds[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.HookIds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Connections) > 0 {
		for iNdEx := len(m.Connections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Connections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CloudFunction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudFunction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudFunction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x52
	}
	if m.ProviderConfig != nil {
		{
			size, err := m.ProviderConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x3a
	}
	if m.FunctionConnected {
		i--
		if m.FunctionConnected {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.FunctionProvider) > 0 {
		i -= len(m.FunctionProvider)
		copy(dAtA[i:], m.FunctionProvider)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.FunctionProvider)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FunctionProviderConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FunctionProviderConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FunctionProviderConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Configs != nil {
		{
			size, err := m.Configs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.EnvVars) > 0 {
		for iNdEx := len(m.EnvVars) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EnvVars[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RemoteFunctionName) > 0 {
		i -= len(m.RemoteFunctionName)
		copy(dAtA[i:], m.RemoteFunctionName)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.RemoteFunctionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FunctionEnvVariables) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FunctionEnvVariables) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FunctionEnvVariables) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CloudFunctionRequestResponseType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudFunctionRequestResponseType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudFunctionRequestResponseType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Params) > 0 {
		for iNdEx := len(m.Params) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Params[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *FunctionInternalConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FunctionInternalConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FunctionInternalConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeOut != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.TimeOut))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Handler) > 0 {
		i -= len(m.Handler)
		copy(dAtA[i:], m.Handler)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Handler)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Memory != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Memory))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Runtime) > 0 {
		i -= len(m.Runtime)
		copy(dAtA[i:], m.Runtime)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Runtime)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Validation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsSystemRole {
		i--
		if m.IsSystemRole {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.IsPassword {
		i--
		if m.IsPassword {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.IsGallery {
		i--
		if m.IsGallery {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if len(m.ListType) > 0 {
		i -= len(m.ListType)
		copy(dAtA[i:], m.ListType)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ListType)))
		i--
		dAtA[i] = 0x6a
	}
	if m.IsMultiChoice {
		i--
		if m.IsMultiChoice {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.DoubleRangeLimit) > 0 {
		for iNdEx := len(m.DoubleRangeLimit) - 1; iNdEx >= 0; iNdEx-- {
			f24 := math.Float64bits(float64(m.DoubleRangeLimit[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f24))
		}
		i = encodeVarintCommon(dAtA, i, uint64(len(m.DoubleRangeLimit)*8))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.IntRangeLimit) > 0 {
		dAtA26 := make([]byte, len(m.IntRangeLimit)*10)
		var j25 int
		for _, num := range m.IntRangeLimit {
			for num >= 1<<7 {
				dAtA26[j25] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j25++
			}
			dAtA26[j25] = uint8(num)
			j25++
		}
		i -= j25
		copy(dAtA[i:], dAtA26[:j25])
		i = encodeVarintCommon(dAtA, i, uint64(j25))
		i--
		dAtA[i] = 0x52
	}
	if len(m.FixedListElements) > 0 {
		for iNdEx := len(m.FixedListElements) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FixedListElements[iNdEx])
			copy(dAtA[i:], m.FixedListElements[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.FixedListElements[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Placeholder) > 0 {
		i -= len(m.Placeholder)
		copy(dAtA[i:], m.Placeholder)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Placeholder)))
		i--
		dAtA[i] = 0x42
	}
	if m.IsEmail {
		i--
		if m.IsEmail {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.CharLimit) > 0 {
		dAtA28 := make([]byte, len(m.CharLimit)*10)
		var j27 int
		for _, num := range m.CharLimit {
			for num >= 1<<7 {
				dAtA28[j27] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j27++
			}
			dAtA28[j27] = uint8(num)
			j27++
		}
		i -= j27
		copy(dAtA[i:], dAtA28[:j27])
		i = encodeVarintCommon(dAtA, i, uint64(j27))
		i--
		dAtA[i] = 0x32
	}
	if m.Unique {
		i--
		if m.Unique {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Locals) > 0 {
		for iNdEx := len(m.Locals) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Locals[iNdEx])
			copy(dAtA[i:], m.Locals[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.Locals[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.AsTitle {
		i--
		if m.AsTitle {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Hide {
		i--
		if m.Hide {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Required {
		i--
		if m.Required {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FieldInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RepeatedGroupIdentifier) > 0 {
		i -= len(m.RepeatedGroupIdentifier)
		copy(dAtA[i:], m.RepeatedGroupIdentifier)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.RepeatedGroupIdentifier)))
		i--
		dAtA[i] = 0x52
	}
	if m.SystemGenerated {
		i--
		if m.SystemGenerated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x42
	}
	if m.Serial != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Serial))
		i--
		dAtA[i] = 0x38
	}
	if m.Validation != nil {
		{
			size, err := m.Validation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.SubFieldInfo) > 0 {
		for iNdEx := len(m.SubFieldInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubFieldInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.FieldType) > 0 {
		i -= len(m.FieldType)
		copy(dAtA[i:], m.FieldType)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.FieldType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InputType) > 0 {
		i -= len(m.InputType)
		copy(dAtA[i:], m.InputType)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.InputType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubFieldInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubFieldInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubFieldInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x42
	}
	if m.SystemGenerated {
		i--
		if m.SystemGenerated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Serial != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Serial))
		i--
		dAtA[i] = 0x30
	}
	if m.Validation != nil {
		{
			size, err := m.Validation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FieldType) > 0 {
		i -= len(m.FieldType)
		copy(dAtA[i:], m.FieldType)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.FieldType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InputType) > 0 {
		i -= len(m.InputType)
		copy(dAtA[i:], m.InputType)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.InputType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnectionType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectionType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectionType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SystemGenerated {
		i--
		if m.SystemGenerated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.ProtectedRelation {
		i--
		if m.ProtectedRelation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.MultiTenantRelation {
		i--
		if m.MultiTenantRelation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Relation) > 0 {
		i -= len(m.Relation)
		copy(dAtA[i:], m.Relation)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Relation)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Webhook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Webhook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Webhook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LogicExecutions) > 0 {
		for iNdEx := len(m.LogicExecutions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LogicExecutions[iNdEx])
			copy(dAtA[i:], m.LogicExecutions[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.LogicExecutions[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Events[iNdEx])
			copy(dAtA[i:], m.Events[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.Events[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ProjectId) > 0 {
		i -= len(m.ProjectId)
		copy(dAtA[i:], m.ProjectId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ProjectId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.XKey) > 0 {
		i -= len(m.XKey)
		copy(dAtA[i:], m.XKey)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.XKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PictureDeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Urls) > 0 {
		for _, s := range m.Urls {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.FieldName)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *FileDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.XKey)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.FileExtension)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovCommon(uint64(m.Size_))
	}
	l = len(m.S3Key)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.UploadParam != nil {
		l = m.UploadParam.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Buffer)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *UploadParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DocId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ProjectId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.FieldName)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.AllowMulti {
		n += 2
	}
	return n
}

func (m *Filter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovCommon(uint64(m.Page))
	}
	if m.Offset != 0 {
		n += 1 + sovCommon(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovCommon(uint64(m.Limit))
	}
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Min != 0 {
		n += 1 + sovCommon(uint64(m.Min))
	}
	if m.Max != 0 {
		n += 1 + sovCommon(uint64(m.Max))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.SearchString)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Retry {
		n += 2
	}
	return n
}

func (m *FileLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *FilePickParameter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumberOfImages != 0 {
		n += 1 + sovCommon(uint64(m.NumberOfImages))
	}
	l = len(m.S3Folder)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.PickerTitle)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Origin != nil {
		l = m.Origin.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ImageMetaInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovCommon(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovCommon(uint64(m.Height))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *LoginRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *RegisterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.FullName)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Profession)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *Role) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApiPermissions) > 0 {
		for k, v := range m.ApiPermissions {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCommon(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCommon(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCommon(uint64(mapEntrySize))
		}
	}
	if len(m.AdministrativePermissions) > 0 {
		for _, s := range m.AdministrativePermissions {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.LogicExecutions) > 0 {
		for _, s := range m.LogicExecutions {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.SystemGenerated {
		n += 2
	}
	if m.IsAdmin {
		n += 2
	}
	return n
}

func (m *APIPermission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Read)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Create)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Update)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Delete)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *SystemUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.XKey)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.CurrentProjectId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ProjectLimit != 0 {
		n += 1 + sovCommon(uint64(m.ProjectLimit))
	}
	if m.IsSuperAdmin {
		n += 2
	}
	l = len(m.RefreshToken)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *UserProjects) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Projects) > 0 {
		for _, e := range m.Projects {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func (m *UserMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ProjectUser {
		n += 2
	}
	return n
}

func (m *MetaField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.CreatedBy != nil {
		l = m.CreatedBy.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.LastModifiedBy != nil {
		l = m.LastModifiedBy.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.TenantId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *PreviewMode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *Project) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.XKey)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ProjectName)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ProjectDescription)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Schema != nil {
		l = m.Schema.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ExpireAt)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Extensions) > 0 {
		for k, v := range m.Extensions {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCommon(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCommon(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCommon(uint64(mapEntrySize))
		}
	}
	if m.Addons != nil {
		l = m.Addons.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.Roles) > 0 {
		for k, v := range m.Roles {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCommon(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCommon(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCommon(uint64(mapEntrySize))
		}
	}
	if m.Driver != nil {
		l = m.Driver.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.TempBanned {
		n += 2
	}
	l = len(m.Plan)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.TrialEnds)
	if l > 0 {
		n += 2 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *SupportAndTicket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.XKey)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ProjectId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Resolved {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.IssueDescription)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Replies) > 0 {
		for _, e := range m.Replies {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func (m *TicketReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Edited {
		n += 2
	}
	return n
}

func (m *ProjectInvoices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.XKey)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ProjectId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.SubscriptionStart)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.SubscriptionEnd)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.CouponCode)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.DiscountAmount != 0 {
		n += 9
	}
	if m.DiscountPercentage != 0 {
		n += 1 + sovCommon(uint64(m.DiscountPercentage))
	}
	l = len(m.PaymentMethod)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Amount != 0 {
		n += 9
	}
	if m.Tax != 0 {
		n += 9
	}
	if m.PaymentGateway != 0 {
		n += 9
	}
	return n
}

func (m *ProjectUsages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.XKey)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Usage != nil {
		l = m.Usage.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Limits != nil {
		l = m.Limits.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *DriverCredentials) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Engine)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Database)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ProjectId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ProjectCredentialJson)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *APIToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Expire)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ExtensionDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Credentials != nil {
		l = m.Credentials.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ThirdPartyCredential) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.AccessKey)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.SecretKey)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *AddOnsDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locals) > 0 {
		for _, s := range m.Locals {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.SystemGraphqlHooks {
		n += 2
	}
	if m.RevisionHistory {
		n += 2
	}
	if m.Auth != nil {
		l = m.Auth.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *AuthenticationAddOns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.AuthUserRoles)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Disabled {
		n += 2
	}
	return n
}

func (m *AccountUsage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.XKey)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Subscriptions) > 0 {
		for _, e := range m.Subscriptions {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.Limits != nil {
		l = m.Limits.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Usages) > 0 {
		for _, e := range m.Usages {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.NumberOfProject != 0 {
		n += 1 + sovCommon(uint64(m.NumberOfProject))
	}
	return n
}

func (m *MonthlySubscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StartDate)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.EndDate)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.SubscriptionStatus)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.PaymentStatus)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.SubsData != nil {
		l = m.SubsData.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *CommonPaymentData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.CheckoutSystem)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.PlanCode)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ProductAmount != 0 {
		n += 9
	}
	l = len(m.DiscountCode)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Quantity != 0 {
		n += 1 + sovCommon(uint64(m.Quantity))
	}
	l = len(m.PaymentMethod)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Earning != 0 {
		n += 9
	}
	if m.Fee != 0 {
		n += 9
	}
	if m.Tax != 0 {
		n += 9
	}
	return n
}

func (m *UsagesTracking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiCalls != 0 {
		n += 1 + sovCommon(uint64(m.ApiCalls))
	}
	if m.ApiBandwidth != 0 {
		n += 9
	}
	if m.MediaStorage != 0 {
		n += 9
	}
	if m.MediaBandwidth != 0 {
		n += 9
	}
	if m.NumberOfMedia != 0 {
		n += 1 + sovCommon(uint64(m.NumberOfMedia))
	}
	if m.NumberOfRecords != 0 {
		n += 1 + sovCommon(uint64(m.NumberOfRecords))
	}
	return n
}

func (m *UserDefinedSchema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Models) > 0 {
		for _, e := range m.Models {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.Functions) > 0 {
		for _, e := range m.Functions {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func (m *ModelType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.Connections) > 0 {
		for _, e := range m.Connections {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.HookIds) > 0 {
		for _, s := range m.HookIds {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.Locals) > 0 {
		for _, s := range m.Locals {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.RepeatedGroups) > 0 {
		for _, s := range m.RepeatedGroups {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.SystemGenerated {
		n += 2
	}
	return n
}

func (m *CloudFunction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.FunctionProvider)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.FunctionConnected {
		n += 2
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ProviderConfig != nil {
		l = m.ProviderConfig.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *FunctionProviderConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RemoteFunctionName)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.EnvVars) > 0 {
		for _, e := range m.EnvVars {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.Configs != nil {
		l = m.Configs.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *FunctionEnvVariables) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *CloudFunctionRequestResponseType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Params) > 0 {
		for _, e := range m.Params {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func (m *FunctionInternalConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Runtime)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Memory != 0 {
		n += 1 + sovCommon(uint64(m.Memory))
	}
	l = len(m.Handler)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.TimeOut != 0 {
		n += 1 + sovCommon(uint64(m.TimeOut))
	}
	return n
}

func (m *Validation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Required {
		n += 2
	}
	if m.Hide {
		n += 2
	}
	if m.AsTitle {
		n += 2
	}
	if len(m.Locals) > 0 {
		for _, s := range m.Locals {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.Unique {
		n += 2
	}
	if len(m.CharLimit) > 0 {
		l = 0
		for _, e := range m.CharLimit {
			l += sovCommon(uint64(e))
		}
		n += 1 + sovCommon(uint64(l)) + l
	}
	if m.IsEmail {
		n += 2
	}
	l = len(m.Placeholder)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.FixedListElements) > 0 {
		for _, s := range m.FixedListElements {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.IntRangeLimit) > 0 {
		l = 0
		for _, e := range m.IntRangeLimit {
			l += sovCommon(uint64(e))
		}
		n += 1 + sovCommon(uint64(l)) + l
	}
	if len(m.DoubleRangeLimit) > 0 {
		n += 1 + sovCommon(uint64(len(m.DoubleRangeLimit)*8)) + len(m.DoubleRangeLimit)*8
	}
	if m.IsMultiChoice {
		n += 2
	}
	l = len(m.ListType)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.IsGallery {
		n += 2
	}
	if m.IsPassword {
		n += 2
	}
	if m.IsSystemRole {
		n += 3
	}
	return n
}

func (m *FieldInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.InputType)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.FieldType)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.SubFieldInfo) > 0 {
		for _, e := range m.SubFieldInfo {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.Validation != nil {
		l = m.Validation.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Serial != 0 {
		n += 1 + sovCommon(uint64(m.Serial))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.SystemGenerated {
		n += 2
	}
	l = len(m.RepeatedGroupIdentifier)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *SubFieldInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.InputType)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.FieldType)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Validation != nil {
		l = m.Validation.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Serial != 0 {
		n += 1 + sovCommon(uint64(m.Serial))
	}
	if m.SystemGenerated {
		n += 2
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *ConnectionType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Relation)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.MultiTenantRelation {
		n += 2
	}
	if m.ProtectedRelation {
		n += 2
	}
	if m.SystemGenerated {
		n += 2
	}
	return n
}

func (m *Webhook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.XKey)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ProjectId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Events) > 0 {
		for _, s := range m.Events {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.LogicExecutions) > 0 {
		for _, s := range m.LogicExecutions {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func sovCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PictureDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PictureDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PictureDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Urls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Urls = append(m.Urls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileExtension", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileExtension = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S3Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S3Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UploadParam == nil {
				m.UploadParam = &UploadParams{}
			}
			if err := m.UploadParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buffer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buffer = append(m.Buffer[:0], dAtA[iNdEx:postIndex]...)
			if m.Buffer == nil {
				m.Buffer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowMulti", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowMulti = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Filter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Filter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Filter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			m.Min = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Min |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &Filter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Retry = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FilePickParameter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilePickParameter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilePickParameter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfImages", wireType)
			}
			m.NumberOfImages = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfImages |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S3Folder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S3Folder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PickerTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PickerTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Origin == nil {
				m.Origin = &SystemUser{}
			}
			if err := m.Origin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageMetaInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageMetaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageMetaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profession", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profession = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Role) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Role: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Role: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiPermissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiPermissions == nil {
				m.ApiPermissions = make(map[string]*APIPermission)
			}
			var mapkey string
			var mapvalue *APIPermission
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCommon
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCommon
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCommon
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCommon
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &APIPermission{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCommon(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCommon
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ApiPermissions[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdministrativePermissions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdministrativePermissions = append(m.AdministrativePermissions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicExecutions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicExecutions = append(m.LogicExecutions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemGenerated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SystemGenerated = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdmin = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIPermission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIPermission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIPermission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Read", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Read = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Create", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Create = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Update = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delete", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delete = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentProjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentProjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectLimit", wireType)
			}
			m.ProjectLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectLimit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuperAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuperAdmin = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserProjects) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserProjects: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserProjects: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &SystemUser{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Projects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Projects = append(m.Projects, &Project{})
			if err := m.Projects[len(m.Projects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProjectUser = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetaField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetaField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetaField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedBy == nil {
				m.CreatedBy = &UserMeta{}
			}
			if err := m.CreatedBy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastModifiedBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastModifiedBy == nil {
				m.LastModifiedBy = &UserMeta{}
			}
			if err := m.LastModifiedBy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreviewMode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreviewMode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreviewMode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Project) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Project: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Project: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schema == nil {
				m.Schema = &UserDefinedSchema{}
			}
			if err := m.Schema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpireAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extensions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extensions == nil {
				m.Extensions = make(map[string]*ExtensionDetails)
			}
			var mapkey string
			var mapvalue *ExtensionDetails
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCommon
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCommon
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCommon
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCommon
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ExtensionDetails{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCommon(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCommon
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Extensions[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Addons == nil {
				m.Addons = &AddOnsDetails{}
			}
			if err := m.Addons.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, &APIToken{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Roles == nil {
				m.Roles = make(map[string]*Role)
			}
			var mapkey string
			var mapvalue *Role
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCommon
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCommon
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCommon
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCommon
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Role{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCommon(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCommon
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Roles[mapkey] = mapvalue
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Driver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Driver == nil {
				m.Driver = &DriverCredentials{}
			}
			if err := m.Driver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TempBanned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TempBanned = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plan", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plan = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialEnds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrialEnds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SupportAndTicket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SupportAndTicket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SupportAndTicket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resolved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Resolved = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssueDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replies = append(m.Replies, &TicketReply{})
			if err := m.Replies[len(m.Replies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TicketReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TicketReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TicketReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserMeta{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edited", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Edited = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProjectInvoices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProjectInvoices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProjectInvoices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionStart", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionStart = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionEnd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionEnd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CouponCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountAmount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DiscountAmount = float64(math.Float64frombits(v))
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountPercentage", wireType)
			}
			m.DiscountPercentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiscountPercentage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Amount = float64(math.Float64frombits(v))
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Tax = float64(math.Float64frombits(v))
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentGateway", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PaymentGateway = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProjectUsages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProjectUsages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProjectUsages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Usage == nil {
				m.Usage = &UsagesTracking{}
			}
			if err := m.Usage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Limits == nil {
				m.Limits = &UsagesTracking{}
			}
			if err := m.Limits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriverCredentials) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriverCredentials: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriverCredentials: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Engine", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Engine = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Database = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectCredentialJson", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectCredentialJson = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expire = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtensionDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtensionDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtensionDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Credentials == nil {
				m.Credentials = &ThirdPartyCredential{}
			}
			if err := m.Credentials.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThirdPartyCredential) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThirdPartyCredential: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThirdPartyCredential: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddOnsDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddOnsDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddOnsDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locals", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locals = append(m.Locals, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemGraphqlHooks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SystemGraphqlHooks = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevisionHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RevisionHistory = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auth == nil {
				m.Auth = &AuthenticationAddOns{}
			}
			if err := m.Auth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthenticationAddOns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticationAddOns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticationAddOns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthUserRoles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthUserRoles = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountUsage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountUsage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountUsage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriptions = append(m.Subscriptions, &MonthlySubscription{})
			if err := m.Subscriptions[len(m.Subscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Limits == nil {
				m.Limits = &UsagesTracking{}
			}
			if err := m.Limits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Usages = append(m.Usages, &UsagesTracking{})
			if err := m.Usages[len(m.Usages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfProject", wireType)
			}
			m.NumberOfProject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfProject |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonthlySubscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonthlySubscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonthlySubscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubsData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubsData == nil {
				m.SubsData = &CommonPaymentData{}
			}
			if err := m.SubsData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonPaymentData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonPaymentData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonPaymentData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckoutSystem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckoutSystem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlanCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductAmount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ProductAmount = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscountCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Earning", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Earning = float64(math.Float64frombits(v))
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Fee = float64(math.Float64frombits(v))
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tax", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Tax = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UsagesTracking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsagesTracking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsagesTracking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiCalls", wireType)
			}
			m.ApiCalls = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiCalls |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiBandwidth", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ApiBandwidth = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaStorage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MediaStorage = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaBandwidth", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MediaBandwidth = float64(math.Float64frombits(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfMedia", wireType)
			}
			m.NumberOfMedia = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfMedia |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfRecords", wireType)
			}
			m.NumberOfRecords = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfRecords |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDefinedSchema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserDefinedSchema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserDefinedSchema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Models", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Models = append(m.Models, &ModelType{})
			if err := m.Models[len(m.Models)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Functions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Functions = append(m.Functions, &CloudFunction{})
			if err := m.Functions[len(m.Functions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &FieldInfo{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Connections = append(m.Connections, &ConnectionType{})
			if err := m.Connections[len(m.Connections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HookIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HookIds = append(m.HookIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locals", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locals = append(m.Locals, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedGroups = append(m.RepeatedGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemGenerated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SystemGenerated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudFunction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudFunction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudFunction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &CloudFunctionRequestResponseType{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &CloudFunctionRequestResponseType{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FunctionProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FunctionProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FunctionConnected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FunctionConnected = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProviderConfig == nil {
				m.ProviderConfig = &FunctionProviderConfig{}
			}
			if err := m.ProviderConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FunctionProviderConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FunctionProviderConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FunctionProviderConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteFunctionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteFunctionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvVars", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnvVars = append(m.EnvVars, &FunctionEnvVariables{})
			if err := m.EnvVars[len(m.EnvVars)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configs == nil {
				m.Configs = &FunctionInternalConfig{}
			}
			if err := m.Configs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FunctionEnvVariables) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FunctionEnvVariables: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FunctionEnvVariables: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudFunctionRequestResponseType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudFunctionRequestResponseType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudFunctionRequestResponseType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = append(m.Params, &FieldInfo{})
			if err := m.Params[len(m.Params)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FunctionInternalConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FunctionInternalConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FunctionInternalConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			m.Memory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memory |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handler = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeOut", wireType)
			}
			m.TimeOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeOut |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Required", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Required = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hide", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hide = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsTitle", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AsTitle = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locals", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locals = append(m.Locals, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unique", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unique = bool(v != 0)
		case 6:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CharLimit = append(m.CharLimit, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommon
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCommon
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CharLimit) == 0 {
					m.CharLimit = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CharLimit = append(m.CharLimit, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CharLimit", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEmail", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEmail = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placeholder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Placeholder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedListElements", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FixedListElements = append(m.FixedListElements, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IntRangeLimit = append(m.IntRangeLimit, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommon
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCommon
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IntRangeLimit) == 0 {
					m.IntRangeLimit = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IntRangeLimit = append(m.IntRangeLimit, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IntRangeLimit", wireType)
			}
		case 11:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.DoubleRangeLimit = append(m.DoubleRangeLimit, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommon
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCommon
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.DoubleRangeLimit) == 0 {
					m.DoubleRangeLimit = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.DoubleRangeLimit = append(m.DoubleRangeLimit, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleRangeLimit", wireType)
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMultiChoice", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMultiChoice = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGallery", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGallery = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPassword", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPassword = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSystemRole", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSystemRole = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubFieldInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubFieldInfo = append(m.SubFieldInfo, &SubFieldInfo{})
			if err := m.SubFieldInfo[len(m.SubFieldInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Validation == nil {
				m.Validation = &Validation{}
			}
			if err := m.Validation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serial", wireType)
			}
			m.Serial = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Serial |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemGenerated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SystemGenerated = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedGroupIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedGroupIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubFieldInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubFieldInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubFieldInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Validation == nil {
				m.Validation = &Validation{}
			}
			if err := m.Validation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serial", wireType)
			}
			m.Serial = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Serial |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemGenerated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SystemGenerated = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectionType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectionType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectionType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiTenantRelation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MultiTenantRelation = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectedRelation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProtectedRelation = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemGenerated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SystemGenerated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Webhook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Webhook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Webhook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicExecutions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicExecutions = append(m.LogicExecutions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommon = fmt.Errorf("proto: unexpected end of group")
)

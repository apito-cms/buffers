{
  "openapi": "3.0.1",
  "info": {
    "title": "Ticket Booking System",
    "description": "...",
    "version": "1.0.0"
  },
  "paths": {
    "/categories": {
      "delete": {
        "tags": [
          "Categories"
        ],
        "summary": "Deletes a Category",
        "operationId": "deleteCategory",
        "parameters": [
          {
            "name": "doc_id",
            "in": "query",
            "description": "The ID of the Doc",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An Object of Category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "List all Categories",
        "operationId": "listCategories",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "{\"title:contains\": \"fahim\", \"quantify\" : 20} The Query that you want to run.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "[\"name\", \"title\"] The Fields that you want to see in the Response JSON. Leve this blank if you want to see all fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination Support",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "local",
            "in": "query",
            "description": "Query Data with Locals",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of resources",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Whether not to include meta in the result",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An paged array of Categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Categories"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Updates a Category",
        "operationId": "updateCategory",
        "parameters": [
          {
            "name": "_id",
            "in": "query",
            "description": "The ID of the Document that you want to Update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The JSON of Category that you want to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "An Object of Category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "Categories"
        ],
        "summary": "Creates a Category",
        "operationId": "createCategory",
        "requestBody": {
          "description": "The JSON of Category that you want to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "An Object of Category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/function/connectedfuncs": {
      "post": {
        "tags": [
          "Functions"
        ],
        "operationId": "connectedfunc",
        "requestBody": {
          "description": "Model JSON as Request Object",
          "required": true,
          "content": {
            "application/json": {}
          }
        },
        "responses": {
          "200": {
            "description": "Model JSON as Response Object %!s(MISSING)",
            "content": {
              "application/json": {}
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/function/disconnectedfuncs": {
      "post": {
        "tags": [
          "Functions"
        ],
        "operationId": "disconnectedfunc",
        "requestBody": {
          "description": "Model User as Request Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Model Product as Response Object %!s(MISSING)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/function/testfunc2": {
      "post": {
        "tags": [
          "Functions"
        ],
        "operationId": "testfunc2",
        "requestBody": {
          "description": "Model JSON as Request Object",
          "required": true,
          "content": {
            "application/json": {}
          }
        },
        "responses": {
          "200": {
            "description": "Model JSON as Response Object %!s(MISSING)",
            "content": {
              "application/json": {}
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/function/testfunc3": {
      "post": {
        "tags": [
          "Functions"
        ],
        "operationId": "testfunc3",
        "requestBody": {
          "description": "Model JSON as Request Object",
          "required": true,
          "content": {
            "application/json": {}
          }
        },
        "responses": {
          "200": {
            "description": "Model JSON as Response Object %!s(MISSING)",
            "content": {
              "application/json": {}
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/function/testfunc4": {
      "post": {
        "tags": [
          "Functions"
        ],
        "operationId": "testfunc4",
        "requestBody": {
          "description": "Model JSON as Request Object",
          "required": true,
          "content": {
            "application/json": {}
          }
        },
        "responses": {
          "200": {
            "description": "Model JSON as Response Object %!s(MISSING)",
            "content": {
              "application/json": {}
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/function/testfunc5": {
      "post": {
        "tags": [
          "Functions"
        ],
        "operationId": "testfunc5",
        "requestBody": {
          "description": "Model JSON as Request Object",
          "required": true,
          "content": {
            "application/json": {}
          }
        },
        "responses": {
          "200": {
            "description": "Model JSON as Response Object %!s(MISSING)",
            "content": {
              "application/json": {}
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/function/testfuncs": {
      "post": {
        "tags": [
          "Functions"
        ],
        "operationId": "testfunc",
        "requestBody": {
          "description": "Model JSON as Request Object",
          "required": true,
          "content": {
            "application/json": {}
          }
        },
        "responses": {
          "200": {
            "description": "Model User as Response Object %!s(MISSING)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/products": {
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Deletes a Product",
        "operationId": "deleteProduct",
        "parameters": [
          {
            "name": "doc_id",
            "in": "query",
            "description": "The ID of the Doc",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An Object of Product",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "List all Products",
        "operationId": "listProducts",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "{\"title:contains\": \"fahim\", \"quantify\" : 20} The Query that you want to run.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "[\"name\", \"title\"] The Fields that you want to see in the Response JSON. Leve this blank if you want to see all fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination Support",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "local",
            "in": "query",
            "description": "Query Data with Locals",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of resources",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Whether not to include meta in the result",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An paged array of Products",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Products"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Updates a Product",
        "operationId": "updateProduct",
        "parameters": [
          {
            "name": "_id",
            "in": "query",
            "description": "The ID of the Document that you want to Update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The JSON of Product that you want to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "An Object of Product",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Creates a Product",
        "operationId": "createProduct",
        "requestBody": {
          "description": "The JSON of Product that you want to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "An Object of Product",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/system/media/upload": {
      "post": {
        "tags": [
          "System Media Upload"
        ],
        "summary": "Uploads a File to your current project",
        "operationId": "upload",
        "requestBody": {
          "description": "The FILE that you want to upload. Required field is file. `model`, `id`, `field_name` those 3 parameter is optional but if you use them, then all 3 has to be used together",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/fileUpload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "An Object of user",
            "content": {
              "application/json": {}
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/users": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes a User",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "doc_id",
            "in": "query",
            "description": "The ID of the Doc",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An Object of User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List all Users",
        "operationId": "listUsers",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "{\"title:contains\": \"fahim\", \"quantify\" : 20} The Query that you want to run.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "[\"name\", \"title\"] The Fields that you want to see in the Response JSON. Leve this blank if you want to see all fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination Support",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "local",
            "in": "query",
            "description": "Query Data with Locals",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of resources",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Whether not to include meta in the result",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An paged array of Users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Updates a User",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "_id",
            "in": "query",
            "description": "The ID of the Document that you want to Update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The JSON of User that you want to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "An Object of User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Creates a User",
        "operationId": "createUser",
        "requestBody": {
          "description": "The JSON of User that you want to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "An Object of User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    }
  },
  "servers": [
    {
      "url": "http://localhost:4000/secured/rest/693876438"
    }
  ],
  "tags": [
    {
      "name": "Users"
    },
    {
      "name": "Products"
    },
    {
      "name": "Categories"
    },
    {
      "name": "Functions"
    },
    {
      "name": "Functions"
    },
    {
      "name": "Functions"
    },
    {
      "name": "Functions"
    },
    {
      "name": "Functions"
    },
    {
      "name": "Functions"
    },
    {
      "name": "Functions"
    },
    {
      "name": "System Media Upload"
    }
  ],
  "components": {
    "schemas": {
      "Categories": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Category"
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "CategoryUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "Product": {
        "type": "object",
        "properties": {
          "_connections": {
            "type": "object",
            "properties": {
              "user_id": {
                "type": "string"
              }
            }
          },
          "product_image": {
            "type": "string"
          },
          "product_name": {
            "type": "string"
          }
        }
      },
      "ProductUpdate": {
        "type": "object",
        "properties": {
          "_connections": {
            "type": "object",
            "properties": {
              "user_id": {
                "type": "string"
              }
            }
          },
          "product_image": {
            "type": "string"
          },
          "product_name": {
            "type": "string"
          }
        }
      },
      "Products": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Product"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "_connections": {
            "type": "object",
            "properties": {
              "product_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "avatar": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "_connections": {
            "type": "object",
            "properties": {
              "product_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "avatar": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Users": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/User"
        }
      },
      "fileUpload": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "description": "(Optional) Under model which field this image will belong to"
          },
          "file": {
            "type": "string",
            "format": "binary"
          },
          "id": {
            "type": "string",
            "description": "(Optional) The Document Id of which this image will belong to. If using this parameter then you must fill `model` \u0026 `field_name` field"
          },
          "model": {
            "type": "string",
            "description": "(Optional) Use this if you want to this image to be under your particular model"
          }
        }
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}
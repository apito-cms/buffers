// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: codegen.proto

package codegen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CodeGen_GenCodes_FullMethodName          = "/codegen.CodeGen/GenCodes"
	CodeGen_BuildSchemaPlugin_FullMethodName = "/codegen.CodeGen/BuildSchemaPlugin"
)

// CodeGenClient is the client API for CodeGen service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodeGenClient interface {
	GenCodes(ctx context.Context, in *GenCodesRequest, opts ...grpc.CallOption) (*CodeGenSuccess, error)
	BuildSchemaPlugin(ctx context.Context, in *BuildSchemaPluginRequest, opts ...grpc.CallOption) (*BuildSchemaPluginResponse, error)
}

type codeGenClient struct {
	cc grpc.ClientConnInterface
}

func NewCodeGenClient(cc grpc.ClientConnInterface) CodeGenClient {
	return &codeGenClient{cc}
}

func (c *codeGenClient) GenCodes(ctx context.Context, in *GenCodesRequest, opts ...grpc.CallOption) (*CodeGenSuccess, error) {
	out := new(CodeGenSuccess)
	err := c.cc.Invoke(ctx, CodeGen_GenCodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeGenClient) BuildSchemaPlugin(ctx context.Context, in *BuildSchemaPluginRequest, opts ...grpc.CallOption) (*BuildSchemaPluginResponse, error) {
	out := new(BuildSchemaPluginResponse)
	err := c.cc.Invoke(ctx, CodeGen_BuildSchemaPlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodeGenServer is the server API for CodeGen service.
// All implementations must embed UnimplementedCodeGenServer
// for forward compatibility
type CodeGenServer interface {
	GenCodes(context.Context, *GenCodesRequest) (*CodeGenSuccess, error)
	BuildSchemaPlugin(context.Context, *BuildSchemaPluginRequest) (*BuildSchemaPluginResponse, error)
	mustEmbedUnimplementedCodeGenServer()
}

// UnimplementedCodeGenServer must be embedded to have forward compatible implementations.
type UnimplementedCodeGenServer struct {
}

func (UnimplementedCodeGenServer) GenCodes(context.Context, *GenCodesRequest) (*CodeGenSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenCodes not implemented")
}
func (UnimplementedCodeGenServer) BuildSchemaPlugin(context.Context, *BuildSchemaPluginRequest) (*BuildSchemaPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildSchemaPlugin not implemented")
}
func (UnimplementedCodeGenServer) mustEmbedUnimplementedCodeGenServer() {}

// UnsafeCodeGenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodeGenServer will
// result in compilation errors.
type UnsafeCodeGenServer interface {
	mustEmbedUnimplementedCodeGenServer()
}

func RegisterCodeGenServer(s grpc.ServiceRegistrar, srv CodeGenServer) {
	s.RegisterService(&CodeGen_ServiceDesc, srv)
}

func _CodeGen_GenCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeGenServer).GenCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeGen_GenCodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeGenServer).GenCodes(ctx, req.(*GenCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeGen_BuildSchemaPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildSchemaPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeGenServer).BuildSchemaPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeGen_BuildSchemaPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeGenServer).BuildSchemaPlugin(ctx, req.(*BuildSchemaPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CodeGen_ServiceDesc is the grpc.ServiceDesc for CodeGen service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CodeGen_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codegen.CodeGen",
	HandlerType: (*CodeGenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenCodes",
			Handler:    _CodeGen_GenCodes_Handler,
		},
		{
			MethodName: "BuildSchemaPlugin",
			Handler:    _CodeGen_BuildSchemaPlugin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "codegen.proto",
}

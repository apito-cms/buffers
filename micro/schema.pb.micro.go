// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: schema.proto

package micro

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MicroService service

func NewMicroServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MicroService service

type MicroService interface {
	ExeSchema(ctx context.Context, in *GenSchemaRequest, opts ...client.CallOption) (*GenSchemaResponse, error)
}

type microService struct {
	c    client.Client
	name string
}

func NewMicroService(name string, c client.Client) MicroService {
	return &microService{
		c:    c,
		name: name,
	}
}

func (c *microService) ExeSchema(ctx context.Context, in *GenSchemaRequest, opts ...client.CallOption) (*GenSchemaResponse, error) {
	req := c.c.NewRequest(c.name, "MicroService.ExeSchema", in)
	out := new(GenSchemaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MicroService service

type MicroServiceHandler interface {
	ExeSchema(context.Context, *GenSchemaRequest, *GenSchemaResponse) error
}

func RegisterMicroServiceHandler(s server.Server, hdlr MicroServiceHandler, opts ...server.HandlerOption) error {
	type microService interface {
		ExeSchema(ctx context.Context, in *GenSchemaRequest, out *GenSchemaResponse) error
	}
	type MicroService struct {
		microService
	}
	h := &microServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MicroService{h}, opts...))
}

type microServiceHandler struct {
	MicroServiceHandler
}

func (h *microServiceHandler) ExeSchema(ctx context.Context, in *GenSchemaRequest, out *GenSchemaResponse) error {
	return h.MicroServiceHandler.ExeSchema(ctx, in, out)
}
